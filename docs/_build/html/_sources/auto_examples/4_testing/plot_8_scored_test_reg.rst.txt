
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\4_testing\plot_8_scored_test_reg.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_4_testing_plot_8_scored_test_reg.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_4_testing_plot_8_scored_test_reg.py:


Scored Test: Regression
=====================================

.. GENERATED FROM PYTHON SOURCE LINES 6-18

.. code-block:: default

    import numpy as np
    from xgboost import XGBRegressor
    from sklearn.datasets import fetch_california_housing
    from sklearn.model_selection import train_test_split

    data = fetch_california_housing()
    train_x, test_x, train_y, test_y, train_idx, test_idx = train_test_split(data.data, data.target,
                                                                             np.arange(data.data.shape[0]), test_size=0.2)

    xgb2 = XGBRegressor(max_depth=2, n_estimators=100)
    xgb2.fit(train_x, train_y)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,
                 colsample_bylevel=None, colsample_bynode=None,
                 colsample_bytree=None, early_stopping_rounds=None,
                 enable_categorical=False, eval_metric=None, feature_types=None,
                 gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
                 interaction_constraints=None, learning_rate=None, max_bin=None,
                 max_cat_threshold=None, max_cat_to_onehot=None,
                 max_delta_step=None, max_depth=2, max_leaves=None,
                 min_child_weight=None, missing=nan, monotone_constraints=None,
                 n_estimators=100, n_jobs=None, num_parallel_tree=None,
                 predictor=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" checked><label for="sk-estimator-id-2" class="sk-toggleable__label sk-toggleable__label-arrow">XGBRegressor</label><div class="sk-toggleable__content"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,
                 colsample_bylevel=None, colsample_bynode=None,
                 colsample_bytree=None, early_stopping_rounds=None,
                 enable_categorical=False, eval_metric=None, feature_types=None,
                 gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
                 interaction_constraints=None, learning_rate=None, max_bin=None,
                 max_cat_threshold=None, max_cat_to_onehot=None,
                 max_delta_step=None, max_depth=2, max_leaves=None,
                 min_child_weight=None, missing=nan, monotone_constraints=None,
                 n_estimators=100, n_jobs=None, num_parallel_tree=None,
                 predictor=None, random_state=None, ...)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 19-20

Extract the required data inputs from PiML workflow 

.. GENERATED FROM PYTHON SOURCE LINES 20-27

.. code-block:: default

    X = data.data
    y = data.target
    task_type = 'regression'
    prediction = xgb2.predict(data.data)
    feature_names = data.feature_names
    target_name = data.target_names[0]








.. GENERATED FROM PYTHON SOURCE LINES 28-29

Prepare the necessary data information

.. GENERATED FROM PYTHON SOURCE LINES 29-38

.. code-block:: default

    data_dict = {'x': X,
                 'y': y,
                 'task_type': task_type,
                 'prediction': prediction,
                 'feature_names': feature_names,
                 'target_name': target_name,
                 'train_idx': train_idx,
                 'test_idx': test_idx}








.. GENERATED FROM PYTHON SOURCE LINES 39-40

Show the accuracy table 

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default

    from piml.scored_test import test_accuracy_table
    result = test_accuracy_table(**data_dict)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              MSE     MAE       R2
                              
    Train  0.2585  0.3558   0.8059
    Test   0.2709  0.3636   0.7965
    Gap    0.0124  0.0078  -0.0094




.. GENERATED FROM PYTHON SOURCE LINES 44-45

Plot the prediction residuals against one feature of interest 

.. GENERATED FROM PYTHON SOURCE LINES 45-48

.. code-block:: default

    from piml.scored_test import test_accuracy_residual
    result = test_accuracy_residual(**data_dict, show_feature='MedInc', figsize=(5, 4))




.. image-sg:: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_001.png
   :alt: Residual Plot
   :srcset: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 49-50

Run weakspot test to detect weak regions

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: default

    from piml.scored_test import test_weakspot
    result = test_weakspot(**data_dict, slice_features=['MedInc'], figsize=(5, 4))




.. image-sg:: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_002.png
   :alt: Weak Regions
   :srcset: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 54-55

Run overfit test to detect overfit regions

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default

    from piml.scored_test import test_overfit
    result = test_overfit(**data_dict, slice_method="histogram", slice_features=['MedInc'], figsize=(5, 4))




.. image-sg:: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_003.png
   :alt: Overfit Regions
   :srcset: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 59-60

Run reliability test to show relationship between prediction uncertainty and feature of interest 

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: default

    from piml.scored_test import test_reliability_marginal
    result = test_reliability_marginal(**data_dict, show_feature='MedInc', figsize=(5, 4))




.. image-sg:: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_004.png
   :alt: Segmented Bandwidth
   :srcset: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 64-65

Run reliability test to show data distance between reliable and unreliable samples. 

.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: default

    from piml.scored_test import test_reliability_distance
    result = test_reliability_distance(**data_dict, figsize=(5, 4))




.. image-sg:: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_005.png
   :alt: Distribution Shift: Unreliable vs. Remaining Regions
   :srcset: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-70

Run resilience test to show how model performance changes under distributional shift.

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: default

    from piml.scored_test import test_resilience_perf
    result = test_resilience_perf(**data_dict, figsize=(5, 4))




.. image-sg:: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_006.png
   :alt: Resilience Test
   :srcset: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 74-75

We can calculate the distributional difference between good regions and bad regions, e.g. the weak regions and the rest. Similarly, such plot can also be used for other tests, like reliablity. 

.. GENERATED FROM PYTHON SOURCE LINES 75-78

.. code-block:: default

    from piml.scored_test import test_resilience_distance
    result = test_resilience_distance(**data_dict, figsize=(5, 4))




.. image-sg:: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_007.png
   :alt: Distribution Shift: 10%-Worst vs Remaining
   :srcset: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 79-80

The distributional difference histogram plot. 

.. GENERATED FROM PYTHON SOURCE LINES 80-83

.. code-block:: default

    from piml.scored_test import test_resilience_shift_histogram
    result = test_resilience_shift_histogram(**data_dict, show_feature='MedInc', figsize=(5, 4))




.. image-sg:: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_008.png
   :alt: Distribution Shift: 10%-Worst vs Remaining
   :srcset: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 84-85

The distributional difference density plot. 

.. GENERATED FROM PYTHON SOURCE LINES 85-87

.. code-block:: default

    from piml.scored_test import test_resilience_shift_density
    result = test_resilience_shift_density(**data_dict, show_feature='MedInc', figsize=(5, 4))



.. image-sg:: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_009.png
   :alt: Distribution Shift: 10%-Worst vs Remaining
   :srcset: /auto_examples/4_testing/images/sphx_glr_plot_8_scored_test_reg_009.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  2.113 seconds)

**Estimated memory usage:**  15 MB


.. _sphx_glr_download_auto_examples_4_testing_plot_8_scored_test_reg.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/selfexplainml/piml-toolbox/main?urlpath=lab/tree/./docs/_build/html/notebooks/auto_examples/4_testing/plot_8_scored_test_reg.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_8_scored_test_reg.py <plot_8_scored_test_reg.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_8_scored_test_reg.ipynb <plot_8_scored_test_reg.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
