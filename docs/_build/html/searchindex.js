Search.setIndex({"docnames": ["auto_examples/0_data/index", "auto_examples/0_data/plot_0_data_loader_builtin", "auto_examples/0_data/plot_0_data_loader_dataframe", "auto_examples/0_data/plot_0_data_loader_spark", "auto_examples/0_data/plot_1_data_summary", "auto_examples/0_data/plot_2_data_eda", "auto_examples/0_data/plot_3_data_prepare", "auto_examples/0_data/plot_4_data_quality", "auto_examples/0_data/plot_5_feature_select", "auto_examples/0_data/sg_execution_times", "auto_examples/1_model_train/index", "auto_examples/1_model_train/plot_0_model_train", "auto_examples/1_model_train/plot_1_hpo_grid", "auto_examples/1_model_train/plot_1_hpo_random", "auto_examples/1_model_train/plot_2_register_arbitrary", "auto_examples/1_model_train/plot_2_register_h2o", "auto_examples/1_model_train/plot_2_register_sklearn", "auto_examples/1_model_train/sg_execution_times", "auto_examples/1_train/index", "auto_examples/1_train/plot_0_model_train", "auto_examples/1_train/plot_1_hpo_grid", "auto_examples/1_train/plot_1_hpo_random", "auto_examples/1_train/plot_2_register_0_sklearn", "auto_examples/1_train/plot_2_register_1_h2o", "auto_examples/1_train/plot_2_register_2_arbitrary", "auto_examples/1_train/plot_2_register_3_arbitrary_pyspark", "auto_examples/1_train/sg_execution_times", "auto_examples/2_explain/index", "auto_examples/2_explain/plot_0_pfi", "auto_examples/2_explain/plot_1_pdp", "auto_examples/2_explain/plot_1_pdp_hstats", "auto_examples/2_explain/plot_2_ice", "auto_examples/2_explain/plot_3_ale", "auto_examples/2_explain/plot_4_lime", "auto_examples/2_explain/plot_5_shap", "auto_examples/2_explain/plot_6_data_dependent_explain", "auto_examples/2_explain/sg_execution_times", "auto_examples/3_models/index", "auto_examples/3_models/plot_0_glm_cls", "auto_examples/3_models/plot_0_glm_reg", "auto_examples/3_models/plot_1_gam_cls", "auto_examples/3_models/plot_1_gam_reg", "auto_examples/3_models/plot_2_tree_cls", "auto_examples/3_models/plot_2_tree_reg", "auto_examples/3_models/plot_3_figs_cls", "auto_examples/3_models/plot_3_figs_reg", "auto_examples/3_models/plot_4_xgb1_cls", "auto_examples/3_models/plot_4_xgb1_reg", "auto_examples/3_models/plot_5_xgb2_cls", "auto_examples/3_models/plot_5_xgb2_reg", "auto_examples/3_models/plot_6_ebm_cls", "auto_examples/3_models/plot_6_ebm_reg", "auto_examples/3_models/plot_7_gaminet_cls", "auto_examples/3_models/plot_7_gaminet_reg", "auto_examples/3_models/plot_8_reludnn_cls", "auto_examples/3_models/plot_8_reludnn_reg", "auto_examples/3_models/sg_execution_times", "auto_examples/4_testing/index", "auto_examples/4_testing/plot_0_accuracy_cls", "auto_examples/4_testing/plot_0_accuracy_reg", "auto_examples/4_testing/plot_1_weakspot_cls", "auto_examples/4_testing/plot_1_weakspot_reg", "auto_examples/4_testing/plot_2_overfit_cls", "auto_examples/4_testing/plot_2_overfit_reg", "auto_examples/4_testing/plot_3_reliability_cls", "auto_examples/4_testing/plot_3_reliability_reg", "auto_examples/4_testing/plot_4_robustness_cls", "auto_examples/4_testing/plot_4_robustness_reg", "auto_examples/4_testing/plot_5_resilience_cls", "auto_examples/4_testing/plot_5_resilience_reg", "auto_examples/4_testing/plot_6_fairness", "auto_examples/4_testing/plot_7_segmented_cls", "auto_examples/4_testing/plot_7_segmented_reg", "auto_examples/4_testing/plot_8_scored_test_cls", "auto_examples/4_testing/plot_8_scored_test_reg", "auto_examples/4_testing/sg_execution_times", "auto_examples/5_compare/index", "auto_examples/5_compare/plot_0_compare_classification", "auto_examples/5_compare/plot_0_compare_regression", "auto_examples/5_compare/plot_1_compare_fairness", "auto_examples/5_compare/plot_2_compare_robustness", "auto_examples/5_compare/sg_execution_times", "auto_examples/index", "auto_examples/sg_execution_times", "contents", "faq", "guides/cases", "guides/cases/Example_BikeSharing", "guides/cases/Example_CaliforniaHousing", "guides/cases/Example_Fairness_SimuStudy1", "guides/cases/Example_Fairness_SimuStudy2", "guides/cases/Example_TaiwanCredit", "guides/compare", "guides/compare/compare_classification", "guides/compare/compare_fairness", "guides/compare/compare_regression", "guides/data", "guides/data/data_eda", "guides/data/data_load", "guides/data/data_prepare", "guides/data/data_quality_drift", "guides/data/data_quality_integrity", "guides/data/data_quality_outlier", "guides/data/data_summary", "guides/data/feature_select", "guides/explain", "guides/explain/ale", "guides/explain/hstats", "guides/explain/ice", "guides/explain/lime", "guides/explain/pdp", "guides/explain/pfi", "guides/explain/shap", "guides/introduction", "guides/models", "guides/models/ebm", "guides/models/figs", "guides/models/gam", "guides/models/gaminet", "guides/models/glm", "guides/models/reludnn", "guides/models/tree", "guides/models/xgb1", "guides/models/xgb2", "guides/testing", "guides/testing/accuracy", "guides/testing/fairness", "guides/testing/overfit", "guides/testing/reliability", "guides/testing/resilience", "guides/testing/robustness", "guides/testing/scored_test", "guides/testing/segmented_diagnose", "guides/testing/weakspot", "guides/train", "guides/train/arbitrary", "guides/train/h2o", "guides/train/hpo", "guides/train/sklearn", "install", "modules/classes", "modules/generated/piml.Experiment", "modules/generated/piml.data.outlier_detection.CBLOF", "modules/generated/piml.data.outlier_detection.ECOD", "modules/generated/piml.data.outlier_detection.HBOS", "modules/generated/piml.data.outlier_detection.IsolationForest", "modules/generated/piml.data.outlier_detection.KMeansTree", "modules/generated/piml.data.outlier_detection.KNN", "modules/generated/piml.data.outlier_detection.OneClassSVM", "modules/generated/piml.data.outlier_detection.PCA", "modules/generated/piml.models.ExplainableBoostingClassifier", "modules/generated/piml.models.ExplainableBoostingRegressor", "modules/generated/piml.models.FIGSClassifier", "modules/generated/piml.models.FIGSRegressor", "modules/generated/piml.models.GAMClassifier", "modules/generated/piml.models.GAMINetClassifier", "modules/generated/piml.models.GAMINetRegressor", "modules/generated/piml.models.GAMRegressor", "modules/generated/piml.models.GLMClassifier", "modules/generated/piml.models.GLMRegressor", "modules/generated/piml.models.ReluDNNClassifier", "modules/generated/piml.models.ReluDNNRegressor", "modules/generated/piml.models.TreeClassifier", "modules/generated/piml.models.TreeRegressor", "modules/generated/piml.models.XGB1Classifier", "modules/generated/piml.models.XGB1Regressor", "modules/generated/piml.models.XGB2Classifier", "modules/generated/piml.models.XGB2Regressor", "modules/generated/piml.scored_test.test_accuracy_plot", "modules/generated/piml.scored_test.test_accuracy_residual", "modules/generated/piml.scored_test.test_accuracy_table", "modules/generated/piml.scored_test.test_overfit", "modules/generated/piml.scored_test.test_reliability_calibration", "modules/generated/piml.scored_test.test_reliability_distance", "modules/generated/piml.scored_test.test_reliability_marginal", "modules/generated/piml.scored_test.test_reliability_perf", "modules/generated/piml.scored_test.test_reliability_table", "modules/generated/piml.scored_test.test_resilience_distance", "modules/generated/piml.scored_test.test_resilience_perf", "modules/generated/piml.scored_test.test_resilience_shift_density", "modules/generated/piml.scored_test.test_resilience_shift_histogram", "modules/generated/piml.scored_test.test_weakspot", "preface", "sg_execution_times", "tune_toc", "user_guide"], "filenames": ["auto_examples\\0_data\\index.rst", "auto_examples\\0_data\\plot_0_data_loader_builtin.rst", "auto_examples\\0_data\\plot_0_data_loader_dataframe.rst", "auto_examples\\0_data\\plot_0_data_loader_spark.rst", "auto_examples\\0_data\\plot_1_data_summary.rst", "auto_examples\\0_data\\plot_2_data_eda.rst", "auto_examples\\0_data\\plot_3_data_prepare.rst", "auto_examples\\0_data\\plot_4_data_quality.rst", "auto_examples\\0_data\\plot_5_feature_select.rst", "auto_examples\\0_data\\sg_execution_times.rst", "auto_examples\\1_model_train\\index.rst", "auto_examples\\1_model_train\\plot_0_model_train.rst", "auto_examples\\1_model_train\\plot_1_hpo_grid.rst", "auto_examples\\1_model_train\\plot_1_hpo_random.rst", "auto_examples\\1_model_train\\plot_2_register_arbitrary.rst", "auto_examples\\1_model_train\\plot_2_register_h2o.rst", "auto_examples\\1_model_train\\plot_2_register_sklearn.rst", "auto_examples\\1_model_train\\sg_execution_times.rst", "auto_examples\\1_train\\index.rst", "auto_examples\\1_train\\plot_0_model_train.rst", "auto_examples\\1_train\\plot_1_hpo_grid.rst", "auto_examples\\1_train\\plot_1_hpo_random.rst", "auto_examples\\1_train\\plot_2_register_0_sklearn.rst", "auto_examples\\1_train\\plot_2_register_1_h2o.rst", "auto_examples\\1_train\\plot_2_register_2_arbitrary.rst", "auto_examples\\1_train\\plot_2_register_3_arbitrary_pyspark.rst", "auto_examples\\1_train\\sg_execution_times.rst", "auto_examples\\2_explain\\index.rst", "auto_examples\\2_explain\\plot_0_pfi.rst", "auto_examples\\2_explain\\plot_1_pdp.rst", "auto_examples\\2_explain\\plot_1_pdp_hstats.rst", "auto_examples\\2_explain\\plot_2_ice.rst", "auto_examples\\2_explain\\plot_3_ale.rst", "auto_examples\\2_explain\\plot_4_lime.rst", "auto_examples\\2_explain\\plot_5_shap.rst", "auto_examples\\2_explain\\plot_6_data_dependent_explain.rst", "auto_examples\\2_explain\\sg_execution_times.rst", "auto_examples\\3_models\\index.rst", "auto_examples\\3_models\\plot_0_glm_cls.rst", "auto_examples\\3_models\\plot_0_glm_reg.rst", "auto_examples\\3_models\\plot_1_gam_cls.rst", "auto_examples\\3_models\\plot_1_gam_reg.rst", "auto_examples\\3_models\\plot_2_tree_cls.rst", "auto_examples\\3_models\\plot_2_tree_reg.rst", "auto_examples\\3_models\\plot_3_figs_cls.rst", "auto_examples\\3_models\\plot_3_figs_reg.rst", "auto_examples\\3_models\\plot_4_xgb1_cls.rst", "auto_examples\\3_models\\plot_4_xgb1_reg.rst", "auto_examples\\3_models\\plot_5_xgb2_cls.rst", "auto_examples\\3_models\\plot_5_xgb2_reg.rst", "auto_examples\\3_models\\plot_6_ebm_cls.rst", "auto_examples\\3_models\\plot_6_ebm_reg.rst", "auto_examples\\3_models\\plot_7_gaminet_cls.rst", "auto_examples\\3_models\\plot_7_gaminet_reg.rst", "auto_examples\\3_models\\plot_8_reludnn_cls.rst", "auto_examples\\3_models\\plot_8_reludnn_reg.rst", "auto_examples\\3_models\\sg_execution_times.rst", "auto_examples\\4_testing\\index.rst", "auto_examples\\4_testing\\plot_0_accuracy_cls.rst", "auto_examples\\4_testing\\plot_0_accuracy_reg.rst", "auto_examples\\4_testing\\plot_1_weakspot_cls.rst", "auto_examples\\4_testing\\plot_1_weakspot_reg.rst", "auto_examples\\4_testing\\plot_2_overfit_cls.rst", "auto_examples\\4_testing\\plot_2_overfit_reg.rst", "auto_examples\\4_testing\\plot_3_reliability_cls.rst", "auto_examples\\4_testing\\plot_3_reliability_reg.rst", "auto_examples\\4_testing\\plot_4_robustness_cls.rst", "auto_examples\\4_testing\\plot_4_robustness_reg.rst", "auto_examples\\4_testing\\plot_5_resilience_cls.rst", "auto_examples\\4_testing\\plot_5_resilience_reg.rst", "auto_examples\\4_testing\\plot_6_fairness.rst", "auto_examples\\4_testing\\plot_7_segmented_cls.rst", "auto_examples\\4_testing\\plot_7_segmented_reg.rst", "auto_examples\\4_testing\\plot_8_scored_test_cls.rst", "auto_examples\\4_testing\\plot_8_scored_test_reg.rst", "auto_examples\\4_testing\\sg_execution_times.rst", "auto_examples\\5_compare\\index.rst", "auto_examples\\5_compare\\plot_0_compare_classification.rst", "auto_examples\\5_compare\\plot_0_compare_regression.rst", "auto_examples\\5_compare\\plot_1_compare_fairness.rst", "auto_examples\\5_compare\\plot_2_compare_robustness.rst", "auto_examples\\5_compare\\sg_execution_times.rst", "auto_examples\\index.rst", "auto_examples\\sg_execution_times.rst", "contents.rst", "faq.rst", "guides\\cases.rst", "guides\\cases\\Example_BikeSharing.ipynb", "guides\\cases\\Example_CaliforniaHousing.ipynb", "guides\\cases\\Example_Fairness_SimuStudy1.ipynb", "guides\\cases\\Example_Fairness_SimuStudy2.ipynb", "guides\\cases\\Example_TaiwanCredit.ipynb", "guides\\compare.rst", "guides\\compare\\compare_classification.rst", "guides\\compare\\compare_fairness.rst", "guides\\compare\\compare_regression.rst", "guides\\data.rst", "guides\\data\\data_eda.rst", "guides\\data\\data_load.rst", "guides\\data\\data_prepare.rst", "guides\\data\\data_quality_drift.rst", "guides\\data\\data_quality_integrity.rst", "guides\\data\\data_quality_outlier.rst", "guides\\data\\data_summary.rst", "guides\\data\\feature_select.rst", "guides\\explain.rst", "guides\\explain\\ale.rst", "guides\\explain\\hstats.rst", "guides\\explain\\ice.rst", "guides\\explain\\lime.rst", "guides\\explain\\pdp.rst", "guides\\explain\\pfi.rst", "guides\\explain\\shap.rst", "guides\\introduction.rst", "guides\\models.rst", "guides\\models\\ebm.rst", "guides\\models\\figs.rst", "guides\\models\\gam.rst", "guides\\models\\gaminet.rst", "guides\\models\\glm.rst", "guides\\models\\reludnn.rst", "guides\\models\\tree.rst", "guides\\models\\xgb1.rst", "guides\\models\\xgb2.rst", "guides\\testing.rst", "guides\\testing\\accuracy.rst", "guides\\testing\\fairness.rst", "guides\\testing\\overfit.rst", "guides\\testing\\reliability.rst", "guides\\testing\\resilience.rst", "guides\\testing\\robustness.rst", "guides\\testing\\scored_test.rst", "guides\\testing\\segmented_diagnose.rst", "guides\\testing\\weakspot.rst", "guides\\train.rst", "guides\\train\\arbitrary.rst", "guides\\train\\h2o.rst", "guides\\train\\hpo.rst", "guides\\train\\sklearn.rst", "install.rst", "modules\\classes.rst", "modules\\generated\\piml.Experiment.rst", "modules\\generated\\piml.data.outlier_detection.CBLOF.rst", "modules\\generated\\piml.data.outlier_detection.ECOD.rst", "modules\\generated\\piml.data.outlier_detection.HBOS.rst", "modules\\generated\\piml.data.outlier_detection.IsolationForest.rst", "modules\\generated\\piml.data.outlier_detection.KMeansTree.rst", "modules\\generated\\piml.data.outlier_detection.KNN.rst", "modules\\generated\\piml.data.outlier_detection.OneClassSVM.rst", "modules\\generated\\piml.data.outlier_detection.PCA.rst", "modules\\generated\\piml.models.ExplainableBoostingClassifier.rst", "modules\\generated\\piml.models.ExplainableBoostingRegressor.rst", "modules\\generated\\piml.models.FIGSClassifier.rst", "modules\\generated\\piml.models.FIGSRegressor.rst", "modules\\generated\\piml.models.GAMClassifier.rst", "modules\\generated\\piml.models.GAMINetClassifier.rst", "modules\\generated\\piml.models.GAMINetRegressor.rst", "modules\\generated\\piml.models.GAMRegressor.rst", "modules\\generated\\piml.models.GLMClassifier.rst", "modules\\generated\\piml.models.GLMRegressor.rst", "modules\\generated\\piml.models.ReluDNNClassifier.rst", "modules\\generated\\piml.models.ReluDNNRegressor.rst", "modules\\generated\\piml.models.TreeClassifier.rst", "modules\\generated\\piml.models.TreeRegressor.rst", "modules\\generated\\piml.models.XGB1Classifier.rst", "modules\\generated\\piml.models.XGB1Regressor.rst", "modules\\generated\\piml.models.XGB2Classifier.rst", "modules\\generated\\piml.models.XGB2Regressor.rst", "modules\\generated\\piml.scored_test.test_accuracy_plot.rst", "modules\\generated\\piml.scored_test.test_accuracy_residual.rst", "modules\\generated\\piml.scored_test.test_accuracy_table.rst", "modules\\generated\\piml.scored_test.test_overfit.rst", "modules\\generated\\piml.scored_test.test_reliability_calibration.rst", "modules\\generated\\piml.scored_test.test_reliability_distance.rst", "modules\\generated\\piml.scored_test.test_reliability_marginal.rst", "modules\\generated\\piml.scored_test.test_reliability_perf.rst", "modules\\generated\\piml.scored_test.test_reliability_table.rst", "modules\\generated\\piml.scored_test.test_resilience_distance.rst", "modules\\generated\\piml.scored_test.test_resilience_perf.rst", "modules\\generated\\piml.scored_test.test_resilience_shift_density.rst", "modules\\generated\\piml.scored_test.test_resilience_shift_histogram.rst", "modules\\generated\\piml.scored_test.test_weakspot.rst", "preface.rst", "sg_execution_times.rst", "tune_toc.rst", "user_guide.rst"], "titles": ["Data Pipeline", "Data Load (Built-in Dataset)", "Data Load (Pandas DataFrame)", "Data Load (Spark)", "Data Summary", "EDA", "Data Preparation", "Data Quality Check", "Feature Selection", "Computation times", "Model Train and Tune", "Train External Models", "HPO - XGB - Grid Search (Bike Sharing)", "HPO - GLM - Random Search (SimuCredit)", "Registering Arbitrary Models", "Registering H2O Models", "Registering sklearn Style Models", "Computation times", "Model Train and Tune", "Train Models", "HPO - Grid Search", "HPO - Random Search", "Register sklearn Style Models", "Register H2O Models", "Register Arbitrary Models", "Register PySpark Models", "Computation times", "Post hoc Explainability", "Permutation Feature Importance", "Partial Dependence Plot", "H-statistics", "Individual Conditional Expectation", "Accumulated Local Effects", "Local Interpretable Model-Agnostic Explanation", "SHapley Additive exPlanations", "Data Dependent Explanation", "Computation times", "Interpretable Models", "GLM Logistic Regression (Taiwan Credit)", "GLM Linear Regression (Bike Sharing)", "GAM Classification (CoCircles)", "GAM Regression (California Housing)", "Tree Classification (TaiwanCredit)", "Tree Regression (California Housing)", "FIGS Classification (Taiwan Credit)", "FIGS Regression (California Housing)", "XGB-1 Classification (CoCircles)", "XGB-1 Regression (California Housing)", "XGB-2 Classification (Taiwan Credit)", "XGB-2 Regression (Bike Sharing)", "EBM Classification (Taiwan Credit)", "EBM Regression (Bike Sharing)", "GAMI-Net Classification (Taiwan Credit)", "GAMI-Net Regression (Bike Sharing)", "ReLU DNN Classification (Taiwan Credit)", "ReLU DNN Regression (Friedman)", "Computation times", "Outcome Testing", "Accuracy: Classification", "Accuracy: Regression", "WeakSpot: Classification", "WeakSpot: Regression", "Overfit: Classification", "Overfit: Regression", "Reliability: Classification", "Reliability: Regression", "Robustness: Classification", "Robustness:  Regression", "Resilience:  Classification", "Resilience - Regression", "Fairness Test: XGB2", "Segmented Diagnose (Classification)", "Segmented Diagnose (Regression)", "Scored Test: Classification", "Scored Test: Regression", "Computation times", "Model Comparison", "Model Comparison: Classification", "Model Comparison: Regression", "Fairness Comparison", "Build Robust Models with Monotonicity Constraints", "Computation times", "Examples", "Computation times", "Table Of Contents", "Frequently Asked Questions", "<span class=\"section-number\">8. </span>Case Studies", "<span class=\"section-number\">8.1. </span>BikeSharing Data", "<span class=\"section-number\">8.2. </span>CaliforniaHousing Data", "<span class=\"section-number\">8.4. </span>Fairness Simulation Study 1", "<span class=\"section-number\">8.5. </span>Fairness Simulation Study 2", "<span class=\"section-number\">8.3. </span>TaiwanCredit Data", "<span class=\"section-number\">7. </span>Model Comparison", "<span class=\"section-number\">7.2. </span>Comparison for Classification", "<span class=\"section-number\">7.3. </span>Fairness Comparison", "<span class=\"section-number\">7.1. </span>Comparison for Regression", "<span class=\"section-number\">2. </span>Data Pipeline", "<span class=\"section-number\">2.4. </span>Exploratory Analysis", "<span class=\"section-number\">2.1. </span>Data Load", "<span class=\"section-number\">2.3. </span>Data Preparation", "<span class=\"section-number\">2.7. </span>Data Quality (Drift Test)", "<span class=\"section-number\">2.5. </span>Data Quality (Integrity Check)", "<span class=\"section-number\">2.6. </span>Data Quality (Outlier Detection)", "<span class=\"section-number\">2.2. </span>Data Summary", "<span class=\"section-number\">2.8. </span>Feature Selection", "<span class=\"section-number\">4. </span>Post-hoc Explainability", "<span class=\"section-number\">4.5. </span>ALE (Accumulated Local Effects)", "<span class=\"section-number\">4.3. </span>Hstats (Friedman\u2019s H-statistic)", "<span class=\"section-number\">4.4. </span>ICE (Individual Conditional Expectation)", "<span class=\"section-number\">4.6. </span>LIME (Local Interpretable Model-Agnostic Explanation)", "<span class=\"section-number\">4.2. </span>PDP (Partial Dependence Plot)", "<span class=\"section-number\">4.1. </span>PFI (Permutation Feature Importance)", "<span class=\"section-number\">4.7. </span>SHAP (SHapley Additive exPlanations)", "<span class=\"section-number\">1. </span>Introduction", "<span class=\"section-number\">5. </span>Interpretable Models", "<span class=\"section-number\">5.7. </span>Explainable Boosting Machines", "<span class=\"section-number\">5.4. </span>Fast Interpretable Greedy-tree Sums", "<span class=\"section-number\">5.2. </span>Generalized Additive Model", "<span class=\"section-number\">5.8. </span>GAMI-Net", "<span class=\"section-number\">5.1. </span>Generalized Linear Models", "<span class=\"section-number\">5.9. </span>ReLU Neural Network", "<span class=\"section-number\">5.3. </span>Decision Tree", "<span class=\"section-number\">5.5. </span>XGBoost Depth 1", "<span class=\"section-number\">5.6. </span>XGBoost Depth 2", "<span class=\"section-number\">6. </span>Diagnostic Suite", "<span class=\"section-number\">6.1. </span>Accuracy", "<span class=\"section-number\">6.7. </span>Fairness", "<span class=\"section-number\">6.3. </span>Overfit", "<span class=\"section-number\">6.4. </span>Reliability", "<span class=\"section-number\">6.6. </span>Resilience", "<span class=\"section-number\">6.5. </span>Robustness", "<span class=\"section-number\">6.9. </span>Scored Test", "<span class=\"section-number\">6.8. </span>Segmented", "<span class=\"section-number\">6.2. </span>WeakSpot", "<span class=\"section-number\">3. </span>Model Train and Tune", "<span class=\"section-number\">3.3. </span>Register Arbitrary Models", "<span class=\"section-number\">3.2. </span>Register H2O Models", "<span class=\"section-number\">3.4. </span>Hyperparameter Optimization (Model Tune)", "<span class=\"section-number\">3.1. </span>Train and Register Sklearn Style Model", "Installation", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml</span></code>.Experiment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.data.outlier_detection</span></code>.CBLOF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.data.outlier_detection</span></code>.ECOD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.data.outlier_detection</span></code>.HBOS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.data.outlier_detection</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.data.outlier_detection</span></code>.KMeansTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.data.outlier_detection</span></code>.KNN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.data.outlier_detection</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.data.outlier_detection</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.ExplainableBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.ExplainableBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.FIGSClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.FIGSRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.GAMClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.GAMINetClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.GAMINetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.GAMRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.GLMClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.GLMRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.ReluDNNClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.ReluDNNRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.TreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.TreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.XGB1Classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.XGB1Regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.XGB2Classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.models</span></code>.XGB2Regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.scored_test</span></code>.test_accuracy_plot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.scored_test</span></code>.test_accuracy_residual", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.scored_test</span></code>.test_accuracy_table", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.scored_test</span></code>.test_overfit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.scored_test</span></code>.test_reliability_calibration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.scored_test</span></code>.test_reliability_distance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.scored_test</span></code>.test_reliability_marginal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.scored_test</span></code>.test_reliability_perf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.scored_test</span></code>.test_reliability_table", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.scored_test</span></code>.test_resilience_distance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.scored_test</span></code>.test_resilience_perf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.scored_test</span></code>.test_resilience_shift_density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.scored_test</span></code>.test_resilience_shift_histogram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">piml.scored_test</span></code>.test_weakspot", "Welcome to PiML", "Computation times", "&lt;no title&gt;", "User guide: contents"], "terms": {"load": [0, 9, 11, 15, 16, 19, 22, 23, 62, 74, 82, 86, 93, 96, 101, 103, 113, 115, 119, 123, 125, 127, 128, 130, 131, 133, 134, 141, 155, 156, 183, 185], "built": [0, 8, 9, 82, 96, 104, 112, 120, 137, 141, 146, 183], "dataset": [0, 2, 4, 5, 6, 7, 8, 9, 14, 15, 16, 22, 23, 24, 25, 74, 82, 87, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 138, 141, 155, 156, 160, 161, 183], "panda": [0, 3, 7, 9, 15, 23, 25, 71, 72, 82, 136, 139, 141, 183], "datafram": [0, 3, 9, 15, 23, 25, 82, 107, 136, 141, 183], "spark": [0, 9, 25, 82, 96, 141, 183], "summari": [0, 9, 34, 54, 55, 71, 72, 82, 96, 101, 116, 122, 125, 130, 133, 141, 183, 185], "eda": [0, 9, 82, 87, 88, 89, 90, 91, 97, 113, 141, 183], "prepar": [0, 1, 2, 4, 5, 7, 8, 9, 12, 13, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82, 86, 96, 102, 111, 117, 120, 121, 135, 138, 141, 183, 185], "qualiti": [0, 9, 82, 96, 97, 113, 126, 128, 141, 142, 143, 144, 145, 146, 147, 148, 149, 162, 163, 183, 185], "check": [0, 9, 14, 15, 16, 22, 23, 24, 25, 82, 87, 88, 90, 95, 96, 97, 100, 102, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 183, 185], "featur": [0, 4, 7, 9, 25, 27, 30, 34, 36, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 82, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 102, 105, 106, 107, 108, 109, 110, 113, 121, 125, 126, 127, 128, 129, 131, 132, 133, 136, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185], "select": [0, 7, 9, 12, 13, 20, 21, 25, 71, 72, 82, 89, 90, 93, 95, 96, 99, 102, 106, 118, 119, 120, 121, 122, 125, 129, 130, 132, 133, 137, 141, 144, 145, 149, 150, 151, 155, 156, 162, 163, 171, 177, 178, 179, 180, 181, 183, 185], "go": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80], "end": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 100, 101, 102, 104, 106, 107, 108, 110, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128, 162, 163], "download": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82], "full": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 94, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 115, 117, 118, 119, 120, 122, 123, 126, 128, 130, 140, 141, 149], "exampl": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 83, 86, 87, 88, 89, 90, 91, 92, 96, 105, 113, 114, 124, 134, 183], "code": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82, 86, 87, 88, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 141], "run": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 87, 88, 89, 90, 91, 104, 113, 127, 130, 134, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 162, 163], "thi": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 177, 179, 180], "your": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 90, 98, 99, 103, 122, 129, 132, 139], "browser": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80], "via": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 98, 104, 107, 115, 120, 123, 137, 141, 146, 149, 150, 151], "binder": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80], "experi": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 85, 87, 88, 89, 90, 91, 98, 104, 113, 126, 130, 131, 135, 136, 137, 138, 139], "initi": [1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 77, 78, 79, 80, 104, 113, 122, 126, 133, 137, 138, 141, 150, 151, 155, 156, 160, 161], "from": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 83, 85, 87, 88, 89, 90, 91, 93, 94, 95, 97, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 161, 163, 164, 165, 167, 183], "piml": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140], "import": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82, 87, 88, 89, 90, 91, 93, 94, 95, 96, 99, 102, 105, 107, 113, 121, 125, 128, 129, 130, 131, 132, 133, 135, 136, 138, 141, 155, 156, 162, 163, 183, 185], "exp": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141], "data_load": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 19, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 87, 88, 89, 90, 91, 98, 113, 138, 141], "cocircl": [1, 37, 56, 82, 98, 141, 154, 164, 183], "x0": [1, 3, 14, 24, 30, 40, 46, 55, 98, 107, 122, 135, 141], "x1": [1, 3, 14, 24, 30, 40, 46, 89, 98, 107, 122, 135, 141], "target": [1, 6, 7, 8, 11, 12, 13, 15, 16, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 77, 78, 79, 80, 90, 93, 95, 98, 99, 100, 106, 110, 111, 119, 122, 125, 130, 131, 136, 137, 138, 141, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "0": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 88, 90, 91, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183], "783526": [1, 98], "502161": [1, 98], "1": [1, 2, 3, 6, 7, 8, 9, 11, 12, 13, 14, 15, 19, 20, 21, 23, 24, 25, 30, 32, 35, 37, 39, 40, 41, 44, 45, 49, 50, 51, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 82, 86, 87, 88, 90, 91, 94, 99, 100, 101, 102, 103, 104, 113, 114, 126, 135, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 185], "297809": [1, 98], "658405": [1, 98], "2": [1, 2, 3, 6, 7, 8, 11, 12, 13, 14, 16, 19, 20, 21, 22, 24, 25, 30, 37, 40, 42, 43, 53, 54, 55, 56, 60, 61, 62, 63, 66, 67, 68, 70, 71, 72, 74, 78, 79, 82, 86, 87, 91, 99, 100, 101, 102, 103, 104, 113, 114, 126, 139, 141, 146, 147, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 171, 177, 179, 180, 181, 183, 185], "468272": [1, 98], "500653": [1, 98], "3": [1, 2, 3, 6, 7, 9, 11, 12, 13, 19, 20, 21, 30, 42, 43, 44, 45, 54, 55, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 77, 78, 79, 80, 87, 88, 89, 90, 91, 93, 95, 99, 101, 103, 106, 107, 108, 112, 116, 117, 118, 120, 121, 122, 125, 129, 130, 132, 133, 137, 139, 141, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167], "134700": 1, "887973": 1, "4": [1, 2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 146, 150, 151, 155, 156, 162], "337202": 1, "780797": 1, "1995": 1, "498109": 1, "889060": 1, "1996": 1, "312980": 1, "724953": 1, "1997": [1, 98], "542930": [1, 98], "583517": [1, 98], "1998": [1, 98], "871481": [1, 98], "491301": [1, 98], "1999": [1, 98], "323963": [1, 98], "719150": [1, 98], "2000": [1, 30, 102, 104, 106, 107, 108, 110, 141], "row": [1, 2, 3, 11, 12, 13, 19, 20, 21, 54, 101, 120, 141], "x": [1, 2, 3, 11, 14, 19, 24, 25, 38, 39, 54, 73, 74, 93, 95, 100, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 122, 123, 125, 128, 129, 130, 131, 133, 135, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "column": [1, 2, 3, 6, 7, 11, 12, 13, 15, 19, 20, 21, 23, 25, 54, 90, 96, 98, 99, 116, 125, 132, 133, 136, 141, 162], "total": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 101, 119, 120, 122, 125, 141, 146, 150, 151, 153, 156, 161, 162, 163, 164, 165, 166, 167, 183], "time": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 90, 100, 104, 111, 112, 113, 116, 120, 127, 128, 130, 137, 150, 151, 155, 156], "script": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 136], "minut": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80], "7": [1, 9, 11, 16, 17, 19, 22, 26, 30, 36, 55, 60, 61, 63, 70, 71, 72, 78, 79, 87, 88, 89, 90, 91, 93, 102, 103, 104, 107, 115, 123, 130, 132, 138, 139], "267": [1, 9], "second": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 93, 95, 97, 99, 103, 106, 107, 108, 109, 110, 111, 112, 115, 116, 118, 119, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 150, 151, 155, 156], "estim": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 95, 100, 102, 106, 110, 112, 115, 116, 117, 118, 119, 122, 123, 125, 128, 135, 136, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "memori": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 147, 155, 156, 160, 161], "usag": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 100, 101, 102, 104, 105, 116, 122, 123, 124, 125, 134], "12": [1, 2, 25, 26, 30, 40, 44, 45, 55, 56, 70, 72, 88, 90, 98, 103, 107, 113, 116, 129, 130, 132, 139], "mb": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 83, 148, 183], "python": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82, 101, 106, 112, 113, 116, 117, 120, 122, 123, 139], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82], "plot_0_data_loader_builtin": [1, 9, 183], "py": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 139, 183], "jupyt": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82, 113], "notebook": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82, 87, 88, 91, 113], "ipynb": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 87, 88, 89, 90, 91], "galleri": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82, 183], "gener": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82, 93, 95, 98, 99, 100, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 141, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 167, 171, 181, 185], "sphinx": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 82], "pd": [2, 3, 15, 23, 25, 98, 110, 136, 141], "read_csv": [2, 25, 98], "http": [2, 25, 98, 104, 113, 141, 149, 152, 153], "github": [2, 16, 22, 25, 74, 98, 113, 141, 152, 153], "com": [2, 25, 98, 113, 141, 152, 153], "selfexplainml": [2, 25, 98, 113], "toolbox": [2, 25, 98, 185], "blob": [2, 25, 98], "main": [2, 25, 80, 87, 88, 91, 98, 104, 106, 120, 150, 151, 154, 155, 156, 157, 164, 165, 166, 167], "bikeshar": [2, 4, 5, 6, 7, 8, 12, 20, 28, 29, 31, 32, 33, 34, 39, 49, 51, 53, 59, 61, 63, 65, 67, 69, 72, 78, 86, 98, 104, 106, 107, 108, 109, 110, 111, 112, 119, 131, 141, 185], "csv": [2, 25, 96], "raw": [2, 25, 67, 93, 95, 98, 101, 122, 123, 128, 130, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 160, 161, 164, 165, 166, 167], "true": [2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 93, 94, 98, 101, 102, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 132, 133, 135, 136, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "season": [2, 5, 7, 29, 39, 49, 51, 59, 72, 97, 98, 101, 103, 104, 110, 112, 115, 118, 119, 123, 125, 131, 132], "yr": [2, 4, 5, 7, 12, 20, 28, 29, 31, 32, 33, 34, 39, 49, 51, 53, 59, 61, 63, 65, 67, 69, 72, 78, 87, 97, 98, 103, 104], "mnth": [2, 4, 7, 12, 20, 28, 29, 31, 32, 33, 34, 39, 49, 51, 53, 59, 61, 63, 65, 67, 69, 72, 78, 87, 98, 103, 104], "hr": [2, 5, 7, 8, 29, 31, 32, 34, 49, 51, 53, 59, 61, 63, 65, 67, 69, 72, 78, 95, 97, 98, 101, 103, 104, 106, 108, 109, 110, 111, 112, 115, 118, 119, 123, 125, 127, 128, 130, 132], "holidai": [2, 7, 98, 101, 103, 111], "weekdai": [2, 4, 7, 31, 53, 98, 101, 103, 104, 118], "workingdai": [2, 7, 29, 61, 72, 98, 101, 103, 104, 110, 111, 115, 118, 123, 132], "weathersit": [2, 7, 32, 98, 101, 103, 104, 106], "temp": [2, 4, 5, 7, 8, 12, 20, 28, 29, 31, 32, 33, 34, 39, 49, 51, 53, 59, 61, 63, 65, 67, 69, 72, 78, 87, 97, 98, 103, 104, 119], "6": [2, 5, 6, 7, 8, 9, 11, 12, 17, 19, 20, 30, 32, 36, 40, 41, 42, 43, 55, 60, 61, 63, 66, 67, 70, 71, 72, 79, 80, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 103, 104, 106, 107, 108, 109, 113, 117, 121, 125, 126, 130, 132, 133, 137, 139, 141, 146, 154, 157, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181], "24": [2, 4, 5, 9, 11, 17, 19, 21, 24, 25, 26, 30, 32, 36, 55, 62, 70, 98, 102, 107, 108, 139], "22": [2, 11, 19, 30, 55, 61, 70, 98, 107, 113], "17374": 2, "19": [2, 19, 30, 51, 55, 70, 102, 107], "26": [2, 7, 30, 46, 55, 75, 98, 101, 107], "17375": 2, "20": [2, 9, 30, 36, 40, 41, 46, 47, 55, 59, 62, 70, 88, 90, 99, 104, 107, 112, 116, 117, 120, 121, 122, 127, 128, 129, 133, 137, 139, 141, 152, 153, 154, 155, 156, 157, 160, 161, 164, 165, 166, 167, 171, 181], "17376": 2, "21": [2, 6, 11, 19, 28, 30, 45, 55, 70, 73, 77, 78, 79, 98, 107, 139], "17377": [2, 98], "17378": [2, 98], "23": [2, 9, 11, 19, 30, 55, 69, 70, 79, 98, 102, 103, 107, 113, 151, 153, 156, 161, 163, 165, 167], "atemp": [2, 7, 31, 32, 49, 63, 67, 72, 98, 100, 101, 103, 106, 109, 111, 112, 115, 118, 123, 127, 130, 132], "hum": [2, 7, 72, 98, 101, 103, 104, 109, 112, 115, 119, 123, 132], "windspe": [2, 7, 72, 98, 101, 103, 118, 132], "cnt": [2, 5, 6, 7, 8, 12, 20, 28, 29, 31, 32, 33, 34, 39, 49, 51, 53, 59, 61, 63, 65, 67, 69, 72, 78, 87, 95, 97, 98, 99, 101, 103, 106, 107, 108, 109, 110, 111, 112, 115, 118, 119, 122, 123, 125, 127, 128, 130, 131, 132, 133], "2879": [2, 62, 98], "81": [2, 12, 20, 78, 98, 137], "0000": [2, 7, 39, 54, 55, 60, 61, 62, 98, 101, 103], "16": [2, 7, 11, 17, 19, 30, 42, 43, 44, 45, 55, 70, 98, 101, 107, 115, 116, 118, 121, 123], "2727": [2, 7, 98, 101], "80": [2, 12, 20, 98, 137, 149], "40": [2, 22, 30, 54, 55, 62, 67, 70, 79, 95, 98, 103, 107, 120, 128, 130, 160, 161], "32": [2, 11, 19, 24, 30, 36, 55, 63, 65, 70, 98, 107, 111, 113, 126, 139, 150, 151], "75": [2, 62, 133], "13": [2, 7, 30, 44, 55, 70, 90, 101, 102, 103, 107], "2576": [2, 7, 98, 101], "60": [2, 90, 98, 128], "1642": [2, 98], "119": 2, "89": 2, "90": [2, 70, 79, 90, 95, 98, 128, 142, 143, 144, 145, 146, 147, 148, 149], "56": [2, 12, 17, 36, 61, 68, 71, 98], "1343": [2, 98], "61": [2, 70, 79, 98], "65": [2, 7, 55, 98, 101, 108], "49": [2, 11, 19, 98], "17379": [2, 6, 98, 99, 103], "8": [2, 7, 11, 15, 19, 23, 25, 30, 36, 47, 55, 60, 61, 63, 70, 71, 72, 79, 87, 88, 89, 90, 91, 93, 94, 101, 107, 108, 112, 115, 118, 126, 130, 132, 133, 136, 139, 141, 150, 151, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181], "890": [2, 9], "plot_0_data_loader_datafram": [2, 9, 183], "parquet": [3, 98], "demonstr": [3, 14, 15, 16, 22, 23, 24, 25, 87, 88, 89, 90, 91, 93, 94, 95, 99, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 135, 136], "numpi": [3, 6, 14, 15, 23, 24, 73, 74, 131, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 164, 165, 166, 167], "np": [3, 6, 14, 15, 23, 24, 73, 74, 99, 135, 136, 137, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167], "random": [3, 6, 8, 10, 11, 14, 17, 18, 19, 24, 26, 82, 96, 98, 102, 109, 111, 125, 129, 131, 135, 141, 142, 145, 146, 149, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183], "seed": [3, 15, 23, 25, 99, 131, 136, 141, 142, 146, 149, 152, 153, 155, 156, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "original_df": 3, "hstack": [3, 15, 23, 136], "randint": [3, 141], "size": [3, 7, 14, 24, 30, 66, 67, 71, 72, 90, 93, 95, 98, 100, 101, 102, 104, 110, 113, 120, 121, 122, 127, 130, 131, 132, 133, 135, 137, 141, 142, 146, 147, 148, 150, 151, 155, 156, 160, 161, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181], "100000": [3, 98, 141], "uniform": [3, 13, 14, 21, 24, 70, 72, 100, 126, 128, 130, 132, 135, 137, 141, 177], "10": [3, 7, 28, 29, 30, 32, 36, 41, 42, 43, 44, 45, 50, 51, 55, 58, 60, 64, 65, 68, 69, 70, 71, 72, 73, 77, 78, 87, 88, 90, 91, 93, 95, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 127, 128, 129, 130, 132, 133, 141, 142, 144, 146, 150, 151, 155, 156, 171, 174, 175, 177, 179, 180, 181], "y": [3, 14, 24, 73, 74, 93, 94, 95, 98, 100, 101, 104, 109, 112, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128, 130, 131, 133, 135, 138, 141, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "str": [3, 141, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "i": [3, 7, 8, 14, 16, 22, 24, 74, 85, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167], "rang": [3, 97, 101, 102, 104, 106, 109, 112, 120, 122, 123, 125, 126, 127, 129, 132, 133, 137, 141, 147], "to_parquet": 3, "myfil": [3, 98], "10000": [3, 29, 98, 99, 100, 110, 155, 156, 160, 161], "sampl": [3, 6, 7, 11, 19, 66, 67, 68, 69, 71, 72, 73, 74, 77, 78, 87, 88, 90, 96, 98, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 171, 173, 177, 178, 179, 180, 181], "purli": [3, 98], "randomli": [3, 95, 99, 100, 102, 109, 111, 112, 137, 141, 145, 162, 163], "spark_sample_s": [3, 98, 141], "spark_random_st": [3, 98, 141], "x2": [3, 30, 55, 89, 98, 107, 141], "x3": [3, 30, 98, 107], "x4": [3, 30, 98, 107], "x5": [3, 30, 89, 98, 107, 141], "722108": 3, "630742": 3, "179797": 3, "046212": 3, "622879": 3, "087904": 3, "100578": 3, "064457": 3, "261228": 3, "298484": 3, "806278": 3, "297039": 3, "306140": 3, "979178": 3, "924876": 3, "148939": 3, "794436": 3, "026896": 3, "597057": 3, "736664": 3, "261621": 3, "585320": 3, "459879": 3, "581889": 3, "262903": 3, "676545": 3, "521757": 3, "051982": 3, "439505": 3, "422332": 3, "9936": 3, "377520": 3, "149886": 3, "267827": 3, "666580": 3, "233089": 3, "401495": 3, "9937": 3, "952963": 3, "415568": 3, "688008": 3, "225129": 3, "169116": 3, "190439": 3, "9938": 3, "601043": 3, "634523": 3, "282413": 3, "934208": 3, "492232": 3, "598559": 3, "9939": 3, "524421": 3, "683701": 3, "365216": 3, "107878": 3, "095759": 3, "190358": 3, "9940": 3, "347192": 3, "458382": 3, "415295": 3, "618297": 3, "117932": 3, "873784": 3, "x6": [3, 30, 98, 107], "x7": [3, 30, 98, 107], "x8": [3, 30, 98, 107], "x9": [3, 30, 98, 107], "524907": 3, "493184": 3, "508395": 3, "993584": 3, "970116": 3, "378889": 3, "077614": 3, "703995": 3, "054786": 3, "890156": 3, "752913": 3, "938883": 3, "791780": 3, "018643": 3, "365007": 3, "048767": 3, "995145": 3, "868960": 3, "452228": 3, "110775": 3, "543934": 3, "444068": 3, "231257": 3, "025619": 3, "352821": 3, "611961": 3, "665948": 3, "449606": 3, "500579": 3, "161602": 3, "190709": 3, "113384": 3, "462231": 3, "612478": 3, "587393": 3, "313063": 3, "377266": 3, "734037": 3, "113734": 3, "830916": 3, "9941": 3, "11": [3, 7, 9, 17, 30, 55, 70, 87, 88, 90, 101, 103, 107, 109, 139], "stratifi": [3, 98, 141], "spark_sample_by_featur": [3, 98, 141], "9946": 3, "9947": 3, "9948": 3, "9949": 3, "9950": [3, 14], "9951": 3, "given": [3, 7, 64, 65, 71, 72, 101, 102, 104, 109, 112, 115, 116, 118, 120, 122, 123, 127, 131, 137, 141, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 169, 171, 174, 181], "uneven": 3, "ratio": [3, 6, 7, 11, 15, 19, 23, 90, 94, 95, 98, 99, 101, 126, 127, 128, 129, 133, 136, 141, 155, 156, 160, 161, 177, 179, 180], "spark_sample_fract": [3, 98, 141], "5": [3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 144, 145, 147, 148, 151, 155, 156, 160, 161, 162, 163], "321004": 3, "340024": 3, "614322": 3, "863309": 3, "402909": 3, "380781": 3, "9954": 3, "802121": 3, "425349": 3, "139584": 3, "365250": 3, "677365": 3, "962125": 3, "9955": 3, "9956": 3, "9957": 3, "9958": 3, "046856": 3, "428831": 3, "600180": 3, "017023": 3, "689377": 3, "804052": 3, "854092": 3, "558963": 3, "723463": 3, "290868": 3, "235756": 3, "846328": 3, "983629": 3, "139173": 3, "822894": 3, "489409": 3, "372789": 3, "979409": 3, "9959": 3, "39": [3, 9, 11, 16, 17, 19, 30, 107, 113, 139], "289": [3, 9], "54": [3, 9, 15, 17, 58], "plot_0_data_loader_spark": [3, 9, 183], "show": [4, 5, 7, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 89, 90, 93, 94, 95, 97, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 138, 141, 177], "result": [4, 6, 7, 12, 13, 20, 21, 60, 61, 62, 63, 65, 71, 72, 73, 74, 92, 93, 94, 95, 101, 102, 104, 106, 107, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 141, 145, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 174, 178, 181], "us": [4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 29, 35, 60, 61, 63, 73, 74, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 169, 171, 177, 178, 179, 180, 181], "highcode_onli": [4, 14, 15, 16, 22, 23, 24, 25, 135, 136, 141], "silent": [4, 5, 6, 7, 8, 12, 13, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 141], "remov": [4, 7, 90, 101, 102, 104, 111, 112, 119, 120, 123, 141, 149], "data_summari": [4, 7, 12, 13, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 42, 44, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 77, 78, 79, 80, 87, 88, 89, 90, 91, 101, 103, 113, 141], "feature_exclud": [4, 7, 12, 13, 20, 21, 28, 29, 31, 32, 33, 34, 35, 38, 39, 42, 44, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 77, 78, 79, 80, 103, 141], "chang": [4, 73, 74, 95, 100, 102, 104, 108, 109, 113, 119, 120, 125, 129, 130, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "type": [4, 6, 7, 11, 19, 70, 97, 99, 101, 102, 113, 122, 126, 130, 131, 136, 141, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "feature_typ": [4, 16, 22, 73, 74, 103, 131, 141, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "categor": [4, 7, 39, 90, 93, 95, 97, 98, 99, 101, 104, 106, 110, 119, 125, 126, 131, 132, 141, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "096": [4, 9], "14": [4, 7, 9, 30, 36, 51, 55, 60, 64, 70, 90, 101, 107], "plot_1_data_summari": [4, 9, 183], "plot": [5, 7, 12, 20, 27, 28, 31, 32, 33, 34, 36, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 64, 65, 68, 69, 73, 74, 80, 82, 93, 94, 95, 96, 100, 102, 105, 106, 107, 108, 109, 111, 113, 116, 119, 121, 126, 128, 129, 130, 131, 137, 141, 155, 156, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 183, 185], "data": [5, 8, 9, 11, 12, 13, 15, 16, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 84, 85, 86, 93, 95, 97, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 141, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185], "histogram": [5, 60, 61, 62, 63, 64, 65, 68, 69, 73, 74, 77, 78, 93, 95, 97, 115, 117, 118, 122, 123, 127, 131, 133, 141, 144, 150, 151, 164, 165, 166, 167, 171, 180, 181], "densiti": [5, 68, 69, 71, 72, 73, 74, 97, 100, 102, 106, 131, 132, 133, 141, 155, 156, 179], "univari": [5, 96, 102, 122, 141], "uni_featur": [5, 11, 14, 19, 24, 25, 29, 31, 32, 34, 35, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 80, 97, 106, 108, 110, 112, 115, 117, 118, 119, 120, 122, 123, 135, 138, 141], "figsiz": [5, 7, 8, 11, 12, 14, 15, 16, 19, 20, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 93, 94, 95, 97, 100, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 141, 146, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181], "bar": [5, 93, 94, 95, 97, 104, 106, 109, 110, 112, 117, 119, 120, 122, 125], "scatter": [5, 34, 97, 112, 125, 141], "bivari": [5, 96, 141], "bi_featur": [5, 29, 32, 49, 51, 53, 54, 55, 97, 106, 110, 115, 118, 120, 123, 141], "box": [5, 95, 97, 113, 115, 120, 121, 123, 130, 138], "stack": [5, 97], "correl": [5, 7, 8, 87, 88, 96, 97, 102, 106, 110, 112, 122, 125, 128, 141], "heatmap": [5, 44, 45, 97, 106, 110, 123, 141], "multivari": [5, 96, 102, 110, 141], "multi_typ": [5, 97, 141], "correlation_heatmap": [5, 97, 141], "graph": [5, 97, 147, 150, 151], "correlation_graph": [5, 97, 141], "55": [5, 9, 23, 67, 129], "352": [5, 9], "plot_2_data_eda": [5, 9, 183], "displai": [6, 93, 94, 95, 97, 100, 101, 102, 112, 115, 116, 117, 118, 119, 122, 123, 125, 126, 127, 129, 130, 132, 133, 137, 141, 160, 161], "split": [6, 11, 19, 44, 45, 85, 96, 102, 106, 113, 116, 121, 122, 123, 128, 132, 133, 141, 145, 146, 152, 153, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "data_prepar": [6, 7, 8, 11, 12, 13, 19, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 87, 88, 89, 90, 91, 99, 101, 104, 113, 138, 141], "task_typ": [6, 7, 8, 11, 12, 13, 14, 15, 19, 20, 21, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 99, 131, 135, 136, 138, 141, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "regress": [6, 7, 8, 11, 12, 15, 19, 20, 23, 28, 29, 30, 31, 32, 33, 34, 37, 56, 57, 75, 76, 81, 82, 87, 88, 92, 98, 99, 102, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 136, 137, 138, 141, 151, 152, 153, 156, 157, 159, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185], "sample_weight": [6, 99, 141, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167], "none": [6, 11, 16, 19, 22, 67, 69, 74, 77, 78, 93, 95, 99, 116, 129, 130, 132, 133, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "split_method": [6, 99, 141], "test_ratio": [6, 12, 13, 20, 21, 99, 137, 141], "random_st": [6, 11, 16, 19, 22, 74, 99, 131, 138, 141, 142, 145, 146, 149, 150, 151, 152, 153, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "config": [6, 11, 19, 99, 141], "valu": [6, 7, 11, 15, 19, 23, 25, 46, 47, 70, 90, 94, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 123, 125, 126, 127, 128, 129, 130, 132, 133, 136, 137, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "exclud": [6, 11, 19, 87, 89, 90, 91, 99, 106, 126, 141, 150, 151, 155, 156], "variabl": [6, 11, 19, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 108, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133, 141], "weight": [6, 11, 19, 46, 47, 89, 99, 101, 109, 112, 119, 120, 125, 141, 142, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167], "task": [6, 11, 19, 65, 93, 99, 102, 106, 107, 108, 110, 111, 112, 113, 121, 124, 126, 127, 129, 130, 131, 132, 133, 135, 137, 141, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "method": [6, 7, 8, 11, 12, 13, 19, 20, 21, 66, 67, 87, 90, 92, 93, 95, 97, 99, 100, 101, 104, 106, 110, 111, 112, 113, 117, 121, 122, 123, 126, 127, 128, 129, 130, 132, 133, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 177, 178, 179, 180, 181], "test": [6, 7, 8, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 29, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 66, 67, 71, 75, 84, 85, 86, 93, 95, 96, 98, 101, 102, 106, 107, 108, 109, 110, 111, 112, 113, 119, 124, 125, 126, 127, 128, 129, 132, 133, 134, 141, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185], "state": [6, 11, 19, 98, 99, 112, 113, 120, 126, 133, 141, 150, 151, 159], "outer": [6, 68, 69, 129, 141, 150, 151, 177, 178, 179, 180], "base": [6, 39, 60, 61, 62, 63, 89, 93, 94, 100, 101, 103, 104, 106, 107, 109, 110, 111, 112, 113, 117, 118, 119, 121, 122, 125, 126, 127, 128, 129, 131, 132, 133, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 162, 163, 164, 165, 166, 167, 169, 171, 174, 181], "kmean": [6, 141, 142, 146], "420277": [6, 99], "custom": [6, 66, 67, 70, 85, 87, 88, 91, 99, 103, 117, 126, 129, 132, 133, 141, 146], "custom_train_idx": [6, 99], "arang": [6, 73, 74, 99], "16000": [6, 99], "custom_test_idx": [6, 99], "train_idx": [6, 73, 74, 99, 131, 141, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "test_idx": [6, 73, 74, 99, 131, 141, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "manual": [6, 90, 103, 113, 117, 122, 137, 155, 156], "079349": [6, 99], "35": [6, 9, 30, 45, 55, 62, 107], "172": [6, 9], "plot_3_data_prepar": [6, 9, 183], "analysi": [7, 71, 72, 87, 88, 89, 90, 96, 99, 101, 106, 107, 108, 110, 111, 113, 127, 128, 132, 133, 137, 141, 185], "outlier_detect": [7, 102, 141], "pca": [7, 102, 141, 146], "cblof": [7, 141], "isolationforest": [7, 102, 141], "kmeanstre": [7, 141], "oneclasssvm": [7, 102, 141], "knn": [7, 102, 141], "hbo": [7, 102, 141], "ecod": [7, 102, 141], "integr": [7, 89, 96, 102, 109, 110, 113, 115, 119, 120, 137, 141, 185], "each": [7, 64, 65, 91, 93, 95, 97, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 177, 178, 179, 180], "re": [7, 30, 71, 72, 116, 122, 152, 153, 162, 163], "data_qu": [7, 100, 101, 102, 113, 141], "integrity_single_column_check": [7, 101, 141], "return_data": [7, 30, 60, 61, 62, 63, 65, 70, 71, 72, 79, 94, 107, 109, 115, 117, 118, 119, 122, 123, 126, 127, 128, 132, 133, 141], "io": [7, 71, 72], "format": [7, 71, 72, 98, 101, 103, 122, 135, 136], "style": [7, 10, 14, 17, 18, 24, 26, 71, 72, 82, 99, 103, 134, 135, 136, 141, 183, 185], "styler": [7, 71, 72], "object": [7, 71, 72, 117, 119, 131, 133, 137, 138, 141, 142, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "0x0000022054be01c0": 7, "nbsp": [7, 101, 103], "singl": [7, 60, 61, 62, 63, 93, 95, 96, 97, 104, 106, 110, 112, 116, 119, 120, 125, 129, 131, 133, 137, 141, 154, 157, 162, 163], "null": [7, 101, 104, 125], "mix": [7, 101], "long": [7, 101, 120, 130, 135], "string": [7, 93, 95, 101, 103, 137, 144, 145, 146, 147, 148, 149, 155, 156, 162, 163], "special": [7, 101, 116, 120, 122], "charact": [7, 101, 104], "new": [7, 98, 100, 101, 102, 113, 116, 117, 141, 145, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "categori": [7, 70, 79, 89, 90, 97, 98, 99, 101, 102, 103, 106, 119, 126, 130, 141, 155, 156], "numer": [7, 38, 39, 90, 93, 95, 97, 99, 101, 104, 106, 110, 119, 125, 126, 131, 132, 141, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "num": [7, 90, 101], "index": [7, 39, 70, 79, 99, 100, 101, 106, 109, 112, 116, 119, 120, 128, 129, 131, 132, 141, 150, 151, 154, 155, 156, 157, 162, 163, 164, 165, 166, 167, 173, 177], "fals": [7, 15, 16, 22, 23, 29, 32, 33, 38, 39, 49, 54, 55, 58, 59, 74, 101, 106, 107, 108, 109, 110, 111, 112, 119, 120, 123, 125, 133, 136, 141, 142, 145, 148, 149, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 169, 181], "000000": [7, 101], "duplic": [7, 96, 141], "integrity_duplicated_sampl": [7, 101, 141], "leakag": [7, 101], "1507": [7, 101], "9867": [7, 101], "9822": [7, 101], "17336": [7, 101], "13559": [7, 101], "13727": [7, 101], "5598": [7, 101], "14639": [7, 101], "7958": [7, 101], "8126": [7, 101], "64": [7, 101, 146], "2273": [7, 101], "48": [7, 11, 19, 55, 75, 101], "2985": [7, 101], "6061": [7, 101], "83": [7, 101], "0896": [7, 101], "5606": [7, 63, 101], "88": [7, 11, 19, 71, 101, 133], "1045": [7, 101, 103], "integrity_highly_correlated_featur": [7, 101, 141], "0x000002205340ddc0": 7, "00": [7, 9, 17, 26, 36, 56, 75, 81, 83, 101, 183], "01": [7, 9, 36, 46, 47, 75, 101, 115, 122, 150, 151, 155, 156, 164, 165], "77": [7, 12, 20, 60, 101, 137], "05": [7, 17, 36, 56, 61, 62, 63, 101, 127, 160, 161], "28": [7, 12, 30, 55, 101, 107, 128], "51": [7, 22, 71, 75, 101], "09": [7, 11, 19, 30, 101, 107], "03": [7, 9, 30, 61, 81, 101, 107, 183], "04": [7, 30, 61, 101, 107, 112], "02": [7, 9, 17, 30, 101, 107], "42": [7, 30, 101, 107, 150, 151], "08": [7, 9, 30, 56, 101, 107], "15": [7, 21, 29, 30, 33, 55, 70, 72, 74, 90, 101, 107, 112, 132, 150, 151], "29": [7, 30, 55, 65, 70, 79, 101, 102, 107, 113], "36": [7, 30, 55, 101, 104, 107], "score": [7, 57, 64, 75, 82, 106, 111, 112, 113, 118, 124, 125, 129, 130, 133, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 183, 185], "distribut": [7, 64, 65, 68, 69, 71, 72, 73, 74, 87, 88, 90, 93, 95, 96, 97, 99, 104, 112, 113, 119, 120, 125, 128, 129, 130, 131, 137, 139, 141, 143, 148, 179, 180], "od_score_distribut": [7, 102, 141], "threshold": [7, 8, 60, 61, 62, 63, 64, 65, 70, 90, 98, 102, 104, 113, 124, 125, 127, 128, 132, 133, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 156, 160, 161, 171, 173, 174, 181], "999": [7, 71, 102], "od_marginal_outlier_distribut": [7, 102, 141], "compar": [7, 12, 13, 16, 20, 21, 22, 92, 93, 94, 95, 100, 101, 102, 104, 106, 109, 113, 116, 117, 118, 119, 122, 125, 128, 129, 130, 131, 132, 133, 141, 173, 177, 179, 180], "differ": [7, 14, 16, 22, 24, 25, 73, 74, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 104, 106, 109, 110, 111, 112, 113, 115, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 141, 145, 162, 163, 177, 178, 179, 180], "outlier": [7, 95, 96, 97, 101, 115, 141, 142, 143, 144, 145, 146, 147, 148, 149, 185], "detect": [7, 73, 74, 93, 95, 96, 97, 101, 113, 115, 127, 133, 141, 142, 143, 144, 145, 147, 148, 149, 185], "algorithm": [7, 93, 95, 99, 102, 104, 105, 113, 115, 116, 120, 121, 123, 124, 126, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 162, 163, 164, 165, 166, 167], "od_tsne_comparison": [7, 102, 141], "appli": [7, 90, 93, 95, 99, 100, 107, 112, 120, 122, 128, 129, 130, 133, 162, 163], "you": [7, 98, 99, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 115, 117, 118, 119, 121, 122, 123, 126, 127, 128, 129, 130, 132, 133, 136, 137, 138, 139, 141, 146, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "can": [7, 14, 15, 23, 24, 73, 74, 85, 88, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 145, 147, 149, 150, 151, 153, 156, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "also": [7, 73, 74, 93, 94, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137, 138, 146, 155, 156, 162, 163], "specifi": [7, 11, 19, 93, 95, 98, 99, 101, 103, 104, 106, 110, 111, 112, 113, 115, 116, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 137, 141, 148, 149, 162, 164, 165, 166, 167], "train": [7, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 84, 85, 86, 93, 95, 96, 100, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 125, 126, 127, 128, 129, 131, 132, 133, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185], "all": [7, 38, 39, 67, 71, 72, 82, 90, 91, 93, 95, 99, 101, 102, 104, 106, 107, 108, 111, 112, 115, 116, 117, 118, 119, 120, 123, 125, 129, 130, 131, 132, 135, 136, 137, 138, 141, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 183], "remove_outli": [7, 102, 141], "energi": [7, 96, 99, 141], "distanc": [7, 8, 64, 65, 68, 69, 71, 72, 73, 74, 77, 78, 90, 96, 99, 102, 106, 131, 132, 141, 146, 147, 162, 163, 173, 177, 178, 179, 180], "drift_test_info": [7, 100, 141], "13889": [7, 100], "3476": [7, 100], "000488": [7, 100], "margin": [7, 68, 69, 96, 97, 109, 112, 113, 118, 119, 120, 131, 132, 141, 155, 156, 169, 171, 174, 179, 180, 181], "drift": [7, 96, 101, 130, 132, 141, 185], "drift_test_dist": [7, 100, 141], "distance_metr": [7, 64, 65, 68, 69, 100, 128, 129, 132, 141, 173, 177], "psi": [7, 64, 65, 68, 69, 90, 100, 128, 129, 132, 141, 146, 173, 177], "psi_bucket": [7, 100, 128, 129, 132, 141, 177], "quantil": [7, 66, 67, 70, 90, 98, 100, 102, 106, 126, 128, 129, 130, 132, 141, 142, 143, 144, 145, 146, 147, 148, 149, 177], "show_featur": [7, 58, 59, 64, 65, 68, 69, 71, 72, 73, 74, 100, 125, 128, 129, 131, 132, 141, 169, 174, 179, 180], "914": [7, 9], "1326": 7, "plot_4_data_qu": [7, 9, 183], "four": [8, 99, 104, 106, 113, 119, 129, 137, 146, 162], "strategi": [8, 104, 126, 127, 137, 141, 152, 153, 162, 163, 177], "pearson": [8, 104, 141], "feature_select": [8, 87, 88, 101, 104, 113, 141], "cor": [8, 104, 141], "corr_algorithm": [8, 104, 141], "spearman": [8, 101, 104, 141], "dcor": [8, 104, 139, 141], "permut": [8, 27, 36, 82, 88, 91, 104, 105, 113, 141, 162, 163, 183, 185], "pfi": [8, 14, 15, 23, 24, 28, 35, 87, 104, 105, 113, 136, 141, 185], "95": [8, 52, 56, 104], "condit": [8, 27, 36, 82, 96, 97, 101, 102, 105, 112, 123, 126, 129, 133, 141, 183, 185], "independ": [8, 96, 102, 110, 112, 120, 122, 129, 141, 144, 148], "rcit": [8, 141], "001": [8, 54, 55, 104, 120, 148, 155, 156, 160, 161], "n_forward_phas": [8, 104, 141], "kernel_s": [8, 104, 141], "100": [8, 12, 13, 16, 20, 21, 22, 29, 30, 34, 35, 44, 45, 46, 60, 61, 63, 67, 68, 69, 70, 74, 104, 106, 108, 110, 112, 116, 122, 126, 127, 133, 137, 138, 141, 145, 154, 155, 156, 157, 164, 165, 166, 167], "where": [8, 94, 97, 98, 99, 100, 101, 102, 104, 106, 107, 110, 112, 113, 115, 116, 119, 120, 121, 122, 123, 125, 126, 127, 130, 131, 133, 137, 150, 151, 153, 156, 161, 162, 163, 165, 167], "markov": [8, 104], "boundari": [8, 98, 104, 125, 141], "non": [8, 68, 90, 102, 104, 110, 117, 123, 125, 148, 150, 151, 154, 157, 158, 159, 162, 163], "empti": [8, 101, 104, 141, 155, 156, 177, 178, 179, 180], "preset": [8, 104, 141], "865": [8, 9], "973": [8, 9], "plot_5_feature_select": [8, 9, 183], "06": [9, 30, 36, 107, 115, 118, 123], "845": [9, 11, 19], "execut": [9, 17, 26, 36, 56, 75, 81, 83, 101, 104, 113, 131, 132, 137, 141, 183], "auto_examples_0_data": 9, "file": [9, 11, 15, 17, 19, 23, 26, 36, 56, 75, 81, 83, 96, 138, 141, 155, 156, 183], "1325": 9, "9": [9, 11, 19, 30, 36, 55, 61, 63, 66, 70, 71, 72, 75, 79, 87, 88, 90, 91, 102, 107, 108, 116, 117, 121, 122, 129, 130, 132, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 177, 179, 180], "18": [9, 11, 19, 30, 36, 55, 56, 70, 103, 107, 108, 113, 162, 163], "07": [9, 30, 107, 112, 118], "extern": [10, 16, 17, 22, 96, 141], "hpo": [10, 17, 18, 26, 82, 137, 141, 158, 183], "xgb": [10, 16, 17, 22, 37, 56, 82, 90, 104, 118, 122, 123, 129, 141, 164, 165, 166, 167, 177, 178, 179, 180, 183], "grid": [10, 13, 17, 18, 21, 26, 30, 82, 106, 107, 108, 110, 126, 141, 183], "search": [10, 17, 18, 26, 82, 116, 126, 141, 147, 158, 162, 163, 183], "bike": [10, 17, 37, 56, 82, 87, 95, 98, 115, 118, 122, 123, 125, 127, 128, 130, 131, 132, 133, 141, 151, 156, 159, 183], "share": [10, 17, 37, 56, 82, 98, 115, 118, 123, 125, 127, 131, 141, 151, 156, 159, 183], "glm": [10, 14, 17, 21, 24, 37, 56, 78, 79, 82, 88, 90, 94, 95, 109, 113, 117, 119, 120, 122, 135, 141, 159, 164, 165, 183], "simucredit": [10, 17, 21, 25, 35, 70, 71, 79, 80, 90, 94, 98, 141], "regist": [10, 11, 12, 13, 17, 18, 19, 20, 21, 26, 82, 85, 87, 89, 90, 91, 113, 116, 118, 132, 134, 137, 141, 183, 185], "arbitrari": [10, 17, 18, 26, 82, 104, 113, 119, 134, 136, 141, 147, 183, 185], "h2o": [10, 14, 17, 18, 24, 26, 82, 134, 135, 139, 183, 185], "sklearn": [10, 14, 15, 17, 18, 23, 24, 26, 74, 82, 88, 102, 104, 113, 116, 117, 119, 121, 125, 128, 129, 134, 135, 136, 141, 142, 145, 147, 148, 149, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 183, 185], "californiahousing_raw": [11, 19, 98, 138, 141], "medhousev": [11, 19, 41, 43, 45, 47, 88, 116, 117, 121, 129, 138], "medinc": [11, 15, 19, 23, 41, 47, 74, 116, 117, 122, 131, 138], "houseag": [11, 19], "averoom": [11, 19, 88, 98, 122, 141], "avebedrm": [11, 19, 88, 98, 141], "popul": [11, 19, 88, 98, 100, 101, 109, 119, 122, 128, 129, 132, 133, 141, 173, 177], "aveoccup": [11, 19, 88, 98, 116, 117, 122, 141], "latitud": [11, 19, 117, 122], "3252": [11, 19], "41": [11, 19, 30, 43, 62, 68, 71, 75, 107], "984127": [11, 19], "023810": [11, 19], "322": [11, 19, 60], "555556": [11, 19], "37": [11, 19, 30, 42, 55, 90, 107], "3014": [11, 19], "238137": [11, 19], "971880": [11, 19], "2401": [11, 19], "109842": [11, 19], "86": [11, 19], "2574": [11, 19], "52": [11, 19, 20, 104], "288136": [11, 19], "073446": [11, 19], "496": [11, 19], "802260": [11, 19], "85": [11, 19, 61], "6431": [11, 19], "817352": [11, 19], "073059": [11, 19], "558": [11, 19], "547945": [11, 19], "8462": [11, 19], "281853": [11, 19], "081081": [11, 19], "565": [11, 19], "181467": [11, 19], "20635": [11, 19], "5603": [11, 19], "25": [11, 19, 30, 50, 55, 60, 69, 70, 107], "045455": [11, 19], "133333": [11, 19], "560606": [11, 19], "20636": [11, 19], "5568": [11, 19], "114035": [11, 19], "315789": [11, 19], "356": [11, 19, 80, 81, 183], "122807": [11, 19], "20637": [11, 19], "7000": [11, 19, 62], "17": [11, 13, 14, 19, 28, 30, 36, 46, 53, 55, 70, 87, 95, 102, 106, 107, 108, 109, 110, 111, 112, 115, 118, 119, 122, 123, 125, 127, 128, 130, 131, 132, 133, 139, 162, 163], "205543": [11, 19], "120092": [11, 19], "1007": [11, 19], "325635": [11, 19], "43": [11, 19, 30, 34, 36, 39, 44, 55, 60, 107], "20638": [11, 19], "8672": [11, 19], "329513": [11, 19], "171920": [11, 19], "741": [11, 19], "123209": [11, 19], "20639": [11, 19], "3886": [11, 19], "254717": [11, 19], "162264": [11, 19], "1387": [11, 19], "616981": [11, 19], "longitud": [11, 19, 117, 122], "122": [11, 19], "526": [11, 19, 55, 64], "585": [11, 19, 72], "521": [11, 19], "413": [11, 19, 102], "422": [11, 19, 48, 56, 102], "121": [11, 19], "781": [11, 19], "771": [11, 19], "923": [11, 19], "847": [11, 19], "894": [11, 19], "20640": [11, 19], "lightgbm": [11, 19, 138], "lgbmregressor": [11, 19, 138], "lgbm2": [11, 19, 138], "max_depth": [11, 16, 19, 22, 42, 43, 44, 45, 67, 68, 70, 74, 78, 90, 116, 121, 133, 138, 141, 146, 152, 153, 162, 163, 166, 167], "model_train": [11, 12, 13, 19, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 87, 88, 89, 90, 91, 115, 116, 117, 118, 119, 120, 121, 122, 123, 137, 138, 141], "name": [11, 12, 13, 19, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 89, 90, 93, 95, 99, 100, 102, 103, 104, 106, 108, 110, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 130, 131, 136, 137, 138, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "lgbm_2": [11, 19, 138], "save": [11, 15, 19, 23, 134, 141, 155, 156], "fit": [11, 14, 15, 16, 19, 22, 23, 24, 25, 74, 99, 102, 104, 106, 107, 108, 109, 110, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 131, 132, 133, 134, 135, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 177, 178, 179, 180, 181], "model_sav": [11, 19, 138, 141], "ch_lgbm_2": [11, 19, 138], "pkl": [11, 19, 138, 141], "system": [11, 15, 19, 23, 87, 95, 106, 107, 108, 109, 110, 111, 112, 113, 115, 118, 119, 122, 123, 125, 127, 128, 130, 131, 132, 133], "default": [11, 12, 13, 19, 20, 21, 29, 35, 66, 77, 78, 80, 87, 88, 89, 90, 91, 93, 95, 98, 99, 100, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 120, 121, 125, 127, 128, 129, 130, 132, 133, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "pipelin": [11, 14, 15, 16, 19, 22, 23, 24, 25, 84, 113, 135, 136, 138, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 185], "make_pipelin": [11, 14, 15, 16, 19, 22, 23, 24, 25, 135, 136, 138, 141], "lgbm_2_load": [11, 19, 138], "post": [11, 14, 15, 19, 23, 24, 84, 87, 88, 91, 104, 111, 113, 141, 185], "hoc": [11, 14, 15, 19, 23, 24, 84, 87, 88, 91, 104, 111, 113, 141, 185], "explan": [11, 14, 15, 19, 23, 24, 27, 36, 82, 87, 88, 91, 92, 102, 105, 106, 107, 108, 110, 111, 113, 135, 136, 138, 141, 183, 185], "pdp": [11, 14, 19, 24, 25, 29, 35, 87, 88, 91, 105, 106, 107, 108, 112, 113, 123, 138, 141, 185], "model_explain": [11, 14, 15, 19, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 87, 88, 91, 106, 107, 108, 109, 110, 111, 112, 113, 135, 136, 138, 141], "38": [11, 17, 19, 30, 73, 107], "412": [11, 17], "plot_0_model_train": [11, 17, 19, 26, 183], "model": [12, 13, 17, 20, 21, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79, 81, 84, 85, 86, 93, 94, 95, 98, 99, 100, 102, 104, 105, 106, 107, 108, 110, 111, 125, 126, 127, 128, 129, 130, 131, 132, 133, 141, 142, 145, 146, 147, 148, 149, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185], "xgb2regressor": [12, 20, 28, 29, 30, 31, 33, 34, 49, 59, 61, 63, 65, 69, 72, 123, 137, 141], "xgb2": [12, 16, 20, 22, 28, 29, 30, 31, 33, 34, 35, 48, 49, 57, 58, 59, 60, 61, 62, 63, 65, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 82, 90, 93, 95, 107, 108, 109, 110, 111, 112, 113, 115, 118, 123, 125, 126, 127, 128, 129, 132, 133, 137, 141, 183], "defin": [12, 13, 20, 21, 24, 25, 99, 100, 101, 102, 104, 107, 108, 110, 112, 120, 125, 126, 128, 129, 132, 134, 137, 141, 145, 146, 148, 150, 151, 153, 156, 161, 162, 163, 165, 167], "hyperparamet": [12, 13, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 134, 141, 185], "space": [12, 13, 20, 21, 97, 102, 104, 116, 117, 126, 130, 133, 137, 141, 147, 150, 151, 155, 156, 171, 181], "paramet": [12, 13, 20, 21, 95, 98, 99, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "n_estim": [12, 16, 20, 22, 29, 30, 35, 46, 47, 68, 69, 70, 74, 80, 122, 123, 137, 138, 141, 145, 164, 165, 166, 167], "300": [12, 20, 54, 137, 141], "500": [12, 20, 47, 80, 103, 112, 122, 137, 141, 160, 161], "eta": [12, 20, 101, 120, 122, 123, 137, 164, 165, 166, 167], "reg_lambda": [12, 20, 123, 137, 164, 165, 166, 167], "reg_alpha": [12, 20, 123, 137, 164, 165, 166, 167], "tune": [12, 13, 20, 21, 84, 102, 118, 122, 141, 155, 156, 185], "model_tun": [12, 13, 20, 21, 137, 141], "metric": [12, 13, 20, 21, 60, 61, 63, 66, 67, 70, 71, 72, 77, 78, 79, 89, 90, 92, 93, 95, 99, 100, 102, 111, 113, 124, 125, 127, 128, 129, 130, 132, 133, 137, 141, 147, 150, 152, 154, 155, 157, 160, 162, 164, 166, 171, 173, 177, 178, 179, 180, 181], "mse": [12, 15, 16, 20, 22, 23, 39, 41, 43, 45, 47, 49, 51, 53, 55, 59, 67, 72, 74, 78, 95, 111, 113, 125, 127, 128, 129, 130, 132, 133, 137, 141, 171, 177, 178, 179, 180, 181], "mae": [12, 15, 16, 20, 22, 23, 39, 41, 43, 45, 47, 49, 51, 53, 55, 59, 61, 63, 74, 78, 95, 113, 125, 127, 129, 130, 132, 133, 137, 141, 171, 177, 178, 179, 180, 181], "rank": [12, 13, 20, 21, 93, 95, 104, 111, 113, 119, 122, 129, 137, 141], "param": [12, 13, 14, 20, 21, 24, 135, 137, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "006082": [12, 20, 137], "055082": [12, 20, 137], "717187": 12, "006267": [12, 20, 137], "055823": [12, 20, 137], "687025": 12, "006328": [12, 20, 137], "056353": [12, 20, 137], "762645": 12, "006331": [12, 20, 137], "056674": [12, 20, 137], "680690": 12, "006416": [12, 20, 137], "056506": [12, 20, 137], "746338": 12, "011644": [12, 20, 137], "074410": [12, 20, 137], "522234": 12, "78": [12, 20, 137], "011669": [12, 20, 137], "074375": [12, 20, 137], "500074": 12, "79": [12, 20, 137], "011741": [12, 20, 137], "074464": [12, 20, 137], "494155": 12, "011752": [12, 20, 137], "074676": [12, 20, 137], "499123": 12, "011808": [12, 20, 137], "074723": [12, 20, 137], "502602": 12, "fig": [12, 20, 37, 56, 67, 77, 82, 93, 113, 116, 130, 141, 152, 153, 183], "refit": [12, 13, 20, 21, 122, 137, 141, 164, 165], "get_params_rank": [12, 13, 20, 21, 137], "gridsearch": [12, 20, 137], "model_diagnos": [12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 87, 88, 91, 113, 119, 125, 127, 128, 129, 130, 131, 133, 141], "accuracy_t": [12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 71, 119, 125, 132, 141], "r2": [12, 15, 16, 20, 22, 23, 39, 41, 43, 45, 47, 49, 51, 53, 55, 59, 67, 74, 78, 95, 125, 129, 130, 132, 133, 137, 141, 157, 171, 177, 178, 179, 180, 181], "0090": [12, 20, 49, 52, 59, 125], "0669": [12, 20, 49, 59, 125], "7382": [12, 20, 49, 59, 125], "0095": [12, 20, 49, 54, 59, 63, 125], "0688": [12, 20, 49, 59, 125], "7287": [12, 20, 49, 59, 125], "gap": [12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 71, 73, 74, 93, 95, 113, 125, 127, 132, 133, 141, 162, 163, 171, 181], "0005": [12, 20, 47, 49, 55, 59, 88, 125], "0019": [12, 20, 38, 49, 59, 125], "0057": [12, 20, 25, 48, 58, 125], "0535": [12, 20], "8346": [12, 20], "0063": [12, 20, 52, 60, 70], "0559": [12, 20], "8193": [12, 20], "0006": [12, 20, 47, 51, 63], "0024": [12, 20, 55], "0153": [12, 20], "372": [12, 17], "plot_1_hpo_grid": [12, 17, 20, 26, 183], "scipi": [13, 21, 100, 137, 139, 141, 147, 149], "glmclassifi": [13, 21, 38, 79, 94, 119, 141], "race": [13, 21, 35, 70, 71, 79, 80, 89, 90, 94, 126], "gender": [13, 21, 35, 70, 71, 79, 80, 90, 94, 126], "approv": [13, 21, 25, 35, 70, 71, 79, 80, 90, 132], "classif": [13, 14, 21, 24, 25, 35, 37, 38, 56, 57, 70, 75, 76, 79, 80, 81, 82, 89, 90, 91, 92, 98, 99, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 135, 137, 141, 150, 152, 154, 155, 160, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185], "l1_regular": [13, 21, 91, 119, 158, 159], "stat": [13, 21, 100, 137, 141], "l2_regular": [13, 21, 119, 158, 159], "n_run": [13, 21, 137, 141], "auc": [13, 14, 21, 24, 25, 38, 40, 42, 44, 46, 48, 50, 52, 54, 58, 60, 66, 71, 73, 77, 111, 113, 120, 125, 129, 130, 132, 133, 137, 141, 171, 177, 178, 179, 180, 181], "020239411195815772": [13, 21], "002493911719174813": [13, 21], "729472": [13, 21], "037271": 13, "0801649627572255": [13, 21], "0009505206902733599": [13, 21], "729471": [13, 21], "038029": 13, "07054458515086691": [13, 21], "002443422808146689": [13, 21], "729470": [13, 21], "041150": 13, "0200826243066503": [13, 21], "0038925653368613645": [13, 21], "729469": [13, 21], "038459": 13, "08763141285690618": [13, 21], "0011317924903120004": [13, 21], "034966": 13, "014018374389893852": [13, 21], "08885523820070576": [13, 21], "96": [13, 21, 56], "729274": [13, 21], "038200": 13, "06720040139301987": [13, 21], "08585578494124796": [13, 21], "97": [13, 21, 61, 70, 79], "729273": [13, 21], "035774": 13, "05105133900697683": [13, 21], "0845254996471495": [13, 21], "035115": 13, "05346229516211951": [13, 21], "09880860499665617": [13, 21], "99": [13, 21, 141], "729267": [13, 21], "036528": 13, "09599608264816151": [13, 21], "09690348478707304": [13, 21], "729255": [13, 21], "039574": 13, "randsearch": [13, 21], "acc": [13, 14, 21, 24, 25, 38, 40, 42, 44, 46, 48, 50, 52, 54, 58, 60, 70, 71, 73, 77, 90, 93, 113, 125, 126, 127, 129, 130, 132, 133, 137, 141, 171, 177, 178, 179, 180, 181], "f1": [13, 14, 21, 24, 25, 38, 40, 42, 44, 46, 48, 50, 52, 54, 58, 70, 71, 73, 77, 90, 113, 125, 126, 129, 130, 132, 133, 137, 141, 171, 177, 178, 179, 180, 181], "logloss": [13, 14, 21, 24, 25, 38, 40, 42, 44, 46, 48, 50, 52, 54, 58, 71, 73, 93, 125, 132, 133, 137, 141, 171, 177, 178, 179, 180, 181], "brier": [13, 14, 21, 24, 25, 38, 40, 42, 44, 46, 48, 50, 52, 54, 58, 64, 71, 73, 93, 125, 131, 132, 133, 137, 141, 171, 176, 177, 178, 179, 180, 181], "6722": [13, 21], "7309": [13, 21], "6965": [13, 21], "6047": [13, 21], "2088": [13, 21, 71], "6690": [13, 21], "7318": [13, 21], "6976": [13, 21], "6073": [13, 21], "2095": [13, 21], "0032": [13, 21, 52, 70], "0009": [13, 21, 25, 55, 63, 70, 73], "0011": [13, 21, 25, 63], "0026": [13, 21, 24], "0008": [13, 21, 42, 55, 63, 70, 91, 119, 132], "6721": [13, 21], "6964": [13, 21, 60], "0031": [13, 21], "0012": [13, 21, 45, 52], "50": [13, 17, 29, 32, 35, 36, 54, 106, 110, 123, 130, 146, 150, 151, 160, 161], "828": [13, 17], "plot_1_hpo_random": [13, 17, 21, 26, 183], "If": [14, 24, 90, 98, 99, 101, 102, 106, 107, 108, 109, 110, 111, 112, 116, 119, 122, 126, 128, 130, 132, 133, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "neither": [14, 24, 135], "nor": [14, 24, 135], "we": [14, 15, 16, 22, 23, 24, 25, 73, 74, 90, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 141, 145, 146, 148, 155, 156], "still": [14, 24, 102, 106, 108, 115, 118, 120, 122, 123, 129], "For": [14, 15, 16, 22, 23, 24, 25, 90, 93, 97, 98, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 161, 162, 163, 165, 167, 171, 177, 178, 179, 180, 181], "simul": [14, 24, 86, 98, 109, 112, 117, 122, 126, 135, 141, 185], "simpl": [14, 24, 102, 106, 120, 133, 135, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "binari": [14, 24, 89, 90, 91, 93, 98, 99, 102, 106, 107, 108, 109, 110, 111, 112, 113, 117, 119, 120, 121, 122, 124, 126, 129, 130, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "statsmodel": [14, 24, 104, 135, 139], "api": [14, 16, 22, 24, 84, 89, 93, 95, 102, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 139, 141], "sm": [14, 24, 135], "1000": [14, 24, 25, 62, 116, 135, 141, 155, 156, 160, 161], "sum": [14, 24, 90, 100, 101, 102, 104, 113, 114, 115, 117, 118, 119, 120, 122, 123, 130, 135, 141, 151, 152, 153, 156, 161, 162, 163, 165, 167, 185], "axi": [14, 24, 73, 93, 94, 95, 109, 112, 115, 116, 118, 119, 120, 122, 123, 128, 129, 130, 133, 135, 141, 169, 179, 180], "normal": [14, 24, 93, 95, 101, 102, 104, 112, 116, 117, 119, 120, 122, 123, 130, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 156, 162, 163], "glm_binom": [14, 24, 135], "famili": [14, 24, 135], "binomi": [14, 24, 135], "glm_result": [14, 24, 135], "next": [14, 24, 25, 111, 116, 117, 121, 122, 128, 129, 130, 133, 135, 137], "def": [14, 24, 25, 135], "predict_proba_func": [14, 24, 25, 135, 141], "proba": [14, 24, 25, 135, 152, 155, 162, 164, 166], "predict": [14, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 64, 73, 74, 85, 93, 95, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "exog": [14, 24, 135], "return": [14, 24, 25, 107, 112, 117, 126, 133, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "vstack": [14, 24, 135], "t": [14, 24, 102, 135, 138, 141, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "predict_func": [14, 24, 25, 135, 141], "pleas": [14, 16, 22, 24, 25, 74, 97, 101, 102, 106, 108, 111, 112, 118, 120, 140, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "make": [14, 16, 22, 24, 25, 102, 104, 108, 109, 111, 113, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 133, 135, 149, 155, 156, 164, 165, 166, 167], "sure": [14, 16, 22, 24, 25], "ar": [14, 16, 22, 24, 25, 89, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "same": [14, 16, 22, 24, 25, 95, 97, 98, 101, 102, 113, 115, 116, 118, 120, 123, 126, 129, 130, 131, 141, 150, 151, 162, 177, 178, 179, 180], "train_x": [14, 15, 16, 22, 23, 24, 25, 73, 74, 135, 136, 138, 141], "800": [14, 24, 51, 60, 133, 135], "train_i": [14, 15, 16, 22, 23, 24, 25, 73, 74, 135, 136, 138, 141], "test_x": [14, 15, 16, 22, 23, 24, 25, 73, 74, 135, 136, 138, 141], "test_i": [14, 15, 16, 22, 23, 24, 25, 73, 74, 135, 136, 138, 141], "feature_nam": [14, 15, 16, 22, 23, 24, 25, 73, 74, 122, 131, 133, 135, 136, 141, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "target_nam": [14, 15, 16, 22, 23, 24, 25, 73, 74, 131, 135, 136, 141, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "perform": [14, 15, 16, 22, 23, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 68, 69, 71, 72, 73, 74, 90, 94, 99, 100, 102, 111, 113, 115, 116, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 132, 133, 137, 141, 142, 145, 149, 150, 151, 155, 156, 160, 161, 162, 163, 171, 177, 178, 179, 180, 181], "9600": 14, "9573": 14, "0895": 14, "0283": [14, 46], "9550": 14, "9909": 14, "9569": 14, "1246": 14, "0397": 14, "0050": [14, 24], "0041": [14, 60], "0004": [14, 48, 53, 55, 58, 70, 125, 127], "0352": 14, "0114": [14, 45], "explain": [14, 15, 23, 24, 84, 86, 101, 102, 106, 108, 109, 110, 111, 112, 113, 114, 122, 125, 141, 149, 150, 151, 185], "tool": [14, 15, 23, 24, 109, 110, 112, 113, 125, 132, 135, 136, 138, 141], "al": [14, 24, 32, 35, 87, 88, 91, 105, 112, 123, 135, 141, 149, 185], "validataion": [14, 15, 23, 24, 25], "46": [14, 17, 29, 36, 58], "539": [14, 17], "plot_2_register_arbitrari": [14, 17], "assum": [15, 16, 22, 23, 99, 101, 104, 110, 111, 112, 117, 120, 121, 128, 130, 133, 137, 138, 144, 147, 155, 156], "have": [15, 16, 22, 23, 93, 95, 99, 101, 102, 103, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 125, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 141, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "outsid": [15, 16, 22, 23, 95, 106, 110, 128, 131, 141, 144, 173], "workflow": [15, 16, 22, 23, 73, 74, 113, 120, 122, 131, 136, 141], "no_progress": [15, 23, 136], "init": [15, 23, 136, 155, 156], "verbos": [15, 23, 136, 145, 148, 155, 156, 160, 161], "fetch_california_h": [15, 16, 22, 23, 74, 136], "h2ogradientboostingestim": [15, 23, 136], "h2o_data": [15, 23, 136], "h2ofram": [15, 23, 136], "reshap": [15, 23, 25, 136], "h2o_data_train": [15, 23, 136], "h2o_data_test": [15, 23, 136], "split_fram": [15, 23, 136], "2023": [15, 23, 113, 136], "glm_model": 15, "training_fram": [15, 23, 136], "mojo_file_path": [15, 23, 136], "save_mojo": [15, 23, 136], "path": [15, 23, 98, 102, 112, 113, 116, 121, 136, 141, 145, 146, 155, 156, 162, 163], "Then": [15, 23, 88, 93, 95, 99, 100, 104, 119, 120, 129, 130, 131, 138], "mojo": [15, 23], "imported_model": [15, 23, 136], "import_mojo": [15, 23, 136], "as_data_fram": [15, 23, 136], "ravel": [15, 16, 22, 23, 25, 73, 136, 138], "gbm": [15, 23, 136], "2423": [15, 23], "3396": [15, 23], "8180": [15, 23], "2377": [15, 23], "3429": [15, 23], "8216": [15, 23, 48], "0046": [15, 23, 38], "0033": [15, 23], "0037": [15, 23, 55, 103], "weakspot": [15, 23, 57, 71, 72, 73, 74, 75, 82, 113, 124, 127, 128, 131, 141, 171, 181, 183, 185], "slice_featur": [15, 23, 60, 61, 62, 63, 71, 72, 73, 74, 77, 78, 93, 95, 127, 132, 133, 141, 171, 181], "747": [15, 17], "31": [15, 20, 30, 31, 36, 39, 49, 55, 63, 107], "plot_2_register_h2o": [15, 17], "xgboost": [16, 22, 74, 78, 90, 102, 113, 114, 126, 129, 137, 139, 141, 185], "": [16, 22, 86, 87, 93, 100, 101, 102, 104, 105, 106, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 185], "xgbregressor": [16, 22, 74, 78], "model_select": [16, 22, 74, 138], "train_test_split": [16, 22, 74, 138], "test_siz": [16, 22, 74, 138], "xgb7": [16, 22, 78, 90, 95], "base_scor": [16, 22, 74], "booster": [16, 22, 74], "callback": [16, 22, 74], "colsample_bylevel": [16, 22, 74], "colsample_bynod": [16, 22, 74], "colsample_bytre": [16, 22, 74], "early_stopping_round": [16, 22, 74, 150, 151], "enable_categor": [16, 22, 74], "eval_metr": [16, 22, 74], "gamma": [16, 22, 74, 104, 123, 148, 164, 165, 166, 167], "gpu_id": [16, 22, 74], "grow_polici": [16, 22, 74], "importance_typ": [16, 22, 74], "interaction_constraint": [16, 22, 74], "learning_r": [16, 22, 54, 55, 74, 115, 120, 150, 151, 152, 153, 155, 156, 160, 161], "max_bin": [16, 22, 46, 47, 74, 115, 122, 123, 150, 151, 164, 165, 166, 167], "max_cat_threshold": [16, 22, 74], "max_cat_to_onehot": [16, 22, 74], "max_delta_step": [16, 22, 74], "max_leav": [16, 22, 74, 146, 150, 151], "min_child_weight": [16, 22, 74], "miss": [16, 22, 74, 103, 112, 115], "nan": [16, 22, 54, 60, 74, 101, 150, 151], "monotone_constraint": [16, 22, 74], "n_job": [16, 22, 74, 141, 143, 145, 147, 150, 151, 155, 156], "num_parallel_tre": [16, 22, 74], "predictor": [16, 22, 74, 94, 99, 108, 109, 110, 111, 113, 115, 117, 118, 119, 123, 128, 133], "In": [16, 22, 74, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 141, 150, 152, 155, 156, 160, 162, 164, 166], "environ": [16, 22, 25, 74, 139], "rerun": [16, 22, 74], "cell": [16, 22, 74, 113], "html": [16, 22, 74, 99, 103, 104, 149], "represent": [16, 22, 74, 97, 102, 117, 118, 120, 123, 133], "trust": [16, 22, 74, 113], "On": [16, 22, 74, 93, 95, 99, 106, 116, 125, 130, 133], "unabl": [16, 22, 74], "render": [16, 22, 74, 121], "try": [16, 22, 74, 139], "page": [16, 22, 74, 102], "nbviewer": [16, 22, 74], "org": [16, 22, 74, 104, 149], "xgbregressorxgbregressor": [16, 22, 74], "pipeline_xgb2": [16, 22], "pipeline_xgb7": [16, 22], "2533": 16, "3524": 16, "8102": 16, "2780": 16, "3617": 16, "7894": 16, "0247": 16, "0092": 16, "0208": 16, "0491": 16, "1565": 16, "9632": 16, "2224": 16, "3040": 16, "8315": 16, "1733": 16, "1475": 16, "1317": [16, 54], "robust": [16, 22, 57, 75, 76, 77, 78, 81, 82, 92, 113, 115, 124, 131, 141, 153, 155, 160, 166, 183, 185], "model_compar": [16, 22, 77, 78, 80, 87, 88, 91, 93, 95, 113, 141], "robustness_perf": [16, 22, 66, 67, 77, 78, 80, 93, 95, 130, 141], "resili": [16, 22, 57, 73, 74, 75, 77, 78, 82, 92, 113, 124, 131, 141, 178, 183, 185], "resilience_perf": [16, 22, 68, 69, 77, 78, 93, 95, 129, 141], "653": [16, 17], "34": [16, 17, 23, 30, 38, 42, 50, 55, 107], "plot_2_register_sklearn": [16, 17], "551": 17, "auto_examples_1_model_train": 17, "30": [17, 30, 33, 36, 55, 62, 90, 91, 93, 99, 103, 107, 113, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 133, 147], "27": [17, 30, 43, 55, 72, 107], "partial": [27, 36, 82, 104, 105, 107, 113, 141, 150, 151, 154, 155, 156, 157, 164, 165, 166, 167, 183, 185], "depend": [27, 36, 82, 101, 102, 104, 105, 106, 107, 108, 109, 111, 113, 114, 122, 129, 130, 141, 147, 150, 151, 154, 155, 156, 157, 164, 165, 166, 167, 183, 185], "h": [27, 35, 36, 82, 101, 102, 105, 106, 113, 115, 118, 123, 141, 183, 185], "statist": [27, 35, 36, 82, 96, 100, 104, 105, 108, 113, 119, 120, 125, 141, 160, 161, 183, 185], "individu": [27, 36, 82, 99, 101, 102, 105, 106, 109, 111, 112, 119, 128, 131, 132, 133, 141, 145, 155, 156, 183, 185], "expect": [27, 36, 82, 95, 97, 98, 101, 102, 105, 112, 116, 119, 128, 130, 135, 137, 141, 145, 149, 151, 153, 156, 161, 163, 165, 167, 183, 185], "accumul": [27, 36, 82, 104, 105, 113, 122, 123, 141, 161, 183, 185], "local": [27, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 82, 87, 105, 110, 112, 113, 114, 125, 141, 142, 155, 156, 161, 183, 185], "effect": [27, 36, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 80, 82, 87, 88, 91, 99, 102, 105, 108, 109, 110, 112, 113, 119, 120, 125, 126, 127, 129, 133, 141, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 183, 185], "interpret": [27, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 84, 86, 102, 104, 105, 106, 136, 141, 143, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 183, 185], "agnost": [27, 36, 82, 87, 88, 91, 105, 106, 110, 113, 128, 129, 183, 185], "shaplei": [27, 36, 82, 105, 183, 185], "addit": [27, 36, 82, 93, 94, 95, 99, 100, 101, 102, 103, 105, 106, 109, 110, 113, 114, 115, 116, 118, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 141, 147, 150, 151, 152, 153, 154, 155, 156, 157, 183, 185], "n_repeat": [28, 111, 141], "928": [28, 36], "plot_0_pfi": [28, 36, 183], "1d": [29, 32, 88, 91, 100, 106, 108, 110, 113, 123, 141, 147, 173, 177], "grid_siz": [29, 30, 32, 35, 106, 107, 108, 110, 141], "original_scal": [29, 31, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 62, 64, 65, 68, 69, 77, 78, 93, 106, 108, 109, 110, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 128, 129, 133, 141], "use_test": [29, 35, 39, 58, 59, 60, 61, 62, 106, 107, 108, 109, 110, 111, 112, 119, 125, 127, 132, 133, 141, 169, 181], "2d": [29, 32, 88, 91, 102, 106, 110, 113, 123, 141], "sample_s": [25, 29, 30, 34, 106, 107, 108, 110, 112, 141, 155, 156], "sliced_lin": [29, 32, 49, 106, 110, 123, 141], "333": [29, 36], "plot_1_pdp": [29, 36, 183], "friedman": [30, 37, 56, 82, 89, 98, 105, 113, 141, 161, 163, 183, 185], "subsampl": [30, 98, 99, 102, 106, 107, 108, 110, 112, 141, 145], "hstat": [30, 35, 105, 141, 185], "354665e": [30, 107], "772886e": [30, 107], "769194e": [30, 107], "488876e": [30, 107], "939141e": [30, 107], "891201e": [30, 107], "615382e": [30, 107], "110027e": [30, 107], "062784e": [30, 107], "224594e": [30, 107], "187721e": [30, 107], "826716e": [30, 107], "798646e": [30, 107], "139691e": [30, 107], "499676e": [30, 107], "367038e": [30, 107], "256837e": [30, 107], "022405e": [30, 107], "017541e": [30, 107], "553405e": [30, 107], "510080e": [30, 107], "003126e": [30, 107], "001398e": [30, 107], "355216e": [30, 107], "842721e": [30, 107], "703580e": [30, 107], "405027e": [30, 107], "302398e": [30, 107], "020537e": [30, 107], "266068e": [30, 107], "271688e": [30, 107], "382035e": [30, 107], "910548e": [30, 107], "33": [30, 34, 55, 107], "166214e": [30, 107], "757503e": [30, 107], "158681e": [30, 107], "689033e": [30, 107], "289872e": [30, 107], "034555e": [30, 107], "418748e": [30, 107], "989873e": [30, 107], "310739e": [30, 107], "203739e": [30, 107], "804507e": [30, 107], "44": [30, 60, 107, 108], "885018e": [30, 107], "682": [30, 36], "plot_1_pdp_hstat": [30, 36, 183], "ic": [31, 35, 98, 105, 141, 185], "900": [31, 36], "57": [31, 38, 72, 75, 79], "plot_2_ic": [31, 36, 183], "reludnnregressor": [32, 55, 120, 141], "reludnn": [32, 54, 66, 106, 120, 160, 161], "027": [32, 36], "plot_3_al": [32, 36, 183], "lime": [33, 35, 87, 88, 91, 105, 113, 139, 141, 185], "without": [33, 38, 39, 54, 55, 80, 112, 116, 119, 128, 145], "center": [33, 38, 39, 54, 55, 99, 104, 106, 109, 120, 132, 141, 142, 155, 156], "sample_id": [33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 109, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 141], "185": [33, 36, 55], "plot_4_lim": [33, 36, 183], "shap": [34, 35, 87, 88, 91, 105, 113, 139, 141, 185], "waterfal": 34, "shap_waterfal": [34, 35, 112, 141], "shap_fi": [34, 112, 141], "shap_summari": [34, 112, 141], "shap_scatt": [34, 112, 141], "691": [34, 36], "plot_5_shap": [34, 36, 183], "xgb2classifi": [35, 48, 58, 60, 62, 68, 70, 71, 73, 77, 80, 123, 141], "balanc": [25, 35, 70, 71, 79, 80, 90, 94, 122, 125, 126, 141, 162], "451": [35, 36], "70": 35, "plot_6_data_dependent_explain": [35, 36, 183], "195": 36, "auto_examples_2_explain": 36, "69": [36, 60, 62, 66], "logist": [37, 56, 82, 113, 119, 183], "taiwan": [37, 56, 82, 91, 150, 152, 160, 183], "credit": [25, 37, 56, 70, 82, 90, 91, 98, 126, 141, 150, 152, 160, 183], "linear": [37, 54, 55, 56, 82, 104, 109, 110, 112, 113, 114, 116, 117, 118, 137, 141, 146, 148, 150, 151, 158, 159, 183, 185], "gam": [37, 56, 64, 82, 89, 113, 115, 117, 122, 123, 128, 141, 154, 155, 156, 157, 183], "california": [37, 56, 82, 98, 115, 116, 121, 122, 129, 136, 141, 153, 157, 163, 165, 183], "hous": [37, 56, 82, 88, 98, 115, 116, 121, 122, 129, 136, 141, 153, 157, 163, 165, 183], "tree": [25, 37, 44, 45, 56, 60, 61, 77, 82, 93, 102, 109, 110, 112, 113, 114, 115, 117, 122, 123, 133, 137, 141, 145, 146, 147, 150, 151, 152, 153, 162, 163, 164, 165, 166, 167, 171, 181, 183, 185], "taiwancredit": [37, 38, 44, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 73, 77, 82, 86, 93, 98, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 133, 141, 162, 183, 185], "ebm": [37, 56, 79, 82, 91, 94, 113, 115, 118, 123, 141, 150, 151, 183], "gami": [37, 56, 80, 82, 113, 114, 115, 123, 141, 155, 156, 183, 185], "net": [37, 56, 80, 82, 113, 114, 115, 119, 123, 141, 155, 156, 162, 163, 183, 185], "relu": [37, 56, 82, 88, 91, 113, 114, 118, 141, 155, 156, 160, 161, 183, 185], "dnn": [37, 56, 82, 88, 91, 113, 120, 141, 160, 161, 183], "limit_b": [38, 42, 44, 48, 50, 52, 54, 58, 60, 62, 64, 66, 68, 77], "sex": [38, 42, 44, 48, 50, 52, 54, 58, 60, 62, 64, 66, 68, 77], "educ": [38, 42, 44, 48, 50, 52, 54, 58, 60, 62, 64, 66, 68, 77], "marriag": [38, 42, 44, 48, 50, 52, 54, 58, 60, 62, 64, 66, 68, 77], "ag": [38, 42, 44, 48, 50, 52, 54, 58, 60, 62, 64, 66, 68, 77, 89, 129], "flagdefault": [38, 42, 44, 48, 50, 52, 54, 58, 60, 62, 64, 66, 68, 77, 91, 93, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 133], "evalu": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 90, 93, 94, 100, 101, 104, 109, 111, 112, 113, 118, 125, 126, 127, 128, 129, 130, 132, 133, 137, 141], "8083": 38, "7375": 38, "3745": 38, "4585": 38, "1431": 38, "8150": 38, "7356": 38, "3764": 38, "4458": 38, "1385": 38, "0067": 38, "0127": [38, 39], "coeffici": [38, 39, 97, 101, 104, 109, 112, 113, 117, 120, 122, 141, 148, 151, 153, 156, 161, 163, 165, 167], "model_interpret": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 80, 87, 88, 91, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 141], "glm_coef_plot": [38, 39, 119, 141], "tabl": [38, 39, 58, 59, 73, 74, 89, 90, 99, 100, 101, 104, 119, 126, 130, 133, 137, 141], "glm_coef_tabl": [38, 39, 119, 141], "global_fi": [38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 115, 117, 118, 119, 120, 122, 123, 141], "local_fi": [38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 115, 117, 118, 119, 120, 122, 123, 141], "origin": [38, 39, 64, 70, 73, 98, 102, 104, 106, 109, 110, 111, 112, 116, 122, 126, 128, 130, 131, 133, 137, 141, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 172], "scale": [38, 39, 88, 95, 110, 116, 122, 128, 130, 133, 141, 142, 143, 144, 145, 146, 147, 148, 149], "648": 38, "plot_0_glm_cl": [38, 56, 183], "glmregressor": [39, 78, 119, 141], "0225": 39, "1105": 39, "3467": 39, "1090": 39, "3593": 39, "0015": [39, 54, 61, 127], "943": [], "plot_0_glm_reg": [39, 56, 183], "gamclassifi": [40, 64, 117, 141], "spline_ord": [40, 41, 117, 154, 157], "n_spline": [40, 41, 117, 154, 157], "lam": [40, 41, 117, 154, 157], "8363": 40, "9226": 40, "8387": 40, "3512": 40, "1130": 40, "8475": 40, "9306": 40, "8432": 40, "3406": 40, "1062": 40, "0112": 40, "0080": [40, 43], "0045": [40, 44], "0105": 40, "0068": 40, "global": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 87, 110, 113, 114, 141, 155, 156], "global_effect_plot": [40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 80, 115, 117, 118, 120, 122, 123, 141], "861": 40, "plot_1_gam_cl": [40, 56, 183], "gamregressor": [41, 117, 141], "californiahousing_trim2": [41, 43, 45, 47, 88, 98, 141], "0145": 41, "0867": 41, "7453": 41, "0152": 41, "0883": 41, "7257": 41, "0007": [41, 42, 55], "0017": [41, 50, 63], "0196": 41, "59": [41, 102], "951": 41, "150": 41, "plot_1_gam_reg": [41, 56, 183], "treeclassifi": [42, 77, 112, 121, 141], "8248": 42, "7716": 42, "4872": 42, "4281": 42, "1334": [42, 52], "8255": 42, "7605": 42, "4715": 42, "4537": 42, "1342": 42, "0111": 42, "0157": 42, "0256": [42, 45], "start": [42, 43, 98, 104, 116, 120, 121, 122, 132, 139, 141, 146], "root": [42, 43, 44, 45, 93, 116, 121, 132, 141, 145, 146, 149, 162, 163], "node": [42, 43, 97, 102, 112, 116, 120, 121, 122, 123, 141, 145, 146, 152, 153, 162, 163, 164, 165, 166, 167], "tree_glob": [42, 43, 44, 45, 116, 121, 141], "depth": [42, 43, 44, 45, 102, 113, 114, 115, 116, 121, 126, 128, 141, 146, 152, 153, 162, 163, 164, 165, 166, 167, 185], "th": [42, 102, 104, 106, 107, 110, 112, 116, 117, 120, 122], "tree_loc": [42, 43, 44, 45, 116, 121, 141], "505": 42, "plot_2_tree_cl": [42, 56, 183], "treeregressor": [43, 112, 121, 141], "0184": [43, 71], "0979": 43, "6762": 43, "0212": 43, "1059": [43, 113], "6178": 43, "0028": [43, 44, 132], "0584": 43, "834": 43, "plot_2_tree_reg": [43, 56, 183], "figsclassifi": [44, 77, 116, 141], "max_it": [44, 45, 67, 115, 116, 148, 152, 153, 154, 157], "8246": 44, "7891": 44, "4926": 44, "4205": 44, "1312": [44, 50], "8218": [44, 50], "7637": 44, "4636": [44, 63], "4378": 44, "1357": [44, 54], "0255": 44, "0290": 44, "0173": 44, "figs_heatmap": [44, 45, 116, 141], "tree_idx": [44, 45, 116, 141], "first": [25, 44, 45, 88, 89, 90, 93, 95, 98, 99, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 141, 149, 150, 151, 155, 156, 162, 163], "044": 44, "plot_3_figs_cl": [44, 56, 183], "figsregressor": [45, 67, 116, 141], "0103": [45, 61, 63], "0705": 45, "8196": 45, "0739": 45, "7941": 45, "0034": [45, 52], "194": 45, "plot_3_figs_reg": [45, 56, 183], "xgb1classifi": [46, 122, 141], "min_bin_s": [46, 47, 122, 164, 165], "xgb1": [46, 47, 113, 122, 123, 132, 141], "8512": [46, 71], "9311": 46, "8499": 46, "3327": 46, "1052": 46, "8450": 46, "9028": 46, "8368": 46, "4084": 46, "1214": 46, "0062": [46, 53], "0131": [46, 47], "0758": 46, "0162": 46, "evid": [46, 47, 125, 128, 141], "xgb1_woe": [46, 47, 122, 141], "inform": [46, 47, 73, 74, 93, 97, 98, 99, 101, 102, 103, 113, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 132, 133, 141, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "xgb1_iv": [46, 47, 122, 141], "187": 46, "plot_4_xgb1_cl": [46, 56, 183], "xgb1regressor": [47, 122, 141], "0816": 47, "7704": 47, "0136": 47, "0822": 47, "7546": 47, "0159": [47, 61], "012": [], "plot_4_xgb1_reg": [47, 56, 183], "8219": [48, 58, 125], "7978": [48, 58, 70, 125], "4759": [48, 58, 125], "4196": [48, 58, 125], "1316": [48, 58, 125], "8290": [48, 58, 125], "7728": [48, 58, 125], "4797": [48, 58, 125], "4252": [48, 58, 125], "1319": [48, 58, 125], "0071": [48, 58, 63, 125], "0251": [48, 58, 125], "0038": [48, 58, 125], "pay_1": [48, 50, 52, 54, 58, 60, 62, 64, 68, 73, 77, 91, 93, 120, 125, 128, 129, 133], "global_ei": [48, 49, 50, 51, 52, 53, 115, 118, 123, 141], "local_ei": [48, 49, 50, 51, 52, 53, 115, 118, 123, 141], "592": [], "plot_5_xgb2_cl": [48, 56, 183], "947": 49, "plot_5_xgb2_reg": [49, 56, 183], "explainableboostingclassifi": [50, 79, 94, 115, 141], "interact": [50, 51, 87, 88, 91, 102, 106, 107, 108, 110, 112, 113, 119, 120, 150, 151, 154, 155, 156, 157, 166, 167], "7896": 50, "4778": 50, "4239": 50, "1327": 50, "8272": 50, "7753": 50, "4792": 50, "4222": 50, "0054": 50, "0143": [50, 61], "0013": [50, 55], "0016": [50, 55], "154": 50, "plot_6_ebm_cl": [50, 56, 183], "explainableboostingregressor": [51, 115, 141], "0072": [48, 51], "0589": [51, 63], "7918": 51, "0078": [51, 63, 74], "0615": 51, "7779": 51, "0025": 51, "0140": 51, "plot_6_ebm_reg": [51, 56, 183], "gaminetclassifi": [52, 80, 118, 141], "8169": 52, "7734": 52, "4465": 52, "4352": 52, "1366": 52, "8228": 52, "7672": 52, "4478": 52, "4292": [52, 70], "0060": 52, "896": [], "374": [], "plot_7_gaminet_cl": [52, 56, 183], "gaminetregressor": [53, 118, 141], "0058": [53, 61, 103], "0536": 53, "8332": 53, "0551": [53, 55], "8241": 53, "0014": [53, 55], "0091": 53, "495": 53, "308": 53, "plot_7_gaminet_reg": [53, 56, 183], "reludnnclassifi": [54, 66, 120, 141], "hidden_layer_s": [54, 55, 120, 160, 161], "l1_reg": [54, 55, 120, 160, 161], "0002": [54, 55, 61, 120], "8200": [54, 113], "7723": 54, "4722": 54, "4334": 54, "8300": 54, "7708": 54, "4817": 54, "4250": 54, "0100": 54, "0083": 54, "0039": 54, "llm": [54, 55, 141], "llm_summari": [54, 55, 120, 141], "count": [54, 55, 87, 95, 103, 106, 107, 108, 109, 110, 111, 112, 115, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 141, 150, 151, 160, 161], "respons": [54, 55, 58, 87, 88, 89, 90, 91, 93, 95, 98, 100, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 141, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "mean": [54, 55, 99, 101, 102, 103, 104, 106, 109, 111, 112, 116, 117, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 137, 141, 142, 145, 147, 149, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 177, 178, 179, 180], "std": [54, 55, 103, 141], "6535": 54, "1053": 54, "3069": 54, "6037": 54, "7349": 54, "4166": 54, "1066": 54, "3086": 54, "6477": 54, "6261": 54, "1307": 54, "2295": 54, "4207": 54, "5999": 54, "5003": 54, "1158": 54, "3100": 54, "4627": 54, "7819": [54, 79], "7348": 54, "903": 54, "1595": 54, "3663": 54, "6118": 54, "5528": 54, "7334": 54, "301": 54, "4979": 54, "302": 54, "7322": 54, "303": 54, "7364": 54, "304": 54, "6900": [54, 79], "305": 54, "parallel": [54, 55, 141, 143, 145, 147, 150, 151, 155, 156], "coordin": [54, 55, 141], "llm_pc": [54, 55, 120, 141], "violin": [54, 55, 141], "llm_violin": [54, 55, 120, 141], "one": [54, 55, 71, 72, 73, 74, 87, 89, 90, 95, 97, 98, 100, 102, 103, 104, 106, 108, 110, 111, 113, 115, 118, 119, 120, 121, 122, 123, 125, 126, 131, 133, 139, 146, 147, 155, 156, 162, 163], "two": [54, 55, 60, 61, 62, 63, 90, 94, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 130, 137, 141, 146, 147], "pay_3": [54, 120], "871": 54, "120": [54, 77, 113], "plot_8_reludnn_cl": [54, 56, 183], "0192": 55, "9784": 55, "0199": 55, "9709": 55, "0075": [55, 63], "215": [55, 104, 113], "4711": 55, "1584": 55, "0309": 55, "207": 55, "4700": 55, "1648": 55, "0327": 55, "4592": 55, "1754": 55, "0324": [55, 118], "148": 55, "4698": 55, "1601": 55, "0003": [24, 25, 55, 61], "0340": 55, "126": 55, "3969": 55, "1574": 55, "0186": 55, "106": 55, "3815": 55, "1582": 55, "0218": 55, "6136": 55, "1315": 55, "0783": 55, "62": [55, 60, 70, 79, 89, 183], "6301": 55, "1698": 55, "0750": 55, "3266": 55, "1242": 55, "0542": 55, "45": [55, 70, 71, 111], "2920": 55, "1354": [55, 60], "6213": [55, 62], "1345": 55, "6046": 55, "1563": [22, 55], "2811": 55, "1128": 55, "0560": 55, "5604": 55, "1171": [55, 61, 63], "0784": 55, "2250": 55, "1211": 55, "0288": [55, 60], "2636": 55, "1341": 55, "0604": 55, "5663": 55, "1579": 55, "5213": 55, "1795": 55, "0010": [24, 55], "0441": 55, "5491": 55, "1967": 55, "0451": 55, "6115": 55, "1256": 55, "0023": 55, "5365": 55, "1195": 55, "4459": 55, "1685": 55, "2393": 55, "1061": 55, "0342": 55, "3573": 55, "1770": 55, "0404": [55, 71], "4821": 55, "1186": 55, "0135": 55, "0625": 55, "0238": 55, "5134": 55, "0839": 55, "0138": 55, "4321": 55, "1450": 55, "0164": [55, 60], "1801": 55, "0305": 55, "0385": 55, "4558": 55, "0107": 55, "0240": [22, 55], "1400": 55, "0890": 55, "0040": 55, "0302": 55, "2187": 55, "1037": [55, 62], "0203": 55, "0751": 55, "6258": 55, "0943": 55, "5209": 55, "0035": [55, 60], "0884": 55, "4773": 55, "0875": 55, "plot_8_reludnn_reg": [55, 56, 183], "459": 78, "auto_examples_3_model": [], "307": [], "373": [], "149": [], "accuraci": [57, 71, 73, 74, 75, 77, 78, 82, 92, 101, 104, 112, 113, 124, 128, 130, 131, 133, 137, 141, 149, 150, 152, 154, 155, 160, 162, 164, 166, 170, 183, 185], "overfit": [57, 73, 74, 75, 77, 78, 82, 92, 104, 113, 115, 117, 120, 121, 122, 124, 125, 131, 133, 141, 171, 181, 183, 185], "reliabl": [57, 73, 74, 75, 77, 78, 82, 92, 102, 106, 113, 124, 131, 133, 141, 154, 173, 174, 175, 183, 185], "fair": [57, 75, 76, 81, 82, 86, 92, 98, 113, 124, 141, 150, 183, 185], "segment": [57, 70, 75, 79, 82, 89, 90, 92, 97, 98, 113, 124, 129, 133, 141, 167, 183, 185], "diagnos": [57, 75, 82, 131, 132, 141, 167, 183], "confus": [58, 125, 131, 141, 168], "matrix": [58, 97, 102, 104, 106, 120, 123, 125, 131, 141, 147, 148, 151, 153, 156, 160, 161, 162, 163, 165, 167, 168], "roc": [58, 125, 131, 141, 168], "recal": [58, 113, 125, 126, 131, 141, 168], "precis": [58, 102, 113, 125, 126, 128, 131, 141, 168], "accuracy_plot": [58, 77, 78, 93, 95, 125, 141], "residu": [58, 59, 71, 72, 73, 74, 113, 115, 116, 118, 128, 129, 130, 131, 141, 151, 153, 156, 161, 163, 165, 167, 169], "respect": [58, 59, 99, 100, 101, 104, 107, 109, 112, 116, 120, 126, 128, 130, 133, 141, 149, 155, 156], "accuracy_residu": [58, 59, 71, 72, 125, 132, 141], "flagdefault_predict": 58, "487": [58, 71], "plot_0_accuracy_cl": [58, 75, 183], "cnt_predict": [59, 125], "47": [59, 70, 79], "407": 59, "plot_0_accuracy_reg": [59, 75, 183], "slice_method": [60, 61, 62, 63, 73, 74, 77, 78, 93, 95, 127, 132, 133, 141, 171, 181], "min_sampl": [60, 61, 62, 63, 127, 132, 133, 141, 171, 181], "test_acc": [60, 62], "train_acc": [60, 62], "1350": 60, "5440": 60, "7052": 60, "6888": 60, "pay_2": [60, 133], "3750": 60, "5625": 60, "244": 60, "8551": 60, "7336": 60, "1215": 60, "2500": 60, "191": [60, 133], "6963": [60, 79], "6675": 60, "1111": [60, 62], "2222": [60, 62], "268": 60, "956": 60, "7276": 60, "7207": 60, "0069": 60, "6250": 60, "7205": 60, "7164": 60, "3333": [60, 62, 103], "5556": 60, "351": 60, "1430": 60, "6154": 60, "6119": 60, "357": 60, "6234": 60, "6303": 60, "set": [39, 60, 61, 62, 66, 77, 78, 80, 87, 88, 89, 90, 91, 93, 95, 96, 98, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "4444": [60, 62], "1265": 60, "5090": 60, "6876": 60, "0088": 60, "test_auc": 60, "train_auc": 60, "752": 60, "2936": 60, "6478": 60, "7071": 60, "0593": 60, "3521": 60, "13975": 60, "6350": 60, "6970": 60, "0620": 60, "513": 60, "2154": 60, "5481": 60, "6325": 60, "0844": 60, "5250": 60, "7179": 60, "1929": [60, 103], "6314": 60, "4400": 60, "2778": 60, "602": 60, "2528": 60, "6994": 60, "0282": 60, "1667": 60, "6862": 60, "6798": 60, "136": 60, "plot_1_weakspot_cl": [60, 75, 183], "test_ms": [61, 63], "train_ms": [61, 63], "445": [61, 63], "1736": [61, 63], "0219": [61, 63], "0197": [61, 63], "0022": [61, 63, 73], "290": 61, "1168": 61, "0307": 61, "0304": 61, "2042e": 61, "377": 61, "0207": 61, "1186e": 61, "0630e": 61, "155": 61, "538": [61, 71], "0158": 61, "2337e": 61, "365": 61, "0110": 61, "7680e": 61, "test_ma": [61, 63], "train_ma": [61, 63], "1163": 61, "1106": 61, "735": [61, 72, 132], "2911": 61, "1046": 61, "1031": 61, "2826": 61, "3696": 61, "283": 61, "1495": 61, "1352": 61, "2214": 61, "8710": 61, "0749": 61, "0747": 61, "209": 61, "plot_1_weakspot_reg": [61, 75, 183], "bill_amt1": [62, 66, 91], "3781": 62, "131": 62, "7561": 62, "8473": 62, "0912": 62, "7167": 62, "8037": 62, "117": 62, "6333": 62, "7094": 62, "0761": [62, 71], "7311": 62, "7953": 62, "160": 62, "6000": 62, "9237": 62, "9558": 62, "338": 62, "5797": 62, "6834": 62, "2814": 62, "3685": 62, "7083": 62, "8133": 62, "1050": 62, "6715": 62, "73": 62, "6500": 62, "7808": 62, "1308": 62, "038": 62, "plot_2_overfit_cl": [62, 75, 183], "1743": 63, "0096": 63, "285": 63, "0081": [63, 132], "5000": [63, 103, 104, 150, 151, 155, 156], "6636": 63, "103": 63, "366": 63, "0421": 63, "0350": 63, "2318": 63, "173": 63, "645": 63, "0250": 63, "0198": 63, "0052": 63, "1364": 63, "240": 63, "882": 63, "2546": 63, "3940": 63, "105": 63, "432": 63, "0020": [25, 63], "197": [63, 113], "4924": 63, "1649": 63, "6580": 63, "0639": 63, "005": 63, "176": [63, 71], "plot_2_overfit_reg": [63, 75, 183], "calcul": [64, 65, 73, 74, 93, 95, 97, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 129, 130, 132, 133, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 156], "shift": [64, 65, 73, 74, 90, 93, 95, 100, 128, 130, 141], "between": [64, 65, 68, 69, 71, 72, 73, 74, 90, 93, 95, 97, 98, 99, 100, 101, 102, 104, 106, 107, 108, 110, 111, 112, 115, 117, 118, 119, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 141, 145, 147, 149, 162, 163, 173, 177, 179, 180], "un": [64, 65], "reliability_dist": [64, 65, 128, 141, 177], "bandwidth": [64, 65, 77, 78, 108, 131, 141, 176], "against": [64, 65, 68, 69, 73, 74, 93, 94, 95, 102, 109, 115, 118, 123, 125, 128, 130, 131, 139, 141], "reliability_margin": [64, 65, 128, 141], "bin": [64, 65, 70, 77, 78, 90, 93, 95, 100, 102, 106, 113, 115, 123, 124, 127, 128, 129, 132, 133, 141, 144, 150, 151, 164, 165, 166, 167, 171, 174, 175, 181], "calibr": [64, 73, 93, 131, 141, 172], "probabl": [25, 64, 73, 93, 100, 106, 107, 108, 110, 112, 120, 125, 128, 129, 130, 131, 135, 141, 150, 152, 154, 155, 160, 161, 162, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "v": [64, 73, 88, 91, 104, 131, 141, 151, 153, 156, 161, 163, 165, 167, 172], "reliability_calibr": [64, 128, 141], "diagram": [64, 73, 77, 121, 131, 141, 146, 175], "reliability_perf": [64, 77, 93, 128, 141], "reliability_t": [64, 65, 128, 141], "1258": 64, "1276": 64, "922": 64, "plot_3_reliability_cl": [64, 75, 183], "empir": [65, 99, 100, 123, 131, 141, 143, 176], "coverag": [65, 78, 131, 141, 173, 176], "averag": [65, 90, 95, 101, 102, 104, 106, 108, 109, 110, 111, 112, 116, 119, 120, 121, 122, 125, 127, 128, 131, 133, 141, 145, 147, 155, 156, 176], "alpha": [65, 66, 67, 68, 69, 77, 78, 93, 95, 102, 128, 129, 130, 137, 141, 144, 146, 149, 162, 163, 172, 173, 174, 175, 176, 177, 179, 180], "9014": 65, "2231": 65, "571": 65, "plot_3_reliability_reg": [65, 75, 183], "perturb": [66, 67, 93, 95, 109, 113, 131, 141], "perturb_featur": [66, 67, 93, 95, 130, 141], "bill_amt2": 66, "bill_amt3": 66, "perturb_s": [66, 67, 93, 95, 130, 141], "perturb_method": [66, 67, 93, 95, 130, 141], "worst": [66, 67, 68, 69, 71, 72, 77, 78, 128, 129, 131, 141, 177, 178, 179, 180], "percent": [66, 67, 77, 78, 99, 141], "robustness_perf_worst": [66, 67, 77, 78, 93, 95, 130, 141], "751": 66, "plot_4_robustness_cl": [66, 75, 183], "being": [67, 106, 111, 112, 113, 122, 126, 129], "815": 67, "plot_4_robustness_reg": [67, 75, 183], "scenario": [68, 69, 77, 78, 93, 95, 99, 102, 113, 128, 129, 131], "resilience_method": [68, 69, 77, 78, 93, 95, 129, 141, 177, 178, 179, 180], "hard": [68, 69, 120, 129, 130, 141, 148, 149, 160, 161, 177, 178, 179, 180], "cluster": [68, 69, 99, 116, 129, 141, 142, 146, 177, 178, 179, 180], "resilience_dist": [68, 69, 77, 78, 93, 95, 129, 141, 177], "immut": [68, 69, 129, 141, 177, 178, 179, 180], "immu_featur": [68, 69, 77, 78, 93, 95, 129, 141, 177, 178, 179, 180], "wd1": [68, 69, 100, 128, 129, 132, 141, 146, 173, 177], "n_cluster": [68, 69, 129, 141, 142, 177, 179, 180], "resilience_shift_histogram": [68, 69, 129, 141], "resilience_shift_dens": [68, 69, 129, 141], "200": [68, 148], "plot_5_resilience_cl": [68, 75, 183], "540": 69, "plot_5_resilience_reg": [69, 75, 183], "mono_increasing_list": [47, 48, 52, 70, 80, 122, 123, 155, 156, 164, 165, 166, 167], "mortgag": [25, 70, 71, 90, 98, 126, 141], "mono_decreasing_list": [70, 122, 155, 156, 164, 165, 166, 167], "amount": [25, 70, 90, 126, 130, 149], "past": [25, 70, 90, 126], "due": [25, 70, 90, 98, 104, 113, 117, 120, 123, 126, 130, 133], "util": [25, 70, 71, 90, 94, 95, 99, 102, 116, 125, 127, 128, 129, 130, 133, 137, 141, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "delinqu": [25, 70, 90], "inquiri": [25, 70, 90], "open": [25, 70, 90, 113], "trade": [25, 70, 90, 126, 137, 141], "xgb2_monoton": [70, 126], "metrics_result": [70, 79, 94, 126], "model_fair": [70, 90, 126, 141], "air": [70, 79, 90, 94, 126, 141], "group_categori": [70, 79, 94, 126, 141], "reference_group": [70, 79, 94, 126, 141], "protected_group": [70, 79, 94, 126, 141], "favorable_threshold": [70, 79, 94, 126, 141], "performance_metr": [70, 126, 141], "group": [70, 79, 89, 90, 94, 101, 109, 120, 126, 128, 129, 141], "refer": [70, 79, 84, 89, 90, 94, 97, 98, 100, 101, 106, 110, 116, 117, 122, 126, 129, 132, 141, 162, 163], "protect": [70, 79, 89, 90, 94, 126, 141], "612": 70, "745": 70, "segmented_result": [70, 79, 94, 126], "segment_featur": [70, 71, 72, 79, 94, 126, 132, 141], "segment_bin": [70, 72, 79, 94, 126, 132, 141], "lower": [70, 79, 90, 94, 95, 102, 108, 117, 125, 128, 133, 148, 149], "bound": [70, 79, 115, 133, 148, 150, 151], "upper": [70, 79, 98, 104, 115, 133, 141, 148], "306": [70, 79], "4485": 70, "6607": 70, "601": [70, 79], "4767": 70, "6426": 70, "1027": [70, 79], "6319": 70, "6556": 70, "1864": [70, 79], "6486": 70, "94": [70, 79], "20384": [70, 79], "87": [70, 71, 79], "8781": 70, "8266": 70, "binning_result": [70, 126], "binning_dict": [70, 126, 141], "id": [70, 71, 72, 116, 119, 121, 132, 137, 141, 146], "configur": [70, 99, 108, 125, 126, 132, 133, 137, 141], "7450": 70, "6120": 70, "7163": 70, "5049": 70, "5064": 70, "9776": 70, "5127": 70, "0048": 70, "9273": 70, "5276": 70, "0160": [22, 70], "8439": 70, "5374": 70, "5674": 70, "9873": 70, "3577": 70, "5718": 70, "9743": 70, "3611": 70, "5805": 70, "9321": 70, "3713": 70, "5921": 70, "8310": 70, "3991": 70, "5918": [70, 79], "6627": 70, "4014": 70, "4346": 70, "0061": 70, "3877": 70, "4388": [70, 103], "9928": 70, "3915": 70, "4569": 70, "9530": 70, "4011": 70, "4852": 70, "8571": 70, "4290": 70, "5129": 70, "7078": 70, "4340": 70, "4720": 70, "9962": 70, "4153": 70, "4746": 70, "9865": 70, "4179": 70, "4921": 70, "9476": 70, "4276": 70, "5191": 70, "8632": 70, "4516": 70, "5259": 70, "6781": 70, "4835": 70, "0036": [48, 70], "4054": 70, "4873": 70, "9920": 70, "4087": 70, "5048": 70, "9508": 70, "4186": 70, "5227": 70, "8739": 70, "4412": 70, "5172": 70, "7055": 70, "4302": 70, "thresholding_result": [70, 126], "3324": 70, "8862": 70, "6757": 70, "8917": 70, "841": 70, "plot_6_fair": [70, 75, 183], "top": [71, 72, 93, 95, 101, 102, 103, 104, 107, 109, 115, 117, 118, 119, 120, 122, 123, 125, 129, 130, 132, 137, 149, 155, 156], "segmented_diagnos": [71, 72, 132, 141], "segment_t": [71, 72, 132, 141], "segment_method": [71, 72, 132, 141], "auto": [71, 132, 141, 144, 145, 147, 148, 149, 150, 151, 155, 156, 162, 163, 164, 165, 166, 167], "head": [71, 72, 132], "0x00000220575d5fa0": [], "1831": 71, "63": [71, 102], "5397": 71, "0447": 71, "064": 71, "5975": [], "072": 71, "5977": [], "inf": [71, 146], "011": 71, "575": 71, "6035": [], "0234": 71, "6193": [], "101": 71, "6238": [], "2221": 71, "309": 71, "6245": [], "2859": 71, "316": 71, "384": 71, "6354": [], "6446": [], "0x00000220578a0160": [], "446": 71, "6502": [], "0211": 71, "158": 71, "6582": [], "0469": 71, "1119": 71, "6756": [], "2804": 71, "6889": [], "1506": 71, "7244": [], "7955": [], "talb": 71, "segment_id": [71, 72, 132, 141], "7563": 71, "7622": 71, "4899": 71, "1604": 71, "5777": 71, "5538": 71, "7566": 71, "2760": 71, "2166": 71, "2735": 71, "2084": 71, "2667": 71, "1156": 71, "comparison": [71, 72, 80, 81, 84, 86, 96, 113, 122, 132, 133, 141, 150, 152, 162, 183, 185], "specif": [71, 72, 87, 88, 91, 93, 94, 95, 99, 100, 101, 102, 103, 106, 108, 110, 111, 113, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 137, 140, 141], "remain": [71, 72, 93, 95, 99, 104, 108, 109, 112, 119, 120, 128, 129, 130, 131, 177, 179, 180], "distribution_shift": [71, 72, 132, 141], "363": [], "plot_7_segmented_cl": [71, 75, 183], "0x0000022059334040": [], "712": [72, 132], "0141": [], "0133": [], "441": [72, 132], "0132": [], "5909": [72, 132], "7878": [72, 132], "1026": [72, 132], "0126": 132, "912": [72, 132], "7298": [72, 132], "9123": [72, 132], "1131": [72, 132], "0108": [], "1825": [72, 132], "3649": [72, 132], "1598": [72, 132], "0106": [], "874": [72, 132], "0104": [], "0x00000220031ec520": [], "732": 72, "717": 77, "plot_7_segmented_reg": [72, 75, 183], "extract": [73, 74, 120, 123, 132, 136, 138, 149], "requir": [73, 74, 90, 93, 99, 102, 103, 104, 106, 110, 112, 113, 115, 119, 123, 125, 127, 128, 129, 130, 131, 132, 133, 141, 145, 147, 149, 150, 151, 152, 153, 155, 160, 161, 162, 163, 164, 165, 166, 167], "input": [73, 74, 93, 95, 98, 106, 108, 109, 110, 111, 112, 118, 119, 120, 125, 129, 130, 131, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "_": [73, 100, 101, 104, 106, 108, 110, 115, 118, 123, 125, 128], "get_data": [73, 141], "concaten": 73, "get_model": [73, 141], "prediction_proba": [73, 131, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "predict_proba": [24, 25, 73, 106, 107, 108, 109, 110, 135, 141, 150, 152, 154, 155, 160, 162, 164, 166], "get_feature_nam": [73, 141], "get_feature_typ": [73, 141], "get_target_nam": [73, 141], "shape": [73, 74, 103, 115, 117, 118, 122, 123, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "necessari": [73, 74, 116, 126, 128], "data_dict": [73, 74, 131], "scored_test": [73, 74, 131], "test_accuracy_t": [73, 74, 131], "8227": 73, "8059": [73, 74], "4809": 73, "4147": 73, "1300": 73, "8292": 73, "7817": 73, "4831": 73, "4211": 73, "1310": 73, "0065": 73, "0242": 73, "0064": 73, "test_accuracy_plot": [73, 131], "interest": [73, 74, 93, 95, 102, 106, 108, 109, 110, 113, 125, 126, 127, 128, 131, 132, 133, 141, 169, 179, 180], "test_accuracy_residu": [73, 74, 131, 132], "weak": [73, 74, 113, 127, 132, 133, 141], "region": [73, 74, 93, 95, 113, 120, 127, 131, 132, 133, 141, 171, 177, 179, 180, 181], "test_weakspot": [73, 74, 131, 132], "test_overfit": [73, 74, 131], "No": [73, 133, 139, 160, 161], "get": [73, 85, 90, 104, 106, 107, 109, 112, 115, 116, 117, 118, 119, 120, 122, 123, 126, 128, 131, 139, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 178, 181], "test_reliability_perf": [73, 131], "relationship": [73, 74, 97, 100, 101, 102, 104, 106, 108, 110, 111, 112, 117, 119, 120, 122, 125, 128, 130], "uncertainti": [73, 74, 95, 101, 113, 128], "test_reliability_margin": [73, 74, 131], "unreli": [73, 74, 106, 128, 131, 141, 173], "test_reliability_dist": [73, 74, 131], "test_reliability_calibr": [73, 131], "how": [25, 73, 74, 85, 87, 88, 91, 93, 95, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 135, 136, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "under": [73, 74, 93, 95, 102, 104, 113, 119, 125, 129, 130, 132, 133, 141], "test_resilience_perf": [73, 74, 131], "good": [73, 74, 90, 120, 133], "bad": [73, 74, 141], "e": [73, 74, 90, 100, 102, 104, 106, 107, 108, 110, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 129, 130, 131, 132, 133, 137, 141, 145, 146, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "g": [73, 74, 90, 100, 102, 104, 112, 113, 115, 116, 117, 118, 119, 122, 123, 128, 129, 130, 131, 137, 141, 146, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "rest": [73, 74, 89, 98, 102, 106, 108, 111, 115, 116, 118, 122, 141], "similarli": [73, 74, 95, 102, 115, 116, 120, 123, 128], "other": [73, 74, 89, 91, 94, 99, 100, 101, 102, 103, 104, 106, 108, 110, 112, 113, 116, 117, 118, 119, 122, 125, 128, 131, 133, 141, 148, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "like": [73, 74, 94, 102, 106, 113, 115, 118, 119, 120, 125, 133, 141, 145, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "test_resilience_dist": [73, 74, 131], "The": [73, 74, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "test_resilience_shift_histogram": [73, 74, 131], "test_resilience_shift_dens": [73, 74, 131], "636": 73, "plot_8_scored_test_cl": [73, 75, 183], "2585": [25, 74], "3558": 74, "2709": 74, "3636": 74, "7965": 74, "0124": 74, "0094": 74, "113": 74, "plot_8_scored_test_reg": [74, 75, 183], "920": [], "auto_examples_4_test": 75, "68": 113, "reliability_bandwidth": [77, 78, 93, 95, 141], "plot_0_compare_classif": [77, 81, 183], "reliability_coverag": [78, 95, 141], "plot_0_compare_regress": [78, 81, 183], "model_fairness_compar": [79, 90, 94, 141], "glm_air": 79, "ebm_air": 79, "7124": 79, "6453": 79, "8326": 79, "8251": 79, "4405": 79, "9017": 79, "6953": 79, "5457": 79, "7452": 79, "6506": 79, "6338": 79, "7080": 79, "6135": 79, "7131": 79, "6028": 79, "8209": 79, "7490": [47, 79], "8734": [79, 103], "7147": 79, "8212": 79, "140": 79, "plot_1_compare_fair": [79, 81, 183], "auto_examples_5_compar": [], "auto_examples_python": 82, "zip": 82, "auto_examples_jupyt": 82, "welcom": 84, "outcom": [84, 86, 102, 113, 125, 126, 128, 132, 141], "user": [84, 99, 102, 103, 104, 113, 116, 123, 126, 132, 133, 139, 140, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "guid": [84, 113, 140, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "introduct": [84, 99, 104, 120, 185], "diagnost": [84, 86, 92, 131, 132, 134, 141, 177, 179, 180, 185], "suit": [84, 103, 132, 185], "case": [84, 89, 90, 99, 103, 109, 111, 116, 119, 122, 125, 127, 128, 130, 133, 141, 147, 148, 162, 163, 185], "studi": [84, 185], "frequent": 84, "ask": 84, "question": 84, "read": [85, 113], "my": 85, "own": [85, 99, 162], "frame": [85, 117, 119], "chapter": 86, "includ": [86, 88, 91, 93, 95, 98, 99, 100, 101, 102, 103, 104, 110, 113, 115, 117, 118, 121, 122, 123, 125, 126, 128, 129, 131, 132, 133, 137, 139, 141, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "multipl": [86, 92, 102, 112, 113, 116, 118, 122, 126, 133, 141, 145], "low": [86, 87, 88, 90, 91, 98, 112, 113, 117, 121, 125, 141], "experiment": [86, 113, 141], "intepret": 86, "benchmark": 86, "californiah": [86, 117, 185], "ml": [25, 86, 98, 104, 113, 119, 141], "descript": [86, 98, 113, 141], "its": [87, 88, 91, 95, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 137, 141, 155, 156, 162], "mode": [87, 88, 91, 93, 98, 113, 141, 155, 156, 162], "develop": [87, 88, 91, 95, 98, 100, 101, 106, 107, 108, 109, 110, 111, 112, 113, 115, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 137, 141], "machin": [87, 88, 91, 92, 94, 95, 98, 100, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 119, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 141, 185], "learn": [87, 88, 91, 92, 94, 95, 98, 100, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 149, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "uci": [87, 91, 93, 95, 98, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 141], "repositori": [87, 91, 93, 95, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133], "which": [87, 88, 91, 93, 95, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 141, 146, 147, 150, 152, 153, 155, 156, 160, 162, 163, 164, 165, 166, 167, 177, 179, 180], "consist": [87, 88, 91, 95, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 156, 161, 163, 165, 167], "389": [87, 95, 106, 107, 108, 109, 110, 111, 112, 115, 118, 119, 122, 123, 125, 127, 128, 130, 131, 132, 133], "hourli": [87, 95, 106, 107, 108, 109, 110, 111, 112, 115, 118, 119, 122, 123, 125, 127, 128, 130, 131, 132, 133], "rental": [87, 95, 106, 107, 108, 109, 110, 111, 112, 115, 118, 119, 122, 123, 125, 127, 128, 130, 131, 132, 133], "capit": [87, 95, 106, 107, 108, 109, 110, 111, 112, 115, 118, 119, 122, 123, 125, 127, 128, 130, 131, 132, 133], "see": [87, 88, 91, 94, 95, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 141, 148, 149, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "detail": [87, 88, 91, 93, 95, 97, 102, 104, 105, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 137, 140, 141, 162, 163], "here": [25, 87, 88, 91, 93, 95, 98, 99, 100, 102, 104, 106, 108, 110, 111, 115, 116, 118, 119, 123, 125, 129, 130, 131, 135, 136, 141, 146], "continu": [87, 88, 95, 99, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 150, 151, 155, 156], "problem": [87, 88, 89, 90, 91, 93, 95, 98, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 141, 147, 148, 162], "click": [87, 88, 89, 90, 91, 98, 139], "link": [87, 88, 89, 90, 91, 94, 97, 98, 99, 100, 101, 102, 103, 104, 119, 126, 137, 150, 151], "googl": [87, 88, 89, 90, 91, 98, 141], "colab": [87, 88, 89, 90, 91], "choos": [87, 88, 89, 90, 91, 98, 102, 122, 127, 129, 130, 132, 133, 152, 153, 162, 163], "exploratori": [87, 88, 89, 90, 96, 141, 185], "need": [87, 95, 102, 103, 104, 106, 108, 110, 112, 113, 116, 122, 123, 125, 126, 132, 133, 135, 136, 139, 149, 150, 151, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "inher": [87, 88, 91, 113, 118, 120, 136, 141], "pairwis": [87, 88, 91, 97, 104, 106, 113, 115, 118, 123, 147, 150, 151, 154, 155, 156, 157, 166, 167], "640": [88, 116, 117, 121, 129], "fetch": [88, 116, 117, 121, 129], "three": [88, 93, 95, 97, 99, 100, 101, 103, 104, 113, 118, 119, 125, 126, 128, 129, 130, 132, 133, 137], "version": [88, 100, 113, 128, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "_raw": 88, "_trim1": 88, "trim": [88, 98, 141], "onli": [88, 91, 95, 101, 102, 109, 111, 112, 113, 115, 117, 118, 119, 120, 121, 122, 123, 126, 127, 129, 130, 131, 132, 133, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 179, 180], "_trim2": 88, "median": [88, 102, 103, 116, 117, 121, 129, 147, 163], "price": [88, 117], "per": [88, 106, 112, 115, 120, 146, 148, 150, 151, 155, 156, 164, 165, 166, 167], "block": [88, 155, 156], "log": [88, 102, 106, 107, 108, 110, 119, 122, 125, 133, 151, 155, 156, 162], "l1": [88, 119, 120, 147, 158, 159, 160, 161, 163, 164, 165, 166, 167], "reigster": 88, "sola": [89, 98, 139, 141], "ai": [89, 98, 113, 139, 141], "solassimu1": [89, 98, 141], "modifi": [89, 98, 103, 115, 132, 141], "demo": [25, 89, 102, 133, 141, 155, 156], "covari": [89, 98, 102, 104, 113, 130, 132, 135, 141, 142, 143, 144, 145, 146, 147, 148, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "label": [25, 89, 93, 98, 99, 103, 125, 129, 133, 135, 141, 150, 151, 152, 154, 155, 160, 162, 163, 164, 166], "demograph": [89, 90, 94, 98, 126, 141], "contribut": [89, 98, 102, 108, 109, 111, 112, 117, 119, 122, 141], "minor": [89, 115], "major": [89, 102], "grei": [89, 90], "color": [89, 90, 116], "when": [89, 90, 93, 94, 100, 101, 102, 104, 106, 108, 109, 111, 112, 116, 118, 119, 120, 121, 123, 125, 126, 127, 128, 129, 130, 132, 133, 137, 141, 145, 146, 147, 148, 149, 151, 153, 155, 156, 160, 161, 162, 163, 165, 167, 177, 179, 180], "finish": 89, "suggest": [89, 95, 100, 102, 106, 110, 112, 113, 117, 119, 128, 129], "procudur": 89, "add": [89, 90, 113, 123, 130, 141, 145], "By": [89, 93, 95, 98, 99, 102, 103, 104, 108, 109, 111, 113, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 132, 133, 137, 141, 148, 162, 163], "enter": [89, 103], "button": [89, 90, 98], "switch": [89, 119, 122, 133], "tab": [89, 90], "view": [89, 106, 110, 111, 112, 115, 116, 118, 121, 123, 128], "breakdown": 89, "model_fairness_sola": [89, 141], "decis": [25, 90, 98, 109, 112, 113, 114, 116, 126, 133, 141, 145, 146, 148, 162, 163, 171, 181, 185], "hypothes": 90, "statu": [90, 133, 146, 160, 161], "well": [90, 100, 101, 102, 104, 116, 117, 119, 121, 122, 123, 125, 128, 133, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "indic": [90, 93, 94, 98, 99, 100, 101, 102, 106, 108, 110, 111, 112, 115, 116, 117, 118, 119, 120, 122, 123, 125, 127, 128, 129, 130, 133, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 156, 162, 163, 164, 165, 166, 167], "20k": 90, "applic": [90, 98, 104, 113, 141], "last": [90, 93, 99, 100, 104, 106, 129, 136, 139, 141, 150, 151, 155, 156, 160, 161], "month": 90, "card": [90, 91, 93, 98, 99, 103, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 133, 141], "minimum": [90, 102, 103, 113, 122, 125, 127, 132, 133, 139, 145, 146, 150, 151, 152, 153, 162, 163, 164, 165, 166, 167], "payment": [90, 91], "wa": [90, 150, 151], "account": [90, 102, 112, 122, 128, 130], "date": 90, "ordin": [90, 99, 122, 141, 150, 151], "current": [90, 139, 162, 163], "dai": [90, 106, 108, 110, 115, 118, 123, 125], "so": [90, 95, 103, 104, 109, 111, 112, 116, 117, 119, 123, 129, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "number": [90, 93, 95, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 115, 116, 117, 120, 122, 125, 126, 127, 128, 129, 130, 132, 133, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 171, 174, 175, 177, 179, 180, 181], "divid": [90, 97, 99, 102, 106, 115, 118, 121, 123, 125, 128, 132, 133, 149], "limit": [90, 95, 104, 106, 110, 116, 117, 120, 121, 148, 149], "cannot": [90, 94, 104, 119, 149], "kind": [90, 141], "should": [90, 98, 104, 106, 107, 110, 111, 113, 119, 120, 125, 127, 128, 135, 137, 141, 148, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "nearli": [90, 98, 141], "depth2": 90, "depth7": 90, "xgbclassifi": 90, "To": [90, 95, 99, 100, 104, 106, 107, 108, 109, 110, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 139, 141, 162, 163], "favor": [90, 118, 141], "defaut": 90, "class": [90, 119, 125, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "find": [90, 115, 118, 120, 122, 128, 132, 137, 162, 163], "higher": [90, 94, 95, 100, 102, 110, 116, 117, 125, 129, 149], "debias": 90, "unfair": [90, 94, 126], "mitig": [90, 102, 104, 126, 127], "an": [90, 93, 95, 97, 99, 101, 102, 103, 104, 106, 108, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 132, 133, 137, 139, 141, 144, 145, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 171, 177, 178, 179, 180, 181], "attribut": [90, 91, 94, 103, 109, 112, 141, 142, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "repeat": [90, 102, 104, 109, 111, 123, 150, 151, 154, 157], "mani": [90, 102, 106, 113, 119, 120, 125, 150, 151, 162, 163], "clear": [90, 106, 129], "could": [90, 98, 112, 118, 155, 156], "record": [90, 93, 95, 102, 108, 111, 130, 150, 151, 164, 165], "adjust": [90, 103, 106, 121, 127, 128, 129, 132, 162], "vari": [90, 104, 108, 109, 125, 129, 162, 163], "both": [90, 94, 95, 97, 101, 102, 104, 106, 108, 112, 113, 115, 116, 117, 118, 119, 122, 123, 125, 128, 130, 135, 143, 145, 155, 156, 162], "000": [26, 56, 75, 81, 83, 91, 93, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 133, 183], "client": [91, 93, 98, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 133, 141], "200504": 91, "200509": 91, "subject": [91, 104, 113, 119, 130, 155, 156, 164, 165, 166, 167], "slight": [91, 95, 129], "preprocess": [91, 93, 98, 99, 115, 116, 119, 123, 125, 127, 128, 130, 131, 133, 141, 149], "histori": [91, 155, 156], "pay_amt1": [91, 120], "keep": [91, 106, 111, 120, 141, 149, 151, 153, 156, 161, 163, 165, 167], "while": [91, 101, 102, 104, 106, 108, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 125, 126, 127, 128, 129, 130, 133, 137, 144, 162, 163], "section": [93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 112, 120, 125, 126, 130], "describ": [93, 102, 104, 106, 110, 146], "done": [93, 106, 109, 123], "function": [24, 25, 93, 94, 95, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 137, 141, 143, 145, 146, 147, 148, 150, 151, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167], "illustr": [93, 95, 106, 108, 110, 112, 122, 123, 125, 126, 128, 130, 133, 136], "chosen": [93, 99, 116, 117, 118, 122, 132, 133, 141, 162, 163], "chart": [93, 95, 97, 110, 119, 125], "below": [93, 94, 95, 98, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 141], "As": [93, 101, 102, 103, 104, 106, 111, 112, 115, 117, 118, 120, 121, 122, 123, 129, 130, 131, 135, 136, 137, 138, 141, 155, 156], "legend": 93, "similar": [93, 100, 102, 104, 106, 108, 109, 112, 115, 116, 117, 118, 120, 122, 123, 125, 127, 128, 129, 132, 137, 155, 156], "ha": [93, 95, 98, 100, 101, 102, 104, 106, 109, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 129, 130, 132, 141, 145, 148, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 177, 179, 180], "slightli": [93, 98, 104, 115, 118, 122, 123, 127], "better": [93, 95, 102, 108, 111, 115, 120, 121, 122, 125, 126, 128, 133, 137], "present": [93, 94, 95, 101, 103, 112, 125, 126, 132, 133, 137], "variou": [93, 95, 99, 100, 102, 112, 113, 115, 118, 119, 125, 126, 129, 139, 141], "relat": [93, 95, 100, 101, 104, 108, 116, 118, 122, 123, 129, 131, 132, 139, 145, 148, 177, 178, 179, 180], "found": [93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 115, 116, 118, 119, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 133, 139, 151, 162, 163], "It": [93, 94, 95, 100, 101, 102, 103, 104, 106, 109, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 125, 128, 129, 130, 132, 133, 137, 141, 144, 148, 149, 155, 156, 160, 161, 162, 163, 177, 179, 180], "note": [93, 94, 95, 99, 100, 101, 102, 104, 106, 109, 110, 111, 112, 115, 116, 117, 118, 119, 121, 122, 123, 125, 128, 129, 130, 132, 133, 141, 145, 147, 148, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "unlik": [93, 95, 102, 112, 116, 127], "argument": [93, 95, 98, 100, 104, 106, 107, 108, 109, 110, 112, 116, 118, 122, 125, 127, 128, 130, 132, 133, 147], "slice": [93, 95, 106, 110, 113, 123, 127, 131, 132, 133, 141, 171, 174, 181], "instead": [93, 95, 103, 104, 106, 107, 108, 110, 112, 113, 115, 116, 119, 122, 123, 128, 129, 141, 149, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "repres": [93, 94, 95, 97, 100, 101, 102, 104, 106, 107, 108, 109, 110, 112, 116, 117, 119, 120, 121, 122, 123, 125, 128, 129, 130, 132, 133, 137, 145, 147, 160, 161], "keyword": [93, 95, 102, 104, 106, 107, 109, 110, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 132, 147], "reveal": [93, 95, 102, 111, 115, 123, 125, 127, 133], "within": [93, 94, 97, 99, 100, 102, 116, 121, 123, 127, 128, 129, 131, 132, 133, 137, 141, 148, 150, 151, 155, 156, 162, 163], "greater": [93, 99, 102, 103, 104, 108, 127, 128, 133, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 155, 156, 162, 163], "than": [93, 94, 95, 101, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 116, 117, 119, 120, 122, 123, 125, 127, 128, 129, 130, 133, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 162, 163], "interv": [93, 95, 106, 120, 128, 132, 148], "quantifi": [93, 99, 100, 102, 112, 128], "squar": [93, 102, 104, 119, 120, 125, 127, 128, 130, 133, 137, 146, 147, 149, 151, 153, 156, 159, 161, 163, 165, 167], "hat": [93, 104, 106, 107, 108, 110, 115, 116, 117, 118, 122, 123, 125, 128, 130], "p": [93, 100, 102, 107, 110, 112, 122, 126, 130, 135, 141, 147], "henc": [93, 104, 115, 120, 122, 141, 145], "shown": [93, 98, 100, 104, 106, 107, 112, 115, 116, 118, 119, 120, 121, 122, 123, 126, 128, 131, 132, 135, 137], "actual": [93, 98, 99, 102, 115, 117, 118, 121, 122, 123, 125, 128, 130, 132, 141, 145, 155, 156, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "involv": [93, 95, 102, 103, 111, 119, 122, 127, 129, 130, 132, 133, 137, 141], "ad": [93, 95, 104, 123, 130, 155, 156], "nois": [93, 95, 109, 113, 130, 141], "undergo": [93, 95], "unless": [93, 95, 141, 145, 162, 163], "otherwis": [93, 95, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 116, 122, 127, 133, 141, 145, 148, 149, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "abov": [93, 95, 98, 101, 102, 104, 106, 107, 110, 111, 112, 115, 117, 118, 120, 122, 123, 126, 127, 128, 130, 132, 133, 137], "best": [93, 122, 123, 137, 151, 152, 153, 155, 156, 161, 162, 163, 165, 167], "follow": [93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 141, 145, 150, 151, 162, 163], "option": [93, 99, 100, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 120, 122, 125, 127, 128, 129, 130, 132, 133, 137, 139, 141, 143, 144, 149, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "proport": [93, 95, 100, 101, 119, 125, 128, 129, 130, 137, 162], "consid": [93, 94, 102, 107, 110, 111, 112, 113, 118, 120, 121, 122, 123, 125, 127, 129, 130, 132, 133, 137, 141, 147, 150, 151, 152, 153, 162, 163], "largest": [93, 95, 102, 109, 115, 117, 118, 119, 120, 122, 123, 128, 129, 130, 162, 163], "high": [93, 95, 98, 100, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 141, 148, 162, 163], "compris": [93, 101, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 133], "april": [93, 113, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 133], "2005": [93, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 133], "septemb": [93, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 133], "more": [93, 94, 95, 97, 99, 100, 101, 102, 104, 108, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 141, 145, 149, 150, 151, 162, 163], "taiwancreditdata": [93, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 133], "websit": [93, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 133], "directli": [93, 94, 97, 111, 112, 115, 119, 120, 122, 123, 125, 127, 128, 130, 131, 133, 139, 141], "although": [93, 102, 106, 115, 118, 119, 123, 125, 127, 128, 130, 131, 133], "some": [93, 102, 104, 110, 111, 115, 117, 118, 119, 120, 122, 123, 125, 127, 128, 130, 131, 132, 133, 141, 149, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "serv": [93, 102, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 132, 133], "dedic": [94, 128], "bia": [94, 113, 120, 160, 161], "superior": [94, 123], "sinc": [94, 95, 113, 116, 122, 125, 145, 150, 152, 155, 160, 162, 164, 166], "former": [94, 112, 130], "intric": [94, 117], "howev": [94, 95, 98, 99, 102, 104, 108, 109, 110, 111, 112, 113, 115, 116, 117, 119, 120, 122, 123, 125, 128, 129, 130, 133, 141], "observ": [94, 100, 101, 102, 104, 108, 110, 115, 116, 117, 118, 119, 123, 125, 126, 127, 128, 129, 130, 131, 132, 145], "distinct": [94, 99, 102, 129, 131, 132], "perspect": [94, 115], "assess": [94, 95, 97, 99, 100, 101, 111, 117, 125, 127, 128, 129, 130, 133, 137], "focus": [94, 101, 132], "consequ": [94, 113, 133, 137], "ani": [94, 101, 108, 111, 112, 113, 115, 116, 117, 123, 125, 128, 132, 152, 153, 162, 163], "influenc": [94, 111, 117, 129, 151, 153, 156, 161, 163, 165, 167], "associ": [94, 119, 128, 162], "depict": [94, 125, 129], "advers": [94, 126, 130, 141], "impact": [94, 100, 102, 106, 112, 122, 123, 126, 127, 137, 141], "left": [94, 99, 101, 102, 103, 104, 107, 112, 115, 116, 118, 123, 125, 146, 152, 153, 162, 163], "convers": [94, 102, 117], "right": [94, 101, 102, 104, 107, 109, 112, 115, 116, 118, 119, 122, 123, 125, 146, 152, 153, 162, 163], "signifi": [94, 129], "discrimin": 94, "practic": [94, 112, 116, 120, 137], "term": [94, 109, 112, 113, 116, 117, 119, 120, 123, 125, 148, 150, 151, 152, 153, 164, 165, 166, 167], "provid": [94, 99, 100, 101, 102, 103, 108, 110, 111, 112, 113, 116, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 145, 146, 148, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "figur": [94, 104, 113, 115, 117, 118, 120, 122, 123, 126, 128, 130, 131, 141, 146, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181], "impli": [94, 120, 129], "notabl": [94, 125, 132], "those": [94, 95, 97, 126, 147], "level": [94, 101, 102, 104, 112, 113, 115, 118, 123, 126, 128, 130, 150, 151], "overal": [94, 102, 104, 106, 113, 116, 119, 121, 125, 130, 141, 164, 165], "entir": [94, 95, 110, 112, 121, 129, 133], "possibl": [94, 112, 119, 125, 126, 137, 139, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "appropri": [94, 99, 102, 113, 121, 127, 147], "subset": [94, 102, 104, 106, 107, 108, 110, 112, 121, 128, 132, 145, 150, 152, 155, 160, 162, 164, 166], "offer": [94, 95, 103, 106, 112, 120, 121, 125, 129, 132, 133, 137], "veri": [94, 104, 106, 109, 111, 118, 119, 155, 156, 160, 161], "explor": [95, 97, 137], "conveni": [95, 113], "wai": [95, 98, 100, 102, 104, 108, 112, 113, 117, 118, 120, 123, 141, 145], "through": [95, 113, 116, 118, 120, 137, 162, 163], "process": [95, 99, 102, 109, 110, 113, 116, 120, 122, 123, 125, 126, 128, 130, 132, 133, 137, 145, 148, 162, 163], "obtain": [95, 102, 103, 110, 112, 115, 120, 122, 125, 128, 130, 132, 137, 145, 155, 156, 162, 163, 164, 165], "support": [95, 97, 98, 99, 102, 106, 112, 113, 122, 123, 125, 126, 128, 129, 130, 131, 135, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 162, 163, 168], "list": [95, 99, 101, 103, 104, 107, 113, 118, 120, 127, 130, 131, 133, 136, 137, 141, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "too": [95, 106, 112, 120, 122], "crowd": 95, "These": [95, 97, 98, 99, 104, 125, 130, 131, 132, 133, 141], "boxplot": 95, "summar": [95, 103, 116, 130, 141], "mark": [95, 102, 104, 120, 129], "circl": [95, 102], "lowest": [95, 129], "rel": [95, 102, 104, 115, 117, 119, 120, 122, 125, 130, 133, 149, 162, 163], "sensit": [95, 102, 103, 112, 119, 120, 125, 126], "lead": [95, 100, 106, 109, 113, 115, 117, 119, 122, 126, 145, 149], "conclus": [95, 128], "significantli": [95, 100, 101, 102, 106, 109, 119, 125, 129], "larger": [95, 102, 106, 107, 108, 110, 111, 112, 116, 117, 119, 120, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 154, 155, 156, 157], "less": [95, 103, 106, 108, 110, 112, 117, 122, 128, 129, 133, 141, 145, 147, 162, 163], "furthermor": [95, 113, 116, 125], "deriv": [95, 102, 122, 148, 155, 156], "metricmetr": 95, "suffer": [95, 121], "issu": [95, 101, 119, 126, 127, 130, 155, 156, 160, 161], "especi": [95, 104, 116, 117, 119, 152, 153, 162, 163], "aim": [95, 102, 104, 106, 128, 129], "dot": [95, 102, 128, 129, 133, 141], "line": [95, 97, 102, 104, 106, 108, 110, 113, 120, 123, 125, 126, 128, 129, 133, 141], "close": [95, 109, 115, 119, 120, 125, 128, 145], "fall": [95, 102, 128, 133, 144], "smallest": [95, 149, 150, 151], "certain": [95, 99, 100, 102, 103, 110, 112, 118, 133], "signific": [95, 99, 104, 111, 112, 113, 115, 118, 127, 129, 148], "degrad": [95, 111, 113, 130], "increas": [95, 100, 102, 104, 108, 111, 112, 113, 115, 117, 118, 119, 120, 122, 123, 125, 127, 128, 129, 130, 133, 155, 156, 164, 165, 166, 167], "emploi": [95, 100, 125, 126, 127, 128, 129, 132, 133, 137], "extra": 95, "call": [95, 101, 103, 104, 106, 108, 110, 113, 115, 119, 120, 122, 126, 135, 139, 141, 145, 149, 151, 153, 156, 161, 163, 165, 167], "taken": [95, 122, 148], "consider": [95, 104, 125], "previou": [95, 106, 108, 128, 129, 145], "much": [95, 106, 108, 112, 116, 119, 125, 129, 130], "manipul": 96, "basic": [96, 103, 141, 150, 151], "highli": [96, 104, 106, 110, 112, 121, 122, 141, 143, 145, 150, 151], "methodologi": [96, 113, 124, 134], "allow": [97, 99, 102, 103, 110, 112, 117, 122, 125, 126, 127, 128, 129, 133, 137, 141, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167], "visual": [97, 102, 106, 108, 110, 113, 115, 116, 118, 119, 120, 123, 128, 129, 133], "identif": [97, 113, 127, 129], "potenti": [97, 102, 117, 125, 126, 129, 163], "aid": [97, 122], "understand": [97, 102, 108, 113, 117, 119, 120, 122, 126, 127, 128, 129, 132], "deviat": [97, 102, 103, 129, 130, 141, 150, 151, 155, 156], "pattern": [97, 100, 102, 108, 113, 115, 117, 120, 125, 127, 130], "presenc": [97, 101, 102, 133], "frequenc": [97, 100, 102, 103, 128, 130, 162], "graphic": [97, 108, 113], "combin": [97, 102, 104, 112, 116, 119, 125, 126, 137], "collect": [97, 116, 122, 123, 145], "point": [97, 100, 102, 104, 106, 107, 108, 109, 110, 112, 117, 120, 122, 125, 128, 130, 132, 133, 141, 150, 151, 152, 153, 155, 156, 162, 163, 164, 165, 166, 167], "dimension": [97, 100, 102, 119, 148], "There": [97, 98, 104, 113, 119, 126, 137], "integrity_check": 97, "altern": [97, 104, 106, 110, 112, 130, 162, 163], "connect": [97, 133], "introduc": [98, 101, 102, 112, 117, 120, 125, 126, 129, 132], "loader": [98, 155, 156], "modul": [98, 99, 101, 102, 103, 104, 113, 119, 121, 131, 132, 138, 139, 141, 155, 156], "usual": [98, 106, 111, 112, 113, 116, 126, 129, 137, 141, 169, 179, 180], "step": [98, 102, 104, 111, 112, 115, 116, 118, 120, 121, 122, 123, 128, 129, 130, 131, 133, 135, 137, 141, 145, 150, 151, 152, 153, 178], "whole": [98, 99, 100, 101, 141, 142, 143, 144, 145, 146, 147, 148, 149], "sever": [98, 104, 112, 118, 122, 128, 132, 137, 141, 162, 163], "alreadi": [98, 111, 120, 136, 137, 138], "upload": 98, "gaussian": [98, 102, 104, 130, 141, 142], "spheric": [98, 141], "scikit": [98, 102, 104, 108, 110, 111, 113, 119, 120, 137, 139, 141, 149, 150, 151, 158, 159, 162, 163], "archiv": [98, 141], "edu": [98, 141], "crash": [98, 141], "cours": [98, 141], "californiahousing_trim1": [98, 141], "98": [98, 141], "A": [83, 98, 100, 102, 104, 106, 110, 113, 119, 120, 125, 128, 129, 130, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "solasai": [98, 141], "dispar": [98, 113, 125, 126, 132, 141], "solashmda": [98, 141], "2018": [98, 112, 113, 141], "home": [98, 116, 117, 121, 129, 141], "disclosur": [98, 141], "act": [98, 141], "hmda": [98, 141], "about": [98, 101, 102, 106, 113, 132, 141], "everi": [98, 116, 141, 154, 157, 162], "unit": [98, 119, 120, 141, 149], "just": [98, 106, 112, 119, 141, 145, 150, 151], "wrap": [98, 104, 135], "backend": [98, 113, 141], "162726": 98, "989380": 98, "977290": 98, "022444": 98, "833418": 98, "897849": 98, "931033": 98, "718005": 98, "695946": 98, "998672": 98, "883336": 98, "443349": 98, "628205": 98, "383016": 98, "782193": 98, "470701": 98, "950189": 98, "278926": 98, "041356": 98, "204163": 98, "549002": 98, "718085": 98, "934676": 98, "722246": 98, "235314": 98, "914188": 98, "401711": 98, "826569": 98, "049154": 98, "291550": 98, "759445": 98, "509802": 98, "770044": 98, "799497": 98, "517969": 98, "965879": 98, "934110": 98, "230116": 98, "104878": 98, "408100": 98, "858583": 98, "468189": 98, "656293": 98, "970217": 98, "566793": 98, "037980": 98, "867851": 98, "055172": 98, "123488": 98, "594408": 98, "2117": 98, "325774": 98, "298574": 98, "984911": 98, "660747": 98, "894813": 98, "971714": 98, "263716": 98, "386797": 98, "177803": 98, "546942": 98, "2118": 98, "631497": 98, "209968": 98, "060872": 98, "981552": 98, "319807": 98, "552832": 98, "256842": 98, "059649": 98, "120317": 98, "194922": 98, "2119": 98, "918874": 98, "502420": 98, "759211": 98, "143963": 98, "851615": 98, "530987": 98, "295923": 98, "576709": 98, "472256": 98, "470885": 98, "2120": 98, "505041": 98, "592865": 98, "458442": 98, "022174": 98, "396257": 98, "430562": 98, "394588": 98, "286274": 98, "493732": 98, "581601": 98, "2121": 98, "304829": 98, "028269": 98, "903502": 98, "400436": 98, "932546": 98, "409703": 98, "272170": 98, "739227": 98, "744509": 98, "398449": 98, "tell": [98, 106, 116, 122, 130], "program": [98, 113, 141], "would": [98, 99, 104, 106, 107, 108, 110, 119, 120, 121, 125, 126, 128, 133, 135, 141, 151, 153, 155, 156, 161, 162, 163, 165, 167], "denot": [98, 104, 108, 111, 112, 120, 126, 128, 129], "do": [98, 103, 104, 106, 111, 112, 119, 126, 128, 129, 141, 162, 163], "transform": [25, 98, 99, 102, 104, 112, 117, 119, 120, 122, 130, 136, 149], "frac": [98, 100, 101, 104, 106, 107, 110, 112, 122, 123, 125, 126, 128, 141, 151, 153, 156, 161, 163, 165, 167], "work": [98, 101, 102, 104, 110, 112, 113, 122, 123, 125, 126, 132, 141, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "mechan": [98, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "mai": [98, 100, 102, 104, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 125, 126, 128, 129, 130, 132, 139, 140, 141, 146, 147, 148, 151, 152, 153, 156, 161, 162, 163, 165, 167], "want": [98, 103, 108, 110, 112, 116, 119, 123, 130, 133, 138], "must": [98, 103, 106, 109, 147, 148, 154, 157, 158, 159], "dictionari": [98, 126, 131, 137, 150, 151, 152, 153, 162, 163], "kei": [98, 102, 110, 115, 117, 118, 122, 126, 137], "abil": [99, 100, 102, 125, 127], "aspect": [99, 102, 113, 118], "addition": [99, 103, 106, 107, 110, 122, 123, 125, 127, 128, 132], "control": [99, 102, 103, 110, 116, 117, 120, 121, 122, 126, 129, 131, 145, 149, 162, 163], "flexibl": [99, 103, 111, 113, 117, 118, 122, 132, 133, 144], "accord": [99, 113, 120, 122, 126, 129, 141, 155, 156, 177, 178, 179, 180], "prefer": [99, 132, 137], "typic": [99, 102, 111, 119, 137], "locat": 99, "explicitli": [99, 103, 112], "identifi": [99, 101, 102, 104, 108, 112, 113, 117, 119, 122, 123, 125, 127, 129, 130, 132, 133, 137, 141], "desir": [99, 100, 102, 122, 125, 126, 128, 133, 137, 141], "ensur": [99, 101, 103, 117, 121, 122, 123, 126, 127, 149], "correct": [99, 115, 125, 133, 139], "automat": [99, 103, 104, 113, 122, 132, 141, 144, 150, 151, 162], "determin": [99, 100, 102, 103, 104, 110, 112, 116, 117, 125, 127, 128, 129, 130, 132, 133, 137, 141, 150, 151, 153, 156, 160, 161, 163, 165, 167, 173, 177, 179, 180], "hand": [99, 106, 113, 116, 125, 128], "most": [99, 101, 104, 108, 109, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 127, 137, 139, 141, 147, 155, 156, 171, 181], "suitabl": [99, 102, 119, 122, 130, 133, 137], "handl": [99, 102, 104, 125, 129], "assign": [99, 102, 109, 119, 121, 126, 129, 137, 142, 143, 144, 145, 146, 147, 148, 149], "carri": [99, 162, 163], "n": [83, 99, 100, 103, 104, 106, 107, 110, 112, 125, 128, 130, 135, 141, 162, 163], "width": [99, 100, 103, 125, 126, 128, 141], "pa": [99, 103], "encod": [99, 113, 119, 122, 141], "standard": [99, 103, 104, 106, 113, 115, 119, 126, 130, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 156], "min": [99, 103, 141, 145, 149, 150, 151, 155, 156, 164, 165], "max": [99, 102, 103, 115, 116, 120, 128, 141, 145, 146, 147, 150, 151, 152, 153, 155, 156, 162, 163, 164, 165, 166, 167], "scaler": 99, "onc": [99, 106, 116, 121, 123, 126, 132], "conduct": [99, 104, 127, 133], "dissimilar": [99, 100, 102], "edf": 99, "reduc": [99, 102, 104, 106, 112, 116, 120, 123], "comput": [99, 100, 102, 104, 106, 107, 108, 110, 111, 112, 120, 122, 125, 128, 129, 133, 141, 147, 148, 149, 155, 156, 160, 161, 162, 163], "burden": [99, 102, 104], "befor": [99, 104, 119, 129, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 160, 161, 162, 163, 166], "output": [99, 101, 102, 104, 106, 108, 109, 110, 112, 117, 120, 123, 126, 130, 132, 135, 141, 148, 149, 155, 156, 162, 163], "euclidean": [99, 102, 104, 129, 141, 146, 147, 177, 178, 179, 180], "far": [99, 102, 110], "awai": 99, "farthest": 99, "length": [99, 101, 102, 120, 141, 145, 150, 151, 154, 157], "contain": [99, 101, 102, 104, 111, 117, 119, 132, 133, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "element": [99, 106, 109, 125, 131, 141, 147, 160, 161, 162, 163], "k": [99, 100, 104, 106, 107, 111, 113, 115, 116, 118, 123, 128, 129, 132, 141, 142, 146, 147, 173, 177, 178, 179, 180], "third": [99, 103, 120, 129, 155, 156], "characterist": [99, 102, 129], "over": [99, 100, 103, 104, 106, 112, 115, 118, 123, 141, 145, 160, 161], "aforement": [99, 133], "composit": 99, "part": [100, 115, 116, 123], "phenomenon": [100, 102], "properti": [100, 112, 120, 148, 162, 163], "mismatch": 100, "word": [100, 101, 106], "assumpt": [100, 110, 117, 119, 122, 130, 149], "made": [100, 122, 130], "dure": [100, 106, 108, 109, 110, 116, 118, 122, 125, 128, 132, 133, 137, 145, 147, 148, 150, 151, 162, 163], "longer": [100, 101, 102, 119, 145], "hold": [100, 119, 129, 137], "unseen": [100, 127], "manifest": 100, "alter": [100, 130, 132], "discrep": [100, 102, 125, 130, 133], "stabil": [100, 128, 129, 132, 141, 173, 177], "measur": [100, 101, 102, 104, 107, 111, 119, 122, 125, 127, 128, 129, 132, 145, 146, 162, 163], "extent": [100, 130, 132], "discret": [100, 126, 128, 130], "kullback": 100, "leibler": 100, "l": [100, 111, 120], "scheme": [100, 102, 116], "q": [100, 128], "b": [100, 104, 113, 120, 128, 129, 130, 155, 156], "d_": [100, 107], "kl": 100, "sum_": [100, 102, 104, 106, 107, 110, 112, 116, 120, 125], "p_i": 100, "ln": 100, "q_i": 100, "asymmetr": [100, 101], "resect": 100, "begin": [100, 101, 102, 104, 106, 107, 108, 110, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 132, 133, 137, 146], "align": [100, 101, 102, 103, 104, 106, 107, 108, 110, 112, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128], "d": [100, 104, 117, 119, 120, 130], "equal": [100, 112, 115, 117, 119, 120, 125, 126, 128, 129, 132, 133, 141, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 163, 171, 181], "fix": [100, 106, 112, 139, 155, 156, 162, 163], "wasserstein": [100, 141, 173, 177], "absolut": [100, 104, 112, 119, 120, 125, 129, 130, 133, 137, 141, 163], "cumul": [100, 143, 149], "f": [100, 106, 107, 108, 110, 111, 112, 117, 118, 122, 123, 128, 130], "w": [113, 120, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "int": [100, 110, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "dx": 100, "kolmogorov": [100, 141, 173, 177], "smirnov": [100, 141, 173, 177], "maximum": [100, 102, 103, 104, 115, 116, 121, 122, 123, 145, 147, 150, 151, 154, 157, 162, 163, 164, 165, 166, 167], "wasserstein_dist": 100, "ks_2samp": 100, "sup_x": 100, "particular": [100, 104, 109, 112, 113, 117, 119, 120, 121, 122, 123, 127, 128, 129, 132, 133, 145], "commonli": [100, 102, 110, 121, 122, 123, 125], "anoth": [100, 101, 103, 106, 115, 122, 125, 129, 146], "particularli": [100, 102, 112, 113, 125], "formula": [100, 101, 102, 104, 106, 112, 120, 125, 150, 151], "mathrm": [100, 104, 108, 110, 122], "nm": 100, "j": [100, 102, 104, 106, 107, 112, 115, 117, 118, 119, 122, 123], "m": [100, 112], "x_": [100, 102, 106, 108, 110, 115, 117, 118, 120, 122, 123, 128], "y_": [100, 101, 125, 128], "speed": [100, 104, 106, 107, 108, 110, 112, 147], "up": [100, 104, 106, 107, 108, 110, 112, 113, 123, 141, 162, 163], "zero": [100, 101, 104, 106, 111, 115, 116, 117, 119, 120, 123, 125, 149, 162, 163], "perfect": [100, 101, 104, 125], "ident": [100, 119, 120, 125, 128, 141, 151, 162, 163], "design": [101, 102, 112, 118, 129, 132, 185], "submodul": [101, 102], "articl": [101, 136], "critic": [101, 120], "valid": [101, 104, 109, 112, 113, 118, 128, 136, 137, 141, 150, 151, 155, 156, 160, 161, 162, 163], "anticip": [101, 132], "except": [101, 104, 112, 123, 131, 150, 151, 153, 156, 161, 163, 165, 167], "ones": [101, 104, 110, 118], "deepcheck": 101, "packag": [101, 104, 106, 108, 109, 110, 112, 113, 115, 116, 117, 119, 120, 122, 123, 135, 139], "tailor": [101, 129, 131], "command": [101, 104, 113, 119, 139], "whether": [101, 102, 104, 110, 116, 122, 125, 132, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 155, 156, 159, 160, 161, 164, 165, 166, 167, 169, 173, 181], "uniqu": [101, 102, 103, 113, 120, 122, 123, 126, 133, 150, 151, 162, 163], "across": [101, 102, 106, 108, 112, 119, 125, 126, 129, 141, 145, 162, 163], "mixtur": [101, 102, 104, 142], "strength": [101, 104, 107, 117, 119, 120, 122, 132, 141, 154, 155, 156, 157, 158, 159], "direct": [101, 104, 117, 119, 122, 125], "monoton": [47, 48, 52, 76, 81, 82, 101, 104, 110, 118, 120, 123, 126, 129, 141, 155, 156, 164, 165, 166, 167, 183], "xi": 101, "let": [101, 106, 108, 120, 128, 130, 133], "n_x": 101, "overlin": 101, "sqrt": [101, 104, 151, 162, 163], "n_": [101, 106, 120, 126], "denomin": 101, "varianc": [101, 102, 112, 115, 116, 117, 118, 119, 122, 123, 125, 132, 149, 155, 156, 163], "symmetr": [101, 107], "theil": 101, "u": [101, 102, 106, 110, 111, 122, 125, 128, 129, 130, 133, 139, 151, 153, 156, 161, 163, 165, 167], "entropi": [101, 125, 162], "And": [101, 102, 155, 156], "role": [101, 112, 115, 123], "revers": 101, "thu": [101, 116], "mid": [101, 104], "lie": 101, "complet": [101, 115, 118, 125, 126], "subsequ": [102, 129, 133, 137], "valuabl": [102, 111, 122, 125, 129, 132], "insight": [102, 111, 118, 125, 127, 129, 132, 133], "pinpoint": [102, 127, 132], "elimin": [102, 104, 150, 151], "therebi": 102, "improv": [102, 113, 122, 125, 127, 129, 149, 150, 151, 160, 161, 162, 163], "eight": 102, "adopt": [102, 113], "approach": [102, 104, 112, 113, 116, 119, 125, 127, 128, 129, 133, 137], "liu2008": 102, "recurs": [102, 110, 120, 121, 145, 146], "construct": [102, 128, 147], "until": [102, 115, 123, 150, 151, 162, 163], "instanc": [102, 103, 108, 109, 112, 115, 116, 119, 125, 128, 133, 141, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "anomali": [102, 142, 143, 144, 145, 146, 147, 148, 149], "shorter": [102, 145], "thei": [102, 104, 110, 112, 113, 115, 122, 123, 125, 128, 129, 130, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 162, 163], "easier": [102, 121, 122], "separ": [102, 103, 119, 122, 125, 132, 150, 151], "contrast": [102, 109, 115, 116, 119, 122, 123, 125, 137], "effici": [102, 113, 137, 144, 147, 149], "doe": [102, 106, 107, 108, 109, 110, 111, 127, 128, 131, 133, 141, 162, 163], "reli": [102, 103, 125], "wrapper": [24, 25, 102, 121, 123, 134, 143, 144, 145, 147, 148, 149, 154, 157, 158, 159, 162, 163], "implement": [102, 104, 108, 109, 116, 119, 120, 127, 129, 137, 148, 152, 153], "ensembl": [102, 107, 112, 116, 117, 145], "propos": [102, 115, 116, 123], "he2003": 102, "partit": [102, 108, 110, 133, 145, 162, 163, 164, 165, 166, 167], "classifi": [102, 113, 119, 125, 129, 131, 133, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 158, 160, 162, 168, 172, 175], "larg": [102, 104, 109, 112, 116, 117, 119, 120, 125, 128, 142, 155, 156, 160, 161], "small": [102, 106, 112, 115, 116, 118, 120, 125, 130, 142], "belong": [102, 120, 128], "correspond": [102, 104, 112, 115, 116, 117, 118, 119, 120, 122, 123, 125, 130, 131, 132, 133, 137, 141, 160, 161, 162, 163], "centroid": 102, "multipli": [102, 128, 148, 149, 150, 151, 162], "emphas": 102, "comprehens": [102, 113, 125, 126, 129, 132, 137], "reduct": [102, 112, 146, 162, 163, 164, 165, 166, 167], "techniqu": [102, 113, 122, 127, 133, 137], "mahalanobi": [102, 149], "error": [102, 113, 125, 127, 128, 130, 133, 137, 139, 141, 148, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 175, 176, 181], "reconstruct": 102, "elabor": 102, "take": [102, 104, 112, 113, 115, 118, 122, 123, 127, 130, 133, 135, 147, 148], "structur": [102, 112, 113, 115, 118, 120, 125, 145], "easili": [102, 113, 116, 136], "shyu2003": 102, "md": 102, "z_": [102, 106], "lambda_": 102, "eigenvalu": 102, "But": [102, 122, 162, 163], "give": [102, 111, 120, 122, 140, 155, 156], "final": [102, 104, 106, 108, 111, 112, 115, 117, 118, 120, 122, 123, 130, 131, 135, 164, 165], "among": [102, 104, 112, 119, 162, 163], "mutual": [102, 118], "author": [102, 116], "advantag": [102, 104, 113, 115, 116, 148], "outlin": [102, 126, 129], "iter": [102, 104, 111, 115, 116, 120, 123, 130, 137, 141, 148, 149, 152, 153, 154, 155, 156, 157, 160, 161], "met": 102, "reach": [102, 106, 150, 151], "child": [102, 145, 146, 162, 163], "leav": [102, 146, 150, 151, 152, 153, 162, 163], "behavior": [102, 119, 127], "capabl": [102, 104, 113, 119, 129], "enhanc": [102, 104, 113, 120, 127, 129, 133], "homogen": 102, "after": [102, 106, 113, 119, 120, 128, 130, 132, 136, 137, 138, 139, 141, 155, 156], "further": [102, 104, 118, 122, 128, 131, 132, 135, 136, 140, 164, 165, 166, 167], "known": [102, 113, 119, 120, 121, 125, 129, 137, 162, 163], "adapt": [102, 119, 122], "ramaswamy2000": 102, "angiulli2002": 102, "idea": 102, "fewer": [102, 104, 155, 156], "sort": [102, 104, 129], "ascend": 102, "order": [102, 104, 106, 113, 117, 119, 120, 122, 128, 129, 133, 154, 155, 156, 157, 162], "aggreg": [102, 118, 119, 123, 133, 147], "rational": 102, "behind": 102, "vicin": 102, "analyz": [102, 119, 125, 126, 128, 132, 133], "brief": [102, 113, 120], "overview": [102, 103, 120, 130], "creat": [102, 106, 109, 120, 126, 129, 133, 145, 150, 151, 162, 163], "f_j": 102, "jth": 102, "regular": [102, 113, 117, 118, 119, 120, 127, 144, 150, 151, 155, 156, 158, 159, 160, 161, 164, 165, 166, 167], "prevent": [102, 117, 127, 144], "overflow": [102, 144], "might": [102, 106, 121], "captur": [102, 104, 109, 115, 117, 118, 119, 125, 130], "complex": [102, 104, 110, 115, 116, 117, 120, 121, 122, 127, 129, 133, 162, 163], "advanc": [102, 113, 128], "goldstein2012": 102, "vector": [102, 104, 106, 112, 120, 123, 147, 148, 149, 160, 161], "sch\u00f6lkopf2001": 102, "tradit": 102, "goal": [102, 104, 112, 113, 127, 137], "even": [102, 113, 116, 120, 137, 162, 163], "clearli": 102, "preval": [102, 127], "rare": 102, "exhibit": [102, 120, 125, 127, 129, 130], "care": 102, "kernel": [102, 104, 112, 137, 148, 151, 153, 156, 161, 163, 165, 167], "achiev": [102, 111, 118, 120, 122, 125, 128, 130, 137, 155, 156], "optim": [102, 113, 122, 125, 134, 141, 144, 147, 148, 150, 151, 155, 156, 164, 165, 185], "choic": [102, 113, 119, 120, 141], "radial": 102, "basi": 102, "polynomi": [102, 117, 148], "underli": [102, 130, 132, 162, 163], "ocsvm": 102, "parametr": [102, 104, 117], "context": [102, 110, 112, 121, 123, 125, 126, 128, 137, 141, 145, 148], "leverag": [102, 126], "skew": [102, 130], "dimens": [102, 133, 146, 148, 149, 150, 151], "cdf": [102, 104, 143], "complement": [102, 108, 110, 132], "s_l": 102, "s_r": 102, "public": 102, "li2021": 102, "subsect": [102, 136], "briefli": [102, 117, 120], "decid": [102, 141, 144, 147, 169], "red": [102, 112, 116, 128, 129, 133], "highlight": [102, 104, 121, 127, 129], "sne": [102, 141], "worth": [102, 112, 116], "purpos": [102, 104, 106, 110, 112, 113, 119, 123, 128, 129, 133, 136], "meaning": [102, 125, 128], "mention": [102, 113], "notic": [102, 125, 129, 145], "fei": 102, "toni": 102, "liu": [102, 104], "kai": 102, "ming": 102, "ting": 102, "zhi": 102, "hua": 102, "zhou": 102, "2008": [102, 107], "eighth": 102, "ieee": [102, 113], "intern": [102, 113, 160, 161, 162, 163], "confer": [102, 113], "mine": [102, 113], "pisa": 102, "itali": 102, "pp": [102, 104, 113], "doi": [102, 113], "1109": 102, "icdm": 102, "zengyou": 102, "he": [102, 113], "xiaofei": 102, "xu": 102, "shengchun": 102, "deng": 102, "2003": 102, "discov": 102, "recognit": [102, 113], "letter": 102, "1641": 102, "1650": 102, "mei": 102, "ling": [102, 104], "shyu": 102, "shu": 102, "ching": 102, "chen": [102, 113], "kanoksri": 102, "sarinnapakorn": 102, "liwu": 102, "novel": 102, "miami": 102, "univ": 102, "coral": 102, "gabl": 102, "fl": 102, "dept": 102, "electr": 102, "engin": [102, 113], "sridhar": 102, "ramaswami": 102, "rajeev": 102, "rastogi": 102, "kyuseok": 102, "shim": 102, "acm": [102, 104, 113], "sigmod": 102, "427": 102, "438": 102, "fabrizio": 102, "angiulli": 102, "clara": 102, "pizzuti": 102, "2002": 102, "fast": [102, 104, 113, 114, 115, 118, 120, 141, 152, 153, 185], "principl": 102, "knowledg": [102, 113], "discoveri": [102, 104, 113], "6th": 102, "european": 102, "pkdd": 102, "helsinki": 102, "finland": 102, "august": 102, "proceed": [102, 113], "marku": 102, "goldstein": [102, 108], "andrea": 102, "dengel": 102, "2012": [102, 104], "unsupervis": [102, 129, 133, 143, 144, 146], "ki": [102, 113], "poster": 102, "track": [102, 113], "bernhard": [102, 104], "sch\u00f6lkopf": 102, "john": [102, 119], "c": [102, 108, 110, 120, 130, 139, 148], "platt": 102, "shaw": 102, "taylor": 102, "alexand": [102, 113], "smola": 102, "2001": [102, 111, 113], "neural": [102, 113, 114, 117, 118, 128, 137, 185], "1443": 102, "1471": 102, "zheng": 102, "li": [102, 104, 113, 123], "yue": 102, "zhao": 102, "xiyang": 102, "hu": 102, "nicola": 102, "botta": 102, "cezar": 102, "ionescu": 102, "georg": 102, "2021": [102, 113], "arxiv": [102, 104, 112, 113], "2201": [102, 113], "00382": 102, "meta": [103, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "enabl": [103, 113, 121, 122, 127, 137, 145, 148, 149], "panel": [103, 113], "regard": [103, 113, 128, 132, 133], "n_miss": 103, "q1": 103, "quartil": 103, "q3": 103, "n_uniqu": 103, "top1": 103, "highest": [103, 106, 112, 129, 130], "top2": 103, "top3": 103, "n_other": 103, "5378": 103, "5468": 103, "9144": 103, "4970": 103, "1926": 103, "0200": 103, "3400": 103, "6600": 103, "4758": 103, "1719": 103, "4848": 103, "6212": 103, "6272": 103, "4800": 103, "6300": 103, "7800": 103, "1901": 103, "1223": 103, "1940": 103, "2537": 103, "8507": 103, "189": 103, "4631": 103, "181": 103, "3876": 103, "142": 103, "281": 103, "977": 103, "4496": 103, "4409": 103, "4242": 103, "4232": 103, "8645": 103, "16879": 103, "11865": 103, "5514": 103, "11413": 103, "4544": 103, "1419": 103, "sole": [103, 112, 125, 131, 133, 137], "avail": [103, 108, 110, 112, 113, 122, 126, 127, 128, 129, 130, 132, 133, 137, 141, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "2512": 103, "2502": 103, "2487": 103, "9878": 103, "relev": [104, 106, 107, 108, 110, 119, 121, 128, 137, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "help": [104, 110, 112, 117, 119, 120, 122, 125, 132, 133, 150, 151], "avoid": [104, 119, 120, 155, 156, 160, 161], "moreov": [104, 106, 112, 129, 132, 133], "benefici": 104, "distinguish": [104, 116, 118, 125, 128, 133, 141, 177, 178, 179, 180], "treatment": 104, "rigor": 104, "mathemat": [104, 113], "rho_": 104, "x_i": 104, "y_i": 104, "sign": [104, 127], "magnitud": [104, 113, 119, 125, 130], "straightforward": [104, 109, 110], "blue": [104, 112, 116], "orang": 104, "posit": [104, 115, 117, 118, 119, 120, 123, 125, 126, 141, 154, 155, 156, 157, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "neg": [104, 106, 111, 115, 117, 118, 119, 122, 123, 125, 148, 150, 151, 153, 154, 156, 157, 158, 159, 161, 162, 163, 165, 167], "bottom": [104, 109, 115, 117, 118, 122], "text": 104, "easi": [104, 113, 121, 122, 141, 177, 178, 179, 180], "One": [104, 113, 139], "deal": [104, 133, 144, 155, 156, 160, 161], "r_": 104, "r": [104, 113, 120, 125, 126, 130, 133, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "d_i": 104, "them": [104, 116, 117, 122, 127, 133, 135, 162, 163], "occur": [104, 123, 127, 130, 150, 151], "replac": [104, 112, 126, 145], "pair": [104, 123, 126, 150, 151, 155, 156, 162], "a_": 104, "x_j": [104, 107, 115, 119], "x_k": [104, 107], "quad": 104, "ldot": [104, 112, 117, 119, 120, 128, 129], "b_": 104, "y_j": 104, "y_k": 104, "matric": [104, 142, 143, 144, 145, 146, 147, 148, 149], "cdot": [104, 119, 125], "arithmet": 104, "product": [104, 155, 156], "dcov": 104, "dvar": 104, "operatornam": 104, "alwai": [104, 117, 125, 127, 141, 151, 153, 156, 161, 162, 163, 165, 167], "computation": [104, 137], "expens": [104, 137, 141], "scalabl": [104, 155, 156], "big": 104, "downsampl": [104, 112], "instal": [104, 113], "compos": 104, "descend": [104, 120, 129], "pre": [104, 112, 113], "stabl": [104, 117, 119, 122, 149], "inspect": [104, 113, 162, 163], "permutation_import": [104, 111, 162, 163], "percentag": [104, 149, 150, 151], "concern": [104, 132], "ii": 104, "iii": 104, "underfit": [104, 113, 115], "minim": [104, 125, 130, 141, 162, 163, 171, 181], "power": [104, 113, 120, 121, 122, 132, 149, 151], "probabilist": [104, 125, 128], "incorpor": [104, 118, 128, 129, 137], "z": [104, 112, 120, 123], "perp": 104, "kcit": 104, "zhang2012": 104, "strobl2019": 104, "approxim": [104, 110, 112, 113, 115, 116, 118, 122, 125, 127, 133], "fourier": [104, 141], "reproduc": [104, 141, 145], "hibert": 104, "therefor": [104, 106, 109, 112, 119, 120, 129, 141], "hypothesi": 104, "equival": [104, 120, 123, 145, 147], "cross": [104, 125, 137, 141], "sigma_": 104, "sigma": [104, 120], "_f": 104, "asymptot": 104, "lambda_i": 104, "z_i": 104, "lindsai": 104, "pilla": 104, "basak": 104, "lpb": 104, "lindsayl2000": 104, "finit": 104, "borboudakis2019": 104, "delet": 104, "insignific": 104, "predefin": [104, 128, 137], "candid": [104, 118, 133, 137], "p_valu": 104, "stop": [104, 113, 116, 141, 148, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163], "phase": [104, 160, 161], "recommend": [104, 120], "yu2020": 104, "twice": 104, "temporarili": 104, "temporari": 104, "perman": 104, "formul": [104, 113, 114], "smaller": [104, 116, 120, 121, 122, 125, 128, 129, 130, 133, 137, 141, 155, 156, 162, 163], "procedur": [104, 122], "seven": 104, "deep": [104, 113, 116, 120, 121, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 177, 178, 179, 180], "causal": [104, 128], "disadvantag": 104, "sequenti": [104, 155, 156], "kun": 104, "zhang": [104, 113], "jona": 104, "peter": [104, 113, 119], "dominik": 104, "janz": 104, "schoelkopf": 104, "preprint": [104, 112, 113], "1202": 104, "3775": 104, "eric": 104, "strobl": 104, "shyam": 104, "visweswaran": 104, "2019": [104, 113], "journal": [104, 108, 113], "infer": [104, 122, 155, 156, 160, 161, 162, 163], "bruce": 104, "ramani": 104, "prasanta": 104, "moment": [104, 112], "theori": 104, "annal": [104, 107, 113], "institut": 104, "230": 104, "giorgo": 104, "borboudaki": 104, "ioanni": 104, "tsamardino": 104, "research": [104, 113, 115], "276": 104, "314": 104, "kui": 104, "yu": [104, 113], "xianji": 104, "guo": 104, "lin": 104, "jiuyong": 104, "hao": [104, 113], "wang": [104, 113], "zhaolong": 104, "xindong": 104, "wu": [104, 113], "2020": [104, 113], "survei": 104, "csur": 104, "53": 104, "apley2016": [106, 113], "Its": [106, 125, 128], "bias": [106, 120, 126, 133], "overcom": 106, "quicker": 106, "unbias": 106, "definit": [106, 115, 118, 120, 128], "uncent": [106, 109, 119], "k_": 106, "textbf": [106, 115, 116, 117, 118, 119, 120, 122, 123], "tag": [106, 107, 110, 112, 115, 116, 117, 118, 119, 120, 122, 123, 125], "faster": [106, 110, 115, 116], "accur": [106, 113, 121, 122, 125, 133], "curv": [106, 125, 128, 129, 130, 133], "down": [106, 112], "paper": [106, 113], "pyal": 106, "strongli": 106, "That": [106, 129, 162, 163], "becaus": [106, 109, 119, 122, 125, 130, 151, 153, 156, 161, 163, 165, 167], "extrapol": [106, 110], "beyond": [106, 113], "envelop": [106, 110], "move": 106, "response_method": [106, 107, 108, 110, 141], "odd": [106, 107, 108, 110, 119, 141], "decision_funct": [106, 107, 108, 110, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 160, 164, 166], "peak": [106, 115, 118, 123, 125], "rush": [106, 115, 118, 125, 128], "hour": [106, 115, 118, 119, 123, 125, 128], "around": [106, 108, 115, 118, 123, 125, 129, 133], "draw": [106, 112, 115, 116, 118, 122, 123, 128, 129, 141, 145, 146], "light": 106, "rain": 106, "etc": [106, 122], "heavi": 106, "technic": 106, "subtract": [106, 109, 119, 123, 141], "lighter": 106, "shade": [106, 116], "darker": [106, 116], "quit": [106, 115, 122, 123], "mind": 106, "friedman2008": 107, "h_": [107, 115, 118, 122, 123], "d_j": 107, "d_k": 107, "pd_": 107, "jk": [107, 115, 118, 123], "stronger": [107, 154, 157], "kj": 107, "jerom": [107, 113], "bogdan": 107, "popescu": 107, "rule": [107, 121, 146, 152, 153], "916": 107, "954": 107, "alex2015": 108, "focu": [108, 119, 127, 129, 133], "document": [108, 111, 129, 132], "exist": [108, 113, 115, 116, 118, 119, 123, 125, 133, 141, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "global_ic": 108, "snippet": 108, "produc": [108, 132, 145], "constant": [108, 115, 117, 119, 122, 123, 125, 148, 151, 153, 156, 161, 163, 165, 167], "examin": [108, 125, 128, 132, 137], "our": [108, 109, 111, 113, 116, 127, 129, 133, 145], "apart": 108, "period": [108, 128], "alex": 108, "adam": [108, 155, 156], "kapeln": 108, "justin": 108, "bleich": 108, "emil": 108, "pitkin": 108, "2015": [108, 113, 128], "ribeiro2016": [109, 113], "surrog": [109, 112, 129, 132, 141, 177, 178, 179, 180], "lasso": [109, 113, 119, 159], "proxim": 109, "greatli": [109, 112], "judgment": 109, "sens": 109, "test_sample_s": [109, 112], "train_sample_s": [109, 112], "stem": [109, 120], "crucial": [109, 121, 125, 127, 128, 129, 132, 137], "itself": [109, 119], "unchang": [109, 111, 119, 130, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "essenti": [109, 119, 125, 126, 132, 133], "rather": [109, 119], "becom": [109, 112, 113, 116, 117, 119, 125, 129, 130, 132, 133], "neglig": [109, 119], "am": [109, 115, 118], "now": [109, 119, 127, 136], "mainli": [109, 119], "intercept": [109, 116, 119, 120, 122, 123, 150, 151, 152, 153, 159, 164, 165], "friedman2001": [110, 113], "suppos": [110, 112, 162], "x_c": 110, "mathbb": [110, 115, 116, 117, 118, 119, 120, 122, 123], "dx_": 110, "brute": [110, 137, 147], "partial_depend": [110, 150, 151, 154, 155, 156, 157, 164, 165, 166, 167], "few": [110, 122], "inaccur": 110, "inconsist": [110, 122], "accomplish": [110, 128], "trigger": [110, 119, 120, 122, 132, 150, 151, 152, 153, 155, 156], "tend": [110, 113, 117, 120, 123, 129], "substanti": 110, "4th": 110, "joint": 110, "daytim": 110, "nighttim": 110, "loss": [111, 116, 122, 125, 131, 133, 141, 155, 156, 160, 161, 163, 164, 165, 166, 167, 176, 177, 178, 179, 180], "l2001": 111, "shuffl": [111, 141], "broken": 111, "drop": [111, 119, 130, 133, 150], "relianc": 111, "fulli": [111, 113], "either": [111, 113, 115, 116, 121, 123, 125, 128, 141, 150, 151, 162, 163], "futur": [111, 136, 138, 185], "releas": 111, "truncat": [111, 149], "site": 111, "repetit": [111, 130, 141], "appear": [111, 122, 125], "seem": [111, 112], "surpris": 111, "breiman": 111, "forest": [111, 137, 145], "lundberg2017": [112, 113], "lundberg2018": 112, "concept": 112, "sport": 112, "analogi": 112, "won": 112, "soccer": 112, "game": 112, "winner": 112, "bonu": 112, "fairli": 112, "team": 112, "member": 112, "know": [112, 119, 162, 163], "five": 112, "player": 112, "who": 112, "plai": 112, "victori": 112, "recogn": [112, 127], "come": [112, 113, 150, 151], "success": [112, 120, 150, 151], "imlbook": 112, "shapblog": 112, "possess": 112, "attract": 112, "missing": 112, "decompos": [112, 123], "prime": 112, "phi_0": 112, "phi_j": 112, "z_j": 112, "coalit": 112, "off": [112, 120, 125, 126, 137, 141, 146, 150, 151], "phi_": 112, "shap_": 112, "subseteq": 112, "backslash": 112, "val": 112, "cup": 112, "factor": [112, 122, 129, 133, 142], "accept": [112, 142, 143, 144, 145, 146, 147, 148, 149], "problemat": 112, "affect": [112, 119, 130, 133, 147], "common": [112, 117, 119, 131, 137], "background": 112, "mere": [112, 128], "challeng": [112, 125], "latter": [112, 130, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "break": 112, "interven": 112, "intervent": 112, "inspir": 112, "ignor": [112, 127, 133, 139, 141, 148, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "put": [112, 138, 150, 151], "guarante": [112, 128], "lot": 112, "linearshap": 112, "treeshap": 112, "paragraph": 112, "benefit": 112, "math": 112, "coef": 112, "leaf": [112, 116, 122, 123, 146, 147, 152, 153, 162, 163, 164, 165, 166, 167], "went": 112, "exactli": [112, 117, 122, 150, 151], "bit": 112, "slower": [112, 116], "ll": 112, "i_j": 112, "consum": 112, "place": 112, "had": 112, "greatest": 112, "pdf": 112, "spap": 112, "lundberg": [112, 113], "scott": [112, 113], "gabriel": 112, "erion": 112, "su": [112, 113], "lee": [112, 113], "1802": 112, "03888": 112, "pi": [113, 120], "pai": 113, "em": 113, "el": 113, "access": 113, "grow": [113, 116, 162, 163], "mlop": 113, "platform": [113, 139], "assur": 113, "bank": 113, "project": 113, "supervis": [113, 133], "increasingli": 113, "domain": 113, "lack": 113, "difficult": 113, "emerg": 113, "pedregosa2011": 113, "kokhlikyan2020": 113, "klaise2021": 113, "baniecki2021": 113, "li2022": 113, "black": [113, 115, 120, 123, 138], "pitfal": 113, "rudin2019": 113, "molnar2020": 113, "yang2021a": 113, "yang2021b": [113, 118], "sudjianto2020": [113, 120], "interpretml": 113, "nori2013": [113, 115], "microsoft": [113, 115], "promot": [113, 126], "boost": [113, 114, 116, 122, 136, 141, 150, 151, 164, 165, 166, 167, 185], "ga2m": 113, "lou2013": [113, 115], "sudjianto2021": 113, "discuss": [113, 125, 130], "meantim": 113, "chung2019": 113, "pycaret": 113, "tensorflow": 113, "finra": 113, "toolkit": 113, "Such": [113, 120, 130], "sometim": [113, 149], "demand": [113, 125], "risk": [113, 122], "manag": [113, 141], "routin": [113, 148], "exercis": 113, "conceptu": 113, "sound": 113, "angl": 113, "been": [113, 116, 117, 120, 121, 135], "launch": 113, "2022": 113, "interfac": [113, 141], "widget": 113, "dashboard": 113, "lab": 113, "parameter": 113, "action": 113, "termin": [113, 145, 163], "autom": [113, 149], "registr": [113, 141], "mandatori": 113, "unifi": 113, "glass": 113, "section_3": 113, "section_4": 113, "cover": [113, 131], "treat": [113, 129], "though": 113, "simplif": 113, "worthwhil": 113, "enough": [113, 120, 140], "simplic": 113, "v0": 113, "latest": 113, "updat": [113, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "ell_1": 113, "ell_2": 113, "hastie2015": 113, "spline": [113, 117, 122, 154, 155, 156, 157], "serven2018": 113, "greedi": [113, 114, 141, 150, 151, 152, 153, 185], "tan2022": [113, 116], "extrem": [113, 116, 120], "gradient": [113, 115, 120, 136, 164, 165, 166, 167], "chen2015": 113, "guillermo2020": 113, "purifi": [113, 123], "lengerich2020": [113, 122, 123], "network": [113, 114, 117, 118, 137, 155, 156, 160, 161, 185], "aletheia": [113, 120, 160, 161], "unwrapp": [113, 160, 161], "sparsif": 113, "popular": [113, 119, 125], "quantif": 113, "conform": [113, 128, 141, 172, 173, 174, 175, 176], "cui2023": 113, "out": [113, 120, 122, 129, 133, 137, 155, 156, 160, 161], "de": [113, 120], "art": 113, "expand": [113, 162, 163], "report": 113, "fabian": 113, "pedregosa": 113, "ga\u00ebl": 113, "varoquaux": 113, "alexandr": 113, "gramfort": 113, "vincent": 113, "michel": 113, "bertrand": 113, "thirion": 113, "olivi": 113, "grisel": 113, "mathieu": 113, "blondel": 113, "prettenhof": 113, "ron": 113, "weiss": 113, "dubourg": 113, "jake": 113, "vanderpla": 113, "passo": 113, "david": 113, "cournapeau": 113, "matthieu": 113, "brucher": 113, "perrot": 113, "\u00e9douard": 113, "duchesnai": 113, "2011": 113, "2825": 113, "2830": 113, "narin": 113, "kokhlikyan": 113, "vivek": 113, "miglani": 113, "miguel": 113, "martin": 113, "edward": 113, "bilal": 113, "alsallakh": 113, "jonathan": 113, "reynold": 113, "melnikov": 113, "natalia": 113, "kliushkina": 113, "carlo": 113, "araya": 113, "siqi": 113, "yan": 113, "orion": 113, "reblitz": 113, "richardson": 113, "captum": 113, "librari": [113, 128], "pytorch": [113, 160, 161], "2009": 113, "07896": 113, "jani": 113, "klais": 113, "arnaud": 113, "van": 113, "looveren": 113, "giovanni": 113, "vacanti": 113, "alexandru": 113, "coca": 113, "alibi": 113, "8194": 113, "hubert": 113, "baniecki": 113, "wojciech": 113, "kretowicz": 113, "piotr": 113, "piatyszek": 113, "jakub": 113, "wisniewski": 113, "przemyslaw": 113, "biecek": 113, "dalex": 113, "9759": 113, "9765": 113, "xuhong": 113, "haoyi": 113, "xiong": 113, "xingjian": 113, "xuanyu": 113, "zeyu": 113, "deje": 113, "dou": 113, "interpretdl": 113, "paddlepaddl": 113, "cynthia": 113, "rudin": 113, "stake": 113, "natur": [113, 133, 147], "ntellig": 113, "206": 113, "christoph": 113, "molnar": 113, "gunnar": 113, "k\u00f6nig": 113, "julia": 113, "herbing": 113, "timo": 113, "freiesleben": 113, "susann": 113, "dandl": 113, "christian": 113, "scholbeck": 113, "giusepp": 113, "casalicchio": 113, "moritz": 113, "gross": 113, "wentrup": 113, "bernd": 113, "bischl": 113, "xxai": 113, "workshop": 113, "held": 113, "conjunct": [113, 129], "icml": 113, "juli": 113, "vienna": 113, "austria": 113, "revis": 113, "extend": [113, 116], "cham": 113, "springer": 113, "publish": 113, "harsha": 113, "nori": 113, "samuel": 113, "jenkin": 113, "paul": 113, "koch": 113, "rich": 113, "caruana": 113, "framework": [113, 128], "1909": 113, "09223": 113, "yin": 113, "lou": 113, "johann": 113, "gehrk": 113, "gile": 113, "hooker": 113, "2013": 113, "intellig": 113, "19th": 113, "sigkdd": 113, "623": 113, "631": 113, "agu": 113, "sudjianto": 113, "aijun": 113, "2111": 113, "01743": 113, "yeounoh": 113, "chung": 113, "tim": 113, "kraska": 113, "neokli": 113, "polyzoti": 113, "hyun": 113, "tae": 113, "steven": 113, "euijong": 113, "whang": 113, "finder": 113, "35th": 113, "icd": 113, "1550": 113, "1553": 113, "daniel": 113, "aplei": 113, "jingyu": 113, "zhu": 113, "2016": 113, "royal": 113, "societi": 113, "seri": 113, "82": [113, 130, 133], "1086": 113, "marco": 113, "tulio": 113, "ribeiro": 113, "sameer": 113, "singh": 113, "guestrin": 113, "why": [113, 122], "22nd": 113, "2017": 113, "trevor": 113, "hasti": 113, "robert": 113, "tibshirani": 113, "wainwright": 113, "sparsiti": [113, 118, 146, 149], "crc": 113, "press": 113, "1189": 113, "1232": 113, "serv\u00e9n": 113, "charli": 113, "brummitt": 113, "pygam": [113, 117, 139, 154, 157], "zenodo": 113, "5281": 113, "1208723": 113, "shuo": 113, "tan": 113, "chandan": 113, "keyan": 113, "nasseri": 113, "abhineet": 113, "agarw": 113, "11931": 113, "benjamin": 113, "lengerich": 113, "sarah": 113, "chun": 113, "june": 113, "anova": [113, 123, 150, 151, 154, 155, 156, 157, 164, 165, 166, 167], "recov": 113, "artifici": 113, "2402": 113, "2412": 113, "pmlr": 113, "tianqi": 113, "tong": 113, "william": 113, "knauth": 113, "rahul": 113, "zebin": 113, "yang": 113, "unwrap": [113, 120], "04041": 113, "shiji": 113, "cui": 113, "runz": 113, "hot": [113, 119, 122], "2304": 113, "13761": 113, "architectur": [113, 155, 156], "constraint": [48, 52, 76, 81, 82, 113, 118, 119, 123, 133, 141, 152, 153, 155, 156, 164, 165, 166, 167, 183], "transact": 113, "2610": 113, "2621": 113, "108192": 113, "nava": 113, "palencia": 113, "guillermo": 113, "08025": 113, "additon": 135, "write": [25, 135], "arrai": [131, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "build": [76, 81, 82, 136, 141, 144, 145, 155, 166, 183], "gbm_model": [23, 136], "abl": [116, 117, 136, 138], "rate": [115, 120, 125, 126, 137, 141, 150, 151, 152, 153, 155, 156, 160, 161, 164, 165, 166, 167, 172, 173, 174, 175, 176], "batch": [137, 155, 156, 160, 161], "hidden": [118, 120, 137, 155, 156, 160, 161], "layer": [118, 120, 137, 155, 156, 160, 161], "maxim": [125, 137], "forc": [137, 147], "gridsearchcv": 137, "often": [121, 137], "yield": [130, 137, 141, 149], "randomizedsearchcv": 137, "dictat": [137, 150, 151], "rbf": [137, 148], "linspac": 137, "cv": [137, 141], "fold": [137, 141], "integ": [116, 137, 141, 145, 150, 151, 162, 163], "alloc": 137, "absenc": 137, "invok": 137, "constitut": 137, "upon": [120, 125, 137], "proce": [123, 130, 137], "965160": 137, "432415": 137, "303924": 137, "095008": 137, "485461": 137, "885018": 137, "912729": 137, "948782": 137, "801720": 137, "921155": 137, "negat": 137, "simpler": [117, 120, 122, 137], "retriev": [137, 141], "refin": [129, 137], "pickl": [138, 141], "don": [138, 162, 163], "lgbm7": 138, "lgbm_7": 138, "mu": [115, 116, 117, 118, 119, 122, 123], "limits_": [115, 118, 122, 123], "f_": [115, 116, 117, 118, 123], "shallow": [115, 121], "round": [115, 130, 150, 151], "fashion": [115, 162, 163], "cut": [115, 141, 150, 151], "pick": [115, 141], "converg": [115, 120, 123, 154, 157], "piecewis": [115, 117, 118, 122, 123], "sacrific": [115, 122, 126], "256": [115, 145, 150, 151, 164, 165, 166, 167], "togeth": [115, 117, 118, 119, 120, 155, 156], "pm": [115, 118], "somehow": [115, 122], "night": 115, "spring": 115, "domin": [115, 123], "titl": [115, 116, 118, 122, 123], "0818": 115, "almost": 115, "recent": [116, 139], "cart": 116, "f_k": 116, "mathbf": 116, "manner": [116, 129, 141], "pseudo": [116, 141, 145], "express": [116, 117, 120, 123, 155, 156], "form": [116, 119, 120, 121, 123, 125, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "whichev": 116, "imodel": [116, 152, 153], "unlimit": [116, 162, 163], "criteria": [116, 129, 162, 163], "hardli": 116, "complic": [116, 120], "gain": [116, 125, 127, 129, 162], "along": [116, 125, 130, 133], "hierarch": 116, "dendrogram": 116, "subplot": [116, 120, 125], "middl": [116, 125], "deeper": [116, 128], "rightmost": 116, "convei": 116, "decision_tre": 116, "099": 116, "094": 116, "primari": [117, 151], "equat": [117, 120, 162, 163], "unknown": 117, "smooth": [117, 118, 125, 150, 151, 152, 153, 154, 157, 162, 163], "varieti": 117, "degre": [117, 127, 144, 148], "quadrat": 117, "cubic": 117, "knot": 117, "anchor": 117, "With": [117, 119, 122, 129], "poorer": [117, 129], "penalti": [117, 119, 120, 154, 157], "encourag": 117, "generaliz": 117, "smoother": 117, "rougher": 117, "slope": 117, "flat": 117, "steep": 117, "sharp": 117, "incom": 117, "area": [117, 125, 126, 127, 129, 130, 133], "_j": [117, 122], "strongest": 117, "drive": 117, "3804": 117, "reformul": 118, "disentangl": [118, 120], "feedforward": [118, 120], "subnetwork": [118, 155, 156], "parsimoni": [118, 123], "hered": [118, 155, 156], "least": [118, 120, 122, 152, 153, 159, 162, 163], "parent": 118, "clariti": [118, 132, 155, 156], "purif": [118, 123], "constrain": [47, 118, 122, 125], "decreas": [118, 122, 129, 152, 153, 155, 156, 162, 163, 164, 165, 166, 167], "impos": [118, 155, 156, 160, 161], "gaminet": 118, "prune": [118, 123, 155, 156, 162, 163], "trivial": [118, 120, 123], "retrain": 118, "simultan": 118, "fine": [118, 155, 156], "activ": [118, 120, 123, 155, 156, 160, 161], "saturdai": 118, "sundai": 118, "mondai": 118, "fridai": 118, "compon": [118, 120, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "literatur": 119, "reader": 119, "consult": 119, "mccullagh1989": 119, "w_1": 119, "x_1": 119, "w_2": 119, "x_2": 119, "w_d": 119, "x_d": 119, "logit": [119, 150, 166], "l2": [119, 147, 158, 159, 163, 164, 165, 166, 167], "penal": [119, 120, 155, 156], "shrink": [119, 120, 148], "toward": [119, 120], "spars": [119, 142, 143, 144, 145, 146, 147, 148, 149, 162, 163], "shrunk": 119, "variant": [119, 122], "linear_model": 119, "linearregress": 119, "ridg": [119, 159], "elasticnet": [119, 159], "elast": 119, "logisticregress": 119, "address": [119, 126, 127, 133], "opposit": [119, 148], "temperatur": [119, 123, 131], "humid": 119, "convert": [119, 130, 141, 149, 150, 151, 162, 163], "dummi": 119, "season_1": 119, "season_2": 119, "season_3": 119, "season_4": 119, "overparameter": 119, "fourth": 119, "nonlinear": [119, 120], "print": 119, "screen": [119, 155, 156], "export": 119, "w_j": 119, "absorb": 119, "unstabl": [119, 120, 130], "turn": [119, 122, 141, 150, 151, 155, 156], "mccullagh": 119, "nelder": 119, "1989": 119, "chapman": 119, "hall": 119, "edit": 119, "rectifi": 120, "remark": 120, "appeal": 120, "excel": 120, "intrins": 120, "neuron": 120, "chi": 120, "mbox": 120, "sigmoid": [120, 148, 155, 156], "despit": 120, "said": 120, "equiv": 120, "n_l": 120, "simplifi": [120, 122, 131], "tild": 120, "oper": [120, 121, 128], "tupl": [120, 141, 146, 148, 150, 151, 154, 155, 156, 157, 160, 161, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181], "poor": [120, 127, 129], "1e": [120, 141, 148, 150, 151, 155, 156, 160, 161], "descent": 120, "unpen": 120, "float": [25, 120, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181], "unnecessarili": 120, "wherea": 120, "5153": 120, "105570": 120, "584421": 120, "735054": 120, "static": 120, "wide": 120, "roughli": 120, "vice": [120, 150, 151], "versa": [120, 150, 151], "eleg": 120, "diagon": [120, 125], "decomposit": [120, 122], "uniformli": [120, 155, 156], "sin": 120, "epsilon": 120, "n_featur": [120, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "influenti": 121, "decisiontreeregressor": 121, "criterion": [121, 148, 162, 163], "branch": [121, 145, 152, 153, 162, 163], "restrict": 122, "stump": 122, "stage": [25, 122, 150, 151, 155, 156, 160, 161], "optbin": [122, 139], "woe": 122, "firstli": 122, "arrang": 122, "inherit": [122, 123], "tree_method": [123, 164, 165, 166, 167], "correctli": [122, 125, 148, 150, 152, 155, 160, 162, 164, 166], "max_n_bin": 122, "strike": 122, "difficulti": [122, 129], "fit_method": 122, "iv": 122, "accompani": [122, 129, 133], "trend": [122, 125], "plateau": 122, "geograph": 122, "amplifi": 122, "lontitud": 122, "restructur": 123, "enforc": [123, 154, 157], "feel": 123, "celsiu": 123, "comfort": 123, "outdoor": 123, "cooler": 123, "hotter": 123, "peopl": 123, "willing": 123, "ride": 123, "bicycl": 123, "0606": 123, "summat": 123, "plu": [123, 125], "regardless": 125, "showcas": [125, 132], "ideal": [125, 128], "band": 125, "residual_plot": 125, "wider": 125, "logic": 125, "evenli": 125, "lastli": 125, "_predict": 125, "earlier": 125, "imbalanc": 125, "incorrect": [125, 130, 133], "guess": [125, 149], "harmon": 125, "2tp": 125, "fp": 125, "fn": 125, "diverg": 125, "p_": 125, "scatterplot": 125, "lowess": 125, "match": [125, 139, 141], "tp": 125, "tn": 125, "mislabel": 125, "tpr": 125, "fpr": 125, "closer": 125, "corner": 125, "maintain": 125, "irrelev": 125, "tradeoff": 125, "imparti": 126, "ethnic": 126, "sexual": 126, "orient": 126, "disabl": [126, 141], "subscript": 126, "tp_": 126, "fp_": 126, "fn_": 126, "smd": [126, 141], "binar": [126, 141], "bucket": [126, 132, 141, 177], "granular": 126, "span": 126, "enumer": 126, "dash": 126, "ax": 126, "character": 127, "strong": 127, "allevi": 127, "empow": 127, "promin": 127, "tendenc": 127, "warn": [127, 133, 148, 162, 163], "messag": [127, 133, 139], "emphasi": 127, "7am": 127, "9am": 127, "0171": 127, "0156": 127, "exce": [127, 128], "insuffici": [127, 133], "confid": 128, "crqr": 128, "interchang": 128, "epsilon_": 128, "s_": 128, "histgradientboostingregressor": 128, "gbdt": 128, "delv": 128, "clarifi": 128, "whose": 128, "wise": [128, 149], "233": 128, "2563": 128, "establish": 128, "notion": 128, "yet": [], "matur": [], "isoton": 128, "analog": 128, "sustain": 129, "face": 129, "verifi": 129, "unexpect": [129, 130], "facilit": [129, 132], "At": 129, "divers": 129, "likelihood": 129, "sophist": 129, "harder": 129, "inde": 129, "poorest": 129, "increment": 129, "hover": 129, "interestingli": [], "gradual": [], "declin": [], "plausibl": [], "outperform": [], "fluctuat": 129, "variat": [129, 130], "thought": 129, "recalcul": 129, "moder": 129, "encount": 130, "noisi": 130, "delta": [130, 150, 151], "ten": 130, "throughout": 130, "forthcom": 130, "lambda": [130, 160, 161], "var": [130, 148], "invalid": 130, "tail": 130, "solv": 130, "nearest": [130, 147], "back": 130, "kept": [130, 149], "were": 130, "previous": 130, "wors": [130, 151, 153, 156, 161, 163, 165, 167], "poorli": 130, "absent": 131, "necessit": 131, "convent": 131, "prefix": 131, "test_reliability_t": 131, "consolid": 131, "pass": [131, 141, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167], "caus": 132, "underperform": [132, 133], "analys": 132, "filter": [132, 133], "quickli": 132, "018380": [72, 132], "014116": [72, 132], "013335": [72, 132], "013161": [72, 132], "012643": [72, 132], "011245": [72, 132], "011149": [72, 132], "010764": [72, 132], "010634": [72, 132], "010363": [72, 132], "weakest": 132, "test_accuraci": 132, "0692": 132, "8144": 132, "0089": 132, "0721": 132, "8018": 132, "nevertheless": 132, "instrument": 132, "comprehend": 132, "undefin": 132, "twosample_test": 132, "reason": 132, "prone": 133, "aris": 133, "inadequ": 133, "unsuit": 133, "suffici": 133, "merg": 133, "min_samples_leaf": [133, 146, 150, 151, 152, 153, 162, 163], "accordingli": 133, "simpli": 133, "723": 133, "boolean": [133, 152, 153], "annot": 133, "test_metr": 133, "train_metr": 133, "sai": 133, "retain": [133, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "o": [25, 139], "py37": 139, "py38": 139, "py39": 139, "py310": 139, "win": 139, "linux": 139, "maco": 139, "mac": 139, "m1": 139, "pip": 139, "cmake": 139, "conda": 139, "ipykernel": 139, "ipywidget": 139, "joblib": [139, 141, 145, 150, 151], "ipython": 139, "matplotlib": 139, "seaborn": 139, "xlrd": 139, "torch": [139, 155, 156], "natsort": 139, "psutil": 139, "dill": 139, "ortool": 139, "momentchi2": 139, "got": 139, "upgrad": 139, "reinstal": 139, "forg": 139, "runtimeerror": 139, "traceback": 139, "compil": 139, "0x10": 139, "0xf": 139, "restart": 139, "runtim": [139, 141, 145, 148], "guidelin": 140, "bool": [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 181], "css": 141, "ingest": 141, "look": [141, 162, 163], "union": [141, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "unicod": [141, 150, 151], "dict": [141, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "reset": 141, "preview": 141, "mi": 141, "n_samples_train": [141, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "n_samples_test": [141, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "score_distribut": 141, "marginal_outlier_distribut": 141, "multi_featur": 141, "forward": 141, "backward": 141, "earli": [141, 150, 151, 152, 153, 155, 156, 160, 161], "fbedk": 141, "ndarrai": [141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "n_sampl": [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "Not": [141, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "get_interpretable_model_list": 141, "get_leaderboard": 141, "model_nam": 141, "get_leaderboard_regist": 141, "modelpipelin": 141, "get_model_config": 141, "get_model_list": 141, "get_raw_data": 141, "datatupl": 141, "train_sample_weight": 141, "test_sample_weight": 141, "fit_func": 141, "excluded_featur": 141, "normalize_strategi": 141, "encode_strategi": 141, "rais": [141, 148, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "callabl": [141, 146, 147, 148], "receiv": 141, "one_hot": 141, "_estimator_typ": 141, "minmax": 141, "unit_norm": 141, "regressor": [141, 151, 153, 156, 157, 159, 161, 163, 165, 167], "insid": [141, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 173], "testresult": 141, "tri": 141, "revert": 141, "metric_threshold": 141, "favorable_class": 141, "thresholding_bin": 141, "by_weight": 141, "rsmd": 141, "categorical_feature_nam": 141, "useless": 141, "savedmodel": 141, "get_all_supported_model": 141, "exhaust": 141, "solut": [141, 145], "kfold": 141, "splitter": [141, 152, 153, 162, 163], "multiclass": [141, 150], "stratifiedkfold": 141, "instanti": 141, "job": [141, 143, 145, 147, 150, 151], "parallel_backend": [141, 145], "processor": [141, 145, 147], "glossari": 141, "slice_bin": 141, "weaskspot": 141, "clustering_method": 142, "clustering_threshold": 142, "use_weight": 142, "gmm": 142, "base_estimator_": [142, 145], "is_fitted_": [142, 146, 155, 156, 160, 161, 164, 165, 166, 167], "cluster_centers_": 142, "cluster_sizes_": 142, "small_cluster_labels_": 142, "large_cluster_labels_": 142, "detector": [142, 143, 144, 145, 146, 147, 148, 149], "outlier_scor": [142, 143, 144, 145, 146, 147, 148, 149], "outlier_ind": [142, 143, 144, 145, 146, 147, 148, 149], "pyod": [143, 144], "free": 143, "core": [143, 155, 156], "n_bin": 144, "tol": [144, 148, 149], "outlying": 144, "birg": 144, "rozenblac": 144, "max_sampl": 145, "max_featur": [145, 162, 163], "bootstrap": 145, "warm_start": [145, 155, 156], "isol": 145, "n_features_in_": [145, 146, 148, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "randomst": [145, 162, 163], "reus": 145, "estimator_": 145, "extratreeregressor": 145, "templat": 145, "sub": [145, 150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "estimators_": 145, "estimators_features_": 145, "drawn": 145, "estimators_samples_": 145, "bag": [145, 150, 151], "max_samples_": 145, "offset_": [145, 148], "offset": [145, 148], "score_sampl": [145, 148], "contamin": 145, "inlier": 145, "seen": [145, 148], "feature_names_in_": [145, 148, 150, 151], "n_compon": [146, 149], "d_reduction_method": [146, 149], "min_dist": 146, "distance_measur": 146, "reconsterr": 146, "distance_measure_param": 146, "sparsepca": 146, "sparse_pca": 146, "n_samples1": 146, "n_samples2": 146, "tree_": [146, 162, 163], "node_count_": 146, "leaf_idx_list_": 146, "calculate_spca": 146, "dist": 146, "decision_path": [146, 162, 163], "path_al": 146, "node_count": [146, 162, 163], "get_metadata_rout": [146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "metadata": [146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "rout": [146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "metadatarequest": [146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "encapsul": [146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "get_param": [146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "subobject": [146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "map": [146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "get_rul": 146, "node_id": 146, "inequ": 146, "plot_tre": 146, "draw_depth": 146, "start_node_id": 146, "predict_leaf_id": 146, "set_param": [146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "nest": [146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "__": [146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "self": [146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167], "n_neighbor": 147, "radiu": 147, "leaf_siz": 147, "minkowski": 147, "metric_param": 147, "score_method": 147, "neighbor": 147, "ball_tre": 147, "kd_tree": 147, "balltre": 147, "kdtree": 147, "attempt": 147, "overrid": 147, "queri": 147, "store": 147, "precomput": [147, 148, 151, 153, 156, 161, 163, 165, 167], "nonzero": 147, "pairwise_dist": 147, "manhattan_dist": 147, "euclidean_dist": 147, "minkowski_dist": 147, "l_p": 147, "coef0": 148, "nu": 148, "cache_s": 148, "libsvm": 148, "poli": 148, "toler": [148, 149, 150, 151, 155, 156], "fraction": [148, 162, 163, 164, 165], "heurist": 148, "cach": 148, "properli": 148, "multithread": 148, "solver": [148, 149, 154, 157], "class_weight_": 148, "n_class": [148, 150, 162], "class_weight": [148, 162], "coef_": 148, "primal": 148, "readonli": 148, "dual_coef_": 148, "support_vectors_": 148, "n_sv": 148, "fit_status_": 148, "intercept_": [148, 150, 151, 152, 153, 164, 165], "n_iter_": [148, 152, 153], "n_support_": 148, "dtype": [148, 162, 163], "int32": 148, "shape_fit_": 148, "n_dimensions_of_x": 148, "support_": 148, "n_selected_compon": 149, "cumulative_vari": 149, "score_typ": 149, "copi": 149, "whiten": 149, "svd_solver": 149, "iterated_pow": 149, "mle": 149, "minka": 149, "arpack": 149, "princip": 149, "overwritten": 149, "fit_transform": 149, "components_": 149, "singular": 149, "uncorrel": 149, "signal": 149, "downstream": 149, "wire": 149, "polici": 149, "500x500": 149, "exact": [149, 164, 165, 166, 167], "svd": 149, "afterward": 149, "lapack": 149, "linalg": 149, "postprocess": 149, "strictli": [122, 149], "halko": 149, "et": 149, "sparser": 149, "auto_exampl": [83, 149], "plot_scaling_import": 149, "sequenc": [150, 151], "max_interaction_bin": [150, 151], "validation_s": [150, 151], "outer_bag": [150, 151], "inner_bag": [150, 151], "smoothing_round": [150, 151], "max_round": [150, 151], "early_stopping_toler": [150, 151], "0001": [48, 150, 151, 155, 156], "log_loss": [150, 162], "featuretyp": [150, 151], "inner": [150, 151], "robin": [150, 151], "intermix": [150, 151], "cyclic": [150, 151], "n_term": [150, 151], "n_cpu": [150, 151], "eg": [150, 151], "thread": [150, 151], "device_random": [150, 151], "classes_": [150, 162], "resolv": [150, 151], "feature_types_in_": [150, 151], "nomin": [150, 151], "bins_": [150, 151], "n_cut": [150, 151], "resolut": [150, 151], "item": [150, 151], "feature_bounds_": [150, 151], "feature_index": [150, 151], "histogram_edges_": [150, 151], "n_hist_edg": [150, 151], "edg": [150, 151], "histogram_weights_": [150, 151], "n_hist_bin": [150, 151], "unique_val_counts_": [150, 151], "term_features_": [150, 151], "term_names_": [150, 151], "bin_weights_": [150, 151], "n_feature0_bin": [150, 151], "n_featuren_bin": [150, 151], "tensor": [150, 151, 155, 156], "bagged_scores_": [150, 151], "n_outer_bag": [150, 151], "term_scores_": [150, 151], "standard_deviations_": [150, 151], "link_": [150, 151], "invers": [150, 151, 162], "custom_classif": 150, "probit": 150, "cloglog": 150, "loglog": 150, "cauchit": 150, "link_param_": [150, 151], "bag_weights_": [150, 151], "breakpoint_iteration_": [150, 151], "n_stage": [150, 151], "init_scor": [150, 151], "softmax": [150, 151, 154, 155, 160, 161, 166], "pred": [25, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 164, 165, 166, 167], "content": [150, 151], "parse_model": [150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167], "fanovainterpret": [150, 151, 154, 155, 156, 157, 164, 165, 166, 167], "fidx": [150, 151, 154, 155, 156, 157, 164, 165, 166, 167], "multi": [150, 152, 155, 160, 161, 162, 164, 166], "harsh": [150, 152, 155, 160, 162, 164, 166], "n_output": [150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "set_score_request": [150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "request": [150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "enable_metadata_rout": [150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "set_config": [150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "alia": [150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "metadata_rout": [150, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167], "rmse": 151, "poisson_devi": 151, "tweedie_devi": 151, "variance_pow": 151, "gamma_devi": 151, "pseudo_hub": 151, "rmse_log": 151, "custom_regress": 151, "inverse_squar": 151, "min_target_": 151, "max_target_": 151, "y_true": [151, 153, 156, 161, 163, 165, 167], "y_pred": [151, 153, 156, 161, 163, 165, 167], "arbitrarili": [151, 153, 156, 161, 163, 165, 167], "disregard": [151, 153, 156, 161, 163, 165, 167], "n_samples_fit": [151, 153, 156, 161, 163, 165, 167], "multioutput": [151, 153, 156, 161, 162, 163, 165, 167], "uniform_averag": [151, 153, 156, 161, 163, 165, 167], "r2_score": [151, 153, 156, 161, 163, 165, 167], "multioutputregressor": [151, 153, 156, 161, 163, 165, 167], "min_impurity_decreas": [152, 153, 162, 163], "concis": [152, 153], "csinva": [152, 153], "induc": [152, 153, 162, 163], "impur": [152, 153, 162, 163], "feature_names_": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "feature_types_": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "trees_": [152, 153], "n_tree_": [152, 153], "early_stop_": [152, 153], "figsinterpret": [152, 153], "pred_proba": [152, 155, 160, 164, 166], "interact_num": [155, 156], "subnet_size_main_effect": [155, 156], "subnet_size_interact": [155, 156], "activation_func": [155, 156], "max_epoch": [155, 156, 160, 161], "early_stop_thr": [155, 156], "batch_siz": [155, 156, 160, 161], "batch_size_infer": [155, 156, 160, 161], "max_iter_per_epoch": [155, 156], "val_ratio": [155, 156, 160, 161], "gam_sample_s": [155, 156], "mlp_sample_s": [155, 156], "reg_clar": [155, 156], "loss_threshold": [155, 156], "reg_mono": [155, 156], "mono_sample_s": [155, 156], "include_interaction_list": [155, 156], "boundary_clip": [155, 156], "devic": [155, 156, 160, 161], "cpu": [155, 156, 160, 161], "tanh": [155, 156], "epoch": [155, 156, 160, 161], "clip": [155, 156], "reshuffl": [155, 156], "rough": [155, 156], "teacher": [155, 156], "feature_name1": [155, 156], "feature_name2": [155, 156], "hardwar": [155, 156], "net_": [155, 156, 160, 161], "data_dict_density_": [155, 156], "err_train_main_effect_training_": [155, 156], "err_val_main_effect_training_": [155, 156], "err_train_interaction_training_": [155, 156], "err_val_interaction_training_": [155, 156], "err_train_tuning_": [155, 156], "err_val_tuning_": [155, 156], "interaction_list_": [155, 156], "active_main_effect_index_": [155, 156], "active_interaction_index_": [155, 156], "main_effect_val_loss_": [155, 156], "interaction_val_loss_": [155, 156], "time_cost_": [155, 156], "cost": [155, 156, 162, 163], "clarity_": [155, 156], "monotonicity_": [155, 156], "n_interactions_": [155, 156], "dummy_values_": [155, 156], "cfeature_num_": [155, 156], "nfeature_num_": [155, 156], "cfeature_names_": [155, 156], "nfeature_names_": [155, 156], "cfeature_index_list_": [155, 156], "nfeature_index_list_": [155, 156], "num_classes_list_": [155, 156], "mu_list_": [155, 156], "std_list_": [155, 156], "min_value_": [155, 156, 164, 165], "max_value_": [155, 156, 164, 165], "mono_increasing_list_index_": [155, 156], "mono_decreasing_list_index_": [155, 156], "include_interaction_list_index_": [155, 156], "training_generator_": [155, 156], "fasttensordataload": [155, 156], "validation_generator_": [155, 156], "warm_init_main_effect_data_": [155, 156], "warm": [155, 156], "warm_init_interaction_data_": [155, 156], "main_effect_norm_": [155, 156], "interaction_norm_": [155, 156], "feature_importance_": 155, "data_dict_global_": [155, 156], "global_explain": [155, 156], "certify_mono": [155, 156], "certifi": [155, 156], "satisfi": [155, 156], "mono_statu": [155, 156], "main_effect": [155, 156], "fine_tune_select": [155, 156], "main_effect_list": [155, 156], "interaction_list": [155, 156], "lr": [155, 156], "unselect": [155, 156], "norm": [155, 156], "get_clarity_loss": [155, 156], "clarity_loss": [155, 156], "get_interaction_raw_output": [155, 156], "n_interact": [155, 156], "get_main_effect_raw_output": [155, 156], "get_mono_loss": [155, 156], "mono_loss": [155, 156], "get_raw_output": [155, 156, 160, 161, 164, 165], "folder": [155, 156], "disk": [155, 156], "partial_deriv": [155, 156], "arg": 158, "kwarg": 158, "fit_intercept": 159, "ordinari": 159, "dropout_prob": [160, 161], "n_epoch_no_chang": [160, 161], "iht": [160, 161], "phase_epoch": [160, 161], "perceptron": [160, 161], "dropout": [160, 161], "doesn": [160, 161], "early_stop": [160, 161], "cuda": [160, 161], "coefs_": [160, 161], "len": [160, 161], "ith": [160, 161], "intercepts_": [160, 161], "no_improved_count_": [160, 161], "train_epoch_loss_": [160, 161], "valid_epoch_loss_": [160, 161], "reludnninterpreterregressor": [160, 161], "gini": [162, 163], "min_samples_split": [162, 163], "min_weight_fraction_leaf": [162, 163], "max_leaf_nod": [162, 163], "ccp_alpha": [162, 163], "docstr": [162, 163], "shannon": 162, "pure": [162, 163], "ceil": [162, 163], "log2": [162, 163], "determinist": [162, 163], "behaviour": [162, 163], "n_t": [162, 163], "n_t_r": [162, 163], "right_impur": [162, 163], "n_t_l": [162, 163], "left_impur": [162, 163], "class_label": 162, "multilabel": 162, "bincount": 162, "subtre": [162, 163], "feature_importances_": [162, 163], "max_features_": [162, 163], "n_classes_": 162, "n_outputs_": [162, 163], "check_input": [162, 163], "float32": [162, 163], "csr_matrix": [162, 163], "bypass": [162, 163], "what": [162, 163], "x_leav": [162, 163], "datapoint": [162, 163], "possibli": [162, 163], "cost_complexity_pruning_path": [162, 163], "minimal_cost_complexity_prun": [162, 163], "csc_matrix": [162, 163], "ccp_path": [162, 163], "bunch": [162, 163], "n_node": [162, 163], "csr": [162, 163], "goe": [162, 163], "brought": [162, 163], "mislead": [162, 163], "cardin": [162, 163], "get_depth": [162, 163], "get_n_leav": [162, 163], "n_leav": [162, 163], "treeinterpret": [162, 163], "predict_log_proba": 162, "set_fit_request": [162, 163], "set_predict_proba_request": 162, "set_predict_request": [162, 163], "squared_error": 163, "friedman_ms": 163, "absolute_error": 163, "poisson": 163, "devianc": 163, "refit_method": [164, 165], "max_bin_s": [164, 165], "xgboostclassifi": [164, 166], "hist": [164, 165, 166, 167], "approx": [164, 165, 166, 167], "gpu_hist": [164, 165, 166, 167], "split_info_": [164, 165, 166, 167], "n_splits_raw_": [164, 165, 166, 167], "n_splits_": [164, 165, 166, 167], "xgb_params_": [164, 165, 166, 167], "effects_": [164, 165], "xgboostregressor": [165, 167], "prediciton": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "prediciton_proba": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "classificaiton": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "clust": [177, 178, 179, 180], "plan": 185, "988": [], "678548": [], "716495": [], "576134": [], "632684": [], "020826": [], "477170": [], "475025": [], "512815": [], "527018": [], "521386": [], "040122": [], "045322": [], "039150": [], "046337": [], "040150": [], "042424": [], "037943": [], "038105": [], "040811": [], "042970": [], "886": [], "2509": 22, "3531": 22, "8112": 22, "2857": 22, "3691": 22, "7872": 22, "0348": 22, "0508": 22, "1594": 22, "9617": 22, "2363": 22, "3158": 22, "8240": 22, "1855": 22, "1377": 22, "819": [], "plot_2_register_0_sklearn": [22, 26, 183], "196": [], "plot_2_register_1_h2o": [23, 26, 183], "9537": [], "0983": [], "0313": [], "9966": [], "9545": [], "0764": [], "0244": [], "797": [], "plot_2_register_2_arbitrari": [24, 26, 183], "288": [], "auto_examples_1_train": [], "674": 19, "674156": 20, "981528": 20, "933432": 20, "523289": 20, "211272": 20, "522839": 20, "524328": 20, "662398": 20, "523580": 20, "584545": 20, "724": 20, "058955": 21, "049783": 21, "070307": 21, "054850": 21, "038847": 21, "046059": 21, "041242": 21, "047853": 21, "046578": 21, "044768": 21, "760": 21, "249": 22, "568": 23, "009": [], "310": [], "0x0000020332a6b820": 71, "539683": 71, "597536": 71, "597701": 71, "603478": 71, "619318": 71, "623762": 71, "624535": 71, "625000": 71, "635417": 71, "644645": 71, "0x00000203172f50d0": 71, "650224": 71, "658228": 71, "675603": 71, "688889": 71, "724436": 71, "795455": 71, "680": [71, 75], "0x00000203177a7ee0": 72, "0x00000203177b2ca0": 72, "007795": 72, "005194": 72, "001655": 72, "184": [72, 75], "863": 75, "048": [], "stand": 119, "829": 39, "vladimir2015": 128, "vovk": 128, "vladimir": 128, "ivan": 128, "petej": 128, "valentina": 128, "fedorova": 128, "venn": 128, "aber": 128, "pyspark": [18, 26, 82, 139, 183], "9700": 24, "9971": 24, "9704": 24, "0690": 24, "0216": 24, "9750": 24, "9961": 24, "9730": 24, "0791": 24, "0220": 24, "0102": 24, "525": 24, "pyspark_python": 25, "sql": 25, "sparksess": 25, "decisiontreeclassifi": 25, "vectorassembl": 25, "stringindex": 25, "builder": 25, "appnam": 25, "getorcr": 25, "spark_df": 25, "createdatafram": 25, "feature_assembl": 25, "inputcol": 25, "outputcol": 25, "label_stringidx": 25, "pipelinemodel": 25, "train_data": 25, "test_data": 25, "randomsplit": 25, "2024": 25, "dt": 25, "featurescol": 25, "labelcol": 25, "fargo": [], "doc": [], "1_train": 183, "plot_2_register_3_arbitrary_pyspark": [25, 26, 183], "anaconda": [], "env": [], "lib": [], "205": [], "_fit": [], "134": [], "381": [], "java_model": [], "_fit_java": [], "378": [], "_java_obj": [], "_jdf": [], "py4j": [], "java_gatewai": [], "1322": [], "__call__": [], "return_valu": [], "get_return_valu": [], "179": [], "deco": [], "kw": [], "protocol": [], "326": [], "py4jjavaerror": [], "unprint": [], "topanda": 25, "astyp": 25, "explod": 25, "gbt": 25, "498": [], "3106": 25, "2718": 25, "2642": 25, "9848": 25, "3801": 25, "3085": 25, "2706": 25, "9839": 25, "3798": 25, "583": [25, 26], "auto_examples1_train": 26, "mem": [26, 56, 81, 83, 183], "0_data": 183, "2_explain": 183, "3_model": 183, "4_test": 183, "5_compar": 183, "interpol": [], "renam": [], "midpoint": [], "review": [], "deprec": [], "mono": [47, 48, 52, 80, 122], "0134": 47, "0831": 47, "7649": 47, "0139": 47, "0837": 47, "342": [], "auto_examples3_model": 56, "commonsens": 122, "jupyter_cli": 139, "correspondingli": 122, "7968": 48, "4780": 48, "4202": 48, "1318": 48, "8288": 48, "7739": 48, "4816": 48, "4249": 48, "1320": 48, "0229": 48, "0047": 48, "736": [], "729": [], "2122": [], "_model_train_api": [], "model_train_api": [], "266": [], "modelapi": [], "singlerun": [], "58": [52, 56], "937": [], "458": [], "_init_fit": [], "340": [], "_prepare_data": [], "valueerror": [], "855": [], "591": [], "159": [47, 56], "8161": 52, "7713": 52, "4483": 52, "4373": 52, "1373": 52, "8243": 52, "7650": 52, "4573": 52, "4310": 52, "1338": 52, "0082": 52, "559": [52, 56], "141": 56, "benign": [], "plot_2_compare_robust": [80, 81, 183], "auto_examples5_compar": 81, "146": [], "442": [], "notif": [], "411": [], "320": []}, "objects": {"piml": [[141, 0, 1, "", "Experiment"]], "piml.Experiment": [[141, 1, 1, "", "data_loader"], [141, 1, 1, "", "data_prepare"], [141, 1, 1, "", "data_quality"], [141, 1, 1, "", "data_summary"], [141, 1, 1, "", "eda"], [141, 1, 1, "", "feature_select"], [141, 1, 1, "", "get_data"], [141, 1, 1, "", "get_feature_names"], [141, 1, 1, "", "get_feature_types"], [141, 1, 1, "", "get_interpretable_model_list"], [141, 1, 1, "", "get_leaderboard"], [141, 1, 1, "", "get_leaderboard_registered"], [141, 1, 1, "", "get_model"], [141, 1, 1, "", "get_model_config"], [141, 1, 1, "", "get_model_list"], [141, 1, 1, "", "get_raw_data"], [141, 1, 1, "", "get_target_name"], [141, 1, 1, "", "make_pipeline"], [141, 1, 1, "", "model_compare"], [141, 1, 1, "", "model_diagnose"], [141, 1, 1, "", "model_explain"], [141, 1, 1, "", "model_fairness"], [141, 1, 1, "", "model_fairness_compare"], [141, 1, 1, "", "model_fairness_solas"], [141, 1, 1, "", "model_interpret"], [141, 1, 1, "", "model_save"], [141, 1, 1, "", "model_train"], [141, 1, 1, "", "model_tune"], [141, 1, 1, "", "register"], [141, 1, 1, "", "segmented_diagnose"]], "piml.data.outlier_detection": [[142, 0, 1, "", "CBLOF"], [143, 0, 1, "", "ECOD"], [144, 0, 1, "", "HBOS"], [145, 0, 1, "", "IsolationForest"], [146, 0, 1, "", "KMeansTree"], [147, 0, 1, "", "KNN"], [148, 0, 1, "", "OneClassSVM"], [149, 0, 1, "", "PCA"]], "piml.data.outlier_detection.CBLOF": [[142, 1, 1, "", "decision_function"], [142, 1, 1, "", "fit"], [142, 1, 1, "", "predict"]], "piml.data.outlier_detection.ECOD": [[143, 1, 1, "", "decision_function"], [143, 1, 1, "", "fit"], [143, 1, 1, "", "predict"]], "piml.data.outlier_detection.HBOS": [[144, 1, 1, "", "decision_function"], [144, 1, 1, "", "fit"], [144, 1, 1, "", "predict"]], "piml.data.outlier_detection.IsolationForest": [[145, 1, 1, "", "decision_function"], [145, 1, 1, "", "fit"], [145, 1, 1, "", "predict"]], "piml.data.outlier_detection.KMeansTree": [[146, 1, 1, "", "decision_function"], [146, 1, 1, "", "decision_path"], [146, 1, 1, "", "fit"], [146, 1, 1, "", "get_metadata_routing"], [146, 1, 1, "", "get_params"], [146, 1, 1, "", "get_rule"], [146, 1, 1, "", "plot_tree"], [146, 1, 1, "", "predict"], [146, 1, 1, "", "predict_leaf_id"], [146, 1, 1, "", "set_params"]], "piml.data.outlier_detection.KNN": [[147, 1, 1, "", "decision_function"], [147, 1, 1, "", "fit"], [147, 1, 1, "", "predict"]], "piml.data.outlier_detection.OneClassSVM": [[148, 1, 1, "", "decision_function"], [148, 1, 1, "", "fit"], [148, 1, 1, "", "predict"]], "piml.data.outlier_detection.PCA": [[149, 1, 1, "", "decision_function"], [149, 1, 1, "", "fit"], [149, 1, 1, "", "predict"]], "piml.models": [[150, 0, 1, "", "ExplainableBoostingClassifier"], [151, 0, 1, "", "ExplainableBoostingRegressor"], [152, 0, 1, "", "FIGSClassifier"], [153, 0, 1, "", "FIGSRegressor"], [154, 0, 1, "", "GAMClassifier"], [155, 0, 1, "", "GAMINetClassifier"], [156, 0, 1, "", "GAMINetRegressor"], [157, 0, 1, "", "GAMRegressor"], [158, 0, 1, "", "GLMClassifier"], [159, 0, 1, "", "GLMRegressor"], [160, 0, 1, "", "ReluDNNClassifier"], [161, 0, 1, "", "ReluDNNRegressor"], [162, 0, 1, "", "TreeClassifier"], [163, 0, 1, "", "TreeRegressor"], [164, 0, 1, "", "XGB1Classifier"], [165, 0, 1, "", "XGB1Regressor"], [166, 0, 1, "", "XGB2Classifier"], [167, 0, 1, "", "XGB2Regressor"]], "piml.models.ExplainableBoostingClassifier": [[150, 1, 1, "", "decision_function"], [150, 1, 1, "", "fit"], [150, 1, 1, "", "get_metadata_routing"], [150, 1, 1, "", "get_params"], [150, 1, 1, "", "parse_model"], [150, 1, 1, "", "partial_dependence"], [150, 1, 1, "", "predict"], [150, 1, 1, "", "predict_proba"], [150, 1, 1, "", "score"], [150, 1, 1, "", "set_params"], [150, 1, 1, "", "set_score_request"]], "piml.models.ExplainableBoostingRegressor": [[151, 1, 1, "", "decision_function"], [151, 1, 1, "", "fit"], [151, 1, 1, "", "get_metadata_routing"], [151, 1, 1, "", "get_params"], [151, 1, 1, "", "parse_model"], [151, 1, 1, "", "partial_dependence"], [151, 1, 1, "", "predict"], [151, 1, 1, "", "score"], [151, 1, 1, "", "set_params"], [151, 1, 1, "", "set_score_request"]], "piml.models.FIGSClassifier": [[152, 1, 1, "", "decision_function"], [152, 1, 1, "", "fit"], [152, 1, 1, "", "get_metadata_routing"], [152, 1, 1, "", "get_params"], [152, 1, 1, "", "parse_model"], [152, 1, 1, "", "predict"], [152, 1, 1, "", "predict_proba"], [152, 1, 1, "", "score"], [152, 1, 1, "", "set_params"], [152, 1, 1, "", "set_score_request"]], "piml.models.FIGSRegressor": [[153, 1, 1, "", "fit"], [153, 1, 1, "", "get_metadata_routing"], [153, 1, 1, "", "get_params"], [153, 1, 1, "", "parse_model"], [153, 1, 1, "", "predict"], [153, 1, 1, "", "score"], [153, 1, 1, "", "set_params"], [153, 1, 1, "", "set_score_request"]], "piml.models.GAMClassifier": [[154, 1, 1, "", "decision_function"], [154, 1, 1, "", "fit"], [154, 1, 1, "", "get_metadata_routing"], [154, 1, 1, "", "get_params"], [154, 1, 1, "", "parse_model"], [154, 1, 1, "", "partial_dependence"], [154, 1, 1, "", "predict"], [154, 1, 1, "", "predict_proba"], [154, 1, 1, "", "score"], [154, 1, 1, "", "set_params"]], "piml.models.GAMINetClassifier": [[155, 1, 1, "", "certify_mono"], [155, 1, 1, "", "decision_function"], [155, 1, 1, "", "fine_tune_selected"], [155, 1, 1, "", "fit"], [155, 1, 1, "", "get_clarity_loss"], [155, 1, 1, "", "get_interaction_raw_output"], [155, 1, 1, "", "get_main_effect_raw_output"], [155, 1, 1, "", "get_metadata_routing"], [155, 1, 1, "", "get_mono_loss"], [155, 1, 1, "", "get_params"], [155, 1, 1, "", "get_raw_output"], [155, 1, 1, "", "load"], [155, 1, 1, "", "parse_model"], [155, 1, 1, "", "partial_dependence"], [155, 1, 1, "", "partial_derivatives"], [155, 1, 1, "", "predict"], [155, 1, 1, "", "predict_proba"], [155, 1, 1, "", "save"], [155, 1, 1, "", "score"], [155, 1, 1, "", "set_params"], [155, 1, 1, "", "set_score_request"]], "piml.models.GAMINetRegressor": [[156, 1, 1, "", "certify_mono"], [156, 1, 1, "", "fine_tune_selected"], [156, 1, 1, "", "fit"], [156, 1, 1, "", "get_clarity_loss"], [156, 1, 1, "", "get_interaction_raw_output"], [156, 1, 1, "", "get_main_effect_raw_output"], [156, 1, 1, "", "get_metadata_routing"], [156, 1, 1, "", "get_mono_loss"], [156, 1, 1, "", "get_params"], [156, 1, 1, "", "get_raw_output"], [156, 1, 1, "", "load"], [156, 1, 1, "", "parse_model"], [156, 1, 1, "", "partial_dependence"], [156, 1, 1, "", "partial_derivatives"], [156, 1, 1, "", "predict"], [156, 1, 1, "", "save"], [156, 1, 1, "", "score"], [156, 1, 1, "", "set_params"], [156, 1, 1, "", "set_score_request"]], "piml.models.GAMRegressor": [[157, 1, 1, "", "fit"], [157, 1, 1, "", "get_metadata_routing"], [157, 1, 1, "", "get_params"], [157, 1, 1, "", "parse_model"], [157, 1, 1, "", "partial_dependence"], [157, 1, 1, "", "predict"], [157, 1, 1, "", "score"], [157, 1, 1, "", "set_params"]], "piml.models.GLMRegressor": [[159, 1, 1, "", "get_metadata_routing"], [159, 1, 1, "", "get_params"], [159, 1, 1, "", "set_params"]], "piml.models.ReluDNNClassifier": [[160, 1, 1, "", "decision_function"], [160, 1, 1, "", "fit"], [160, 1, 1, "", "get_metadata_routing"], [160, 1, 1, "", "get_params"], [160, 1, 1, "", "get_raw_output"], [160, 1, 1, "", "parse_model"], [160, 1, 1, "", "predict"], [160, 1, 1, "", "predict_proba"], [160, 1, 1, "", "score"], [160, 1, 1, "", "set_params"], [160, 1, 1, "", "set_score_request"]], "piml.models.ReluDNNRegressor": [[161, 1, 1, "", "fit"], [161, 1, 1, "", "get_metadata_routing"], [161, 1, 1, "", "get_params"], [161, 1, 1, "", "get_raw_output"], [161, 1, 1, "", "parse_model"], [161, 1, 1, "", "predict"], [161, 1, 1, "", "score"], [161, 1, 1, "", "set_params"], [161, 1, 1, "", "set_score_request"]], "piml.models.TreeClassifier": [[162, 1, 1, "", "apply"], [162, 1, 1, "", "cost_complexity_pruning_path"], [162, 1, 1, "", "decision_path"], [162, 2, 1, "", "feature_importances_"], [162, 1, 1, "", "fit"], [162, 1, 1, "", "get_depth"], [162, 1, 1, "", "get_metadata_routing"], [162, 1, 1, "", "get_n_leaves"], [162, 1, 1, "", "get_params"], [162, 1, 1, "", "parse_model"], [162, 1, 1, "", "predict"], [162, 1, 1, "", "predict_log_proba"], [162, 1, 1, "", "predict_proba"], [162, 1, 1, "", "score"], [162, 1, 1, "", "set_fit_request"], [162, 1, 1, "", "set_params"], [162, 1, 1, "", "set_predict_proba_request"], [162, 1, 1, "", "set_predict_request"], [162, 1, 1, "", "set_score_request"]], "piml.models.TreeRegressor": [[163, 1, 1, "", "apply"], [163, 1, 1, "", "cost_complexity_pruning_path"], [163, 1, 1, "", "decision_path"], [163, 2, 1, "", "feature_importances_"], [163, 1, 1, "", "fit"], [163, 1, 1, "", "get_depth"], [163, 1, 1, "", "get_metadata_routing"], [163, 1, 1, "", "get_n_leaves"], [163, 1, 1, "", "get_params"], [163, 1, 1, "", "parse_model"], [163, 1, 1, "", "predict"], [163, 1, 1, "", "score"], [163, 1, 1, "", "set_fit_request"], [163, 1, 1, "", "set_params"], [163, 1, 1, "", "set_predict_request"], [163, 1, 1, "", "set_score_request"]], "piml.models.XGB1Classifier": [[164, 1, 1, "", "decision_function"], [164, 1, 1, "", "fit"], [164, 1, 1, "", "get_metadata_routing"], [164, 1, 1, "", "get_params"], [164, 1, 1, "", "get_raw_output"], [164, 1, 1, "", "parse_model"], [164, 1, 1, "", "partial_dependence"], [164, 1, 1, "", "predict"], [164, 1, 1, "", "predict_proba"], [164, 1, 1, "", "score"], [164, 1, 1, "", "set_params"], [164, 1, 1, "", "set_score_request"]], "piml.models.XGB1Regressor": [[165, 1, 1, "", "fit"], [165, 1, 1, "", "get_metadata_routing"], [165, 1, 1, "", "get_params"], [165, 1, 1, "", "get_raw_output"], [165, 1, 1, "", "parse_model"], [165, 1, 1, "", "partial_dependence"], [165, 1, 1, "", "predict"], [165, 1, 1, "", "score"], [165, 1, 1, "", "set_params"], [165, 1, 1, "", "set_score_request"]], "piml.models.XGB2Classifier": [[166, 1, 1, "", "decision_function"], [166, 1, 1, "", "fit"], [166, 1, 1, "", "get_metadata_routing"], [166, 1, 1, "", "get_params"], [166, 1, 1, "", "parse_model"], [166, 1, 1, "", "partial_dependence"], [166, 1, 1, "", "predict"], [166, 1, 1, "", "predict_proba"], [166, 1, 1, "", "score"], [166, 1, 1, "", "set_params"], [166, 1, 1, "", "set_score_request"]], "piml.models.XGB2Regressor": [[167, 1, 1, "", "fit"], [167, 1, 1, "", "get_metadata_routing"], [167, 1, 1, "", "get_params"], [167, 1, 1, "", "parse_model"], [167, 1, 1, "", "partial_dependence"], [167, 1, 1, "", "predict"], [167, 1, 1, "", "score"], [167, 1, 1, "", "set_params"], [167, 1, 1, "", "set_score_request"]], "piml.scored_test": [[168, 3, 1, "", "test_accuracy_plot"], [169, 3, 1, "", "test_accuracy_residual"], [170, 3, 1, "", "test_accuracy_table"], [171, 3, 1, "", "test_overfit"], [172, 3, 1, "", "test_reliability_calibration"], [173, 3, 1, "", "test_reliability_distance"], [174, 3, 1, "", "test_reliability_marginal"], [175, 3, 1, "", "test_reliability_perf"], [176, 3, 1, "", "test_reliability_table"], [177, 3, 1, "", "test_resilience_distance"], [178, 3, 1, "", "test_resilience_perf"], [179, 3, 1, "", "test_resilience_shift_density"], [180, 3, 1, "", "test_resilience_shift_histogram"], [181, 3, 1, "", "test_weakspot"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"]}, "titleterms": {"data": [0, 1, 2, 3, 4, 6, 7, 35, 82, 87, 88, 89, 90, 91, 96, 98, 99, 100, 101, 102, 103, 119, 128, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149], "pipelin": [0, 82, 96, 140], "load": [1, 2, 3, 87, 88, 89, 90, 91, 98, 136, 138, 139], "built": [1, 98], "dataset": [1, 98], "panda": [2, 98], "datafram": [2, 98], "spark": [3, 98], "summari": [4, 103, 112, 120, 132], "eda": 5, "prepar": [6, 87, 88, 89, 90, 91, 99], "qualiti": [7, 100, 101, 102], "check": [7, 101], "featur": [8, 28, 101, 103, 104, 111, 112, 115, 116, 117, 118, 119, 120, 122, 123, 130], "select": [8, 104], "comput": [9, 17, 26, 36, 56, 75, 81, 83, 183], "time": [9, 17, 26, 36, 56, 75, 81, 83, 183], "model": [10, 11, 14, 15, 16, 18, 19, 22, 23, 24, 25, 33, 37, 76, 77, 78, 80, 82, 87, 88, 89, 90, 91, 92, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 134, 135, 136, 137, 138, 140, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "train": [10, 11, 18, 19, 82, 87, 88, 89, 90, 91, 99, 115, 116, 117, 118, 119, 120, 121, 122, 123, 134, 135, 136, 138, 140], "tune": [10, 18, 82, 134, 137], "extern": [11, 98], "hpo": [12, 13, 20, 21], "xgb": [12, 46, 47, 48, 49], "grid": [12, 20, 137], "search": [12, 13, 20, 21, 137], "bike": [12, 39, 49, 51, 53, 106, 107, 108, 109, 110, 111, 112, 119], "share": [12, 39, 49, 51, 53, 106, 107, 108, 109, 110, 111, 112, 119], "glm": [13, 38, 39], "random": [13, 21, 99, 104, 137], "simucredit": [13, 106, 107, 108, 109, 110, 111, 112, 132], "regist": [14, 15, 16, 22, 23, 24, 25, 135, 136, 138], "arbitrari": [14, 24, 135, 138], "h2o": [15, 23, 136], "sklearn": [16, 22, 138], "style": [16, 22, 138], "post": [27, 82, 105, 140], "hoc": [27, 82, 105, 140], "explain": [27, 82, 87, 88, 91, 105, 115, 140], "permut": [28, 111], "import": [28, 104, 111, 112, 115, 116, 117, 118, 119, 120, 122, 123, 139], "partial": [29, 110], "depend": [29, 35, 110, 112, 119, 139], "plot": [29, 97, 110, 112, 115, 117, 118, 120, 122, 123, 125, 127, 132, 133], "h": [30, 107], "statist": [30, 103, 107], "individu": [31, 108], "condit": [31, 104, 108], "expect": [31, 108], "accumul": [32, 106], "local": [32, 33, 102, 106, 109, 115, 116, 117, 118, 119, 120, 121, 122, 123], "effect": [32, 106, 115, 117, 118, 122, 123], "interpret": [33, 37, 82, 87, 88, 91, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 140], "agnost": [33, 109], "explan": [33, 34, 35, 109, 112], "shaplei": [34, 112], "addit": [34, 112, 117], "logist": 38, "regress": [38, 39, 41, 43, 45, 47, 49, 51, 53, 55, 59, 61, 63, 65, 67, 69, 72, 74, 78, 95, 119, 125, 128], "taiwan": [38, 44, 48, 50, 52, 54, 93, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 133], "credit": [38, 44, 48, 50, 52, 54, 93, 115, 116, 118, 119, 120, 121, 123, 125, 127, 128, 129, 130, 131, 133], "linear": [39, 119, 120], "gam": [40, 41], "classif": [40, 42, 44, 46, 48, 50, 52, 54, 58, 60, 62, 64, 66, 68, 71, 73, 77, 93, 125, 128], "cocircl": [40, 46, 117, 122], "california": [41, 43, 45, 47, 117, 131], "hous": [41, 43, 45, 47, 117, 131], "tree": [42, 43, 116, 121], "taiwancredit": [42, 91], "fig": [44, 45], "1": [46, 47, 89, 93, 95, 98, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138], "2": [48, 49, 90, 98, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138], "ebm": [50, 51], "gami": [52, 53, 118], "net": [52, 53, 118], "relu": [54, 55, 120], "dnn": [54, 55], "friedman": [55, 107, 120], "outcom": [57, 82, 87, 88, 91, 140], "test": [57, 70, 73, 74, 82, 87, 88, 89, 90, 91, 99, 100, 104, 130, 131, 135, 136, 138, 140], "accuraci": [58, 59, 93, 95, 125, 132], "weakspot": [60, 61, 132, 133], "overfit": [62, 63, 93, 95, 127], "reliabl": [64, 65, 93, 95, 128], "robust": [66, 67, 80, 93, 95, 130], "resili": [68, 69, 93, 95, 129], "fair": [70, 79, 89, 90, 94, 126], "xgb2": 70, "segment": [71, 72, 94, 126, 132], "diagnos": [71, 72], "score": [73, 74, 93, 95, 102, 128, 131, 140], "comparison": [76, 77, 78, 79, 82, 87, 88, 90, 91, 92, 93, 94, 95, 102, 129], "exampl": [82, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "tabl": [84, 120, 125, 128, 132], "Of": 84, "content": 84, "frequent": 85, "ask": 85, "question": 85, "case": 86, "studi": [86, 89, 90], "bikeshar": [87, 95, 115, 118, 122, 123, 125, 127, 128, 130, 132, 133], "intepret": [87, 88, 91], "diagnost": [87, 88, 91, 113, 124, 135, 136, 138], "benchmark": [87, 88, 91], "californiah": [88, 116, 121, 129], "simul": [89, 90], "ml": [89, 90], "": [89, 90, 107], "descript": 90, "auc": 93, "f1": 93, "bandwidth": [93, 95, 128], "diagram": [93, 116, 128], "perform": [93, 95, 129], "worst": [93, 95, 130], "sampl": [93, 95, 99, 101, 130], "distanc": [93, 95, 100, 104, 128, 129], "metric": [94, 126], "mean": 95, "squar": 95, "error": 95, "absolut": 95, "r": 95, "coverag": [95, 128], "exploratori": 97, "analysi": [97, 102], "univari": 97, "bivari": 97, "multivari": 97, "csv": 98, "file": 98, "from": 98, "3": 98, "basic": 99, "set": 99, "split": 99, "outer": 99, "base": [99, 102], "kmean": 99, "manual": 99, "drift": 100, "margin": [100, 102, 128, 129], "distribut": [100, 102, 132], "energi": 100, "integr": [101, 140], "singl": 101, "column": 101, "duplic": 101, "highli": 101, "correl": [101, 104], "outlier": [102, 140], "detect": [102, 140], "methodologi": [102, 132, 137], "isol": 102, "forest": 102, "cluster": 102, "factor": 102, "cblof": [102, 142], "princip": 102, "compon": 102, "kmeanstre": [102, 146], "k": 102, "nearest": 102, "neighbor": 102, "histogram": [102, 129], "One": [102, 106, 110, 127, 133], "class": 102, "svm": 102, "empir": 102, "cumul": 102, "differ": 102, "method": 102, "refer": [102, 104, 107, 108, 111, 112, 113, 119, 128, 140], "numer": [103, 130], "categor": [103, 130], "manipul": 103, "remov": 103, "chang": 103, "type": 103, "us": [104, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "independ": 104, "rcit": 104, "forward": 104, "backward": 104, "earli": 104, "drop": 104, "fbedk": 104, "al": 106, "algorithm": [106, 107, 108, 109, 110, 111, 112, 127, 129, 130, 133, 140], "detail": [106, 107, 108, 109, 110, 111, 112, 127, 129, 130, 133], "usag": [106, 107, 108, 109, 110, 111, 112, 127, 129, 130, 131, 132, 133, 137], "wai": [106, 110, 127, 133], "two": [106, 110, 127, 133], "hstat": 107, "ic": 108, "lime": 109, "pdp": 110, "pfi": 111, "shap": 112, "exact": 112, "solut": 112, "kernelshap": 112, "specif": 112, "The": 112, "waterfal": 112, "introduct": 113, "toolbox": 113, "design": 113, "suit": [113, 124], "futur": 113, "plan": 113, "defin": 135, "wrapper": 135, "predict": 135, "function": [135, 140], "run": [135, 136, 138], "save": [136, 138], "fit": [136, 138], "hyperparamet": 137, "optim": 137, "get": 137, "tun": 137, "result": 137, "boost": 115, "machin": 115, "global": [115, 116, 117, 118, 119, 120, 121, 122, 123], "main": [115, 117, 118, 122, 123], "interact": [115, 118, 123], "contribut": [115, 118, 120, 123], "fast": 116, "greedi": 116, "sum": 116, "heatmap": 116, "gener": [117, 119], "coeffici": 119, "origin": 119, "scale": 119, "option": 119, "center": 119, "neural": 120, "network": 120, "formul": 120, "llm": 120, "parallel": 120, "coordin": 120, "violin": 120, "profil": 120, "pairwis": 120, "decis": 121, "xgboost": [122, 123], "depth": [122, 123], "weight": 122, "evid": 122, "inform": 122, "valu": 122, "task": [125, 128], "residu": [125, 132], "binari": [125, 128], "bin": [122, 126], "threshold": 126, "un": 128, "classifi": 128, "calibr": 128, "brier": 128, "densiti": 129, "perturb": 130, "For": 130, "variabl": 130, "whole": 130, "shift": 132, "instal": 139, "quick": 139, "troubleshoot": 139, "could": 139, "find": 139, "version": 139, "satisfi": 139, "requir": 139, "piml": [139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], "cannot": 139, "uninstal": 139, "llvmlite": 139, "librari": 139, "libxgboost": 139, "so": 139, "colab": 139, "api": 140, "high": [], "code": [], "experi": 141, "outlier_detect": [142, 143, 144, 145, 146, 147, 148, 149], "ecod": 143, "hbo": 144, "isolationforest": 145, "knn": 147, "oneclasssvm": 148, "pca": 149, "explainableboostingclassifi": 150, "explainableboostingregressor": 151, "figsclassifi": 152, "figsregressor": 153, "gamclassifi": 154, "gaminetclassifi": 155, "gaminetregressor": 156, "gamregressor": 157, "glmclassifi": 158, "glmregressor": 159, "reludnnclassifi": 160, "reludnnregressor": 161, "treeclassifi": 162, "treeregressor": 163, "xgb1classifi": 164, "xgb1regressor": 165, "xgb2classifi": 166, "xgb2regressor": 167, "scored_test": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "test_accuracy_plot": 168, "test_accuracy_residu": 169, "test_accuracy_t": 170, "test_overfit": 171, "test_reliability_calibr": 172, "test_reliability_dist": 173, "test_reliability_margin": 174, "test_reliability_perf": 175, "test_reliability_t": 176, "test_resilience_dist": 177, "test_resilience_perf": 178, "test_resilience_shift_dens": 179, "test_resilience_shift_histogram": 180, "test_weakspot": 181, "welcom": 182, "user": 185, "guid": 185, "pyspark": 25, "monoton": [80, 122], "constraint": [80, 122], "sparsiti": 122, "via": 122, "optimzi": 122, "On": [], "benign": [], "build": 80}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Data Pipeline": [[0, "data-pipeline"], [96, "data-pipeline"], [140, "data-pipeline"], [82, "data-pipeline"]], "Data Load (Built-in Dataset)": [[1, "data-load-built-in-dataset"]], "Data Load (Pandas DataFrame)": [[2, "data-load-pandas-dataframe"]], "Data Load (Spark)": [[3, "data-load-spark"]], "Data Summary": [[4, "data-summary"], [103, "data-summary"]], "EDA": [[5, "eda"]], "Data Preparation": [[6, "data-preparation"], [99, "data-preparation"]], "Data Quality Check": [[7, "data-quality-check"]], "Feature Selection": [[8, "feature-selection"], [104, "feature-selection"]], "Computation times": [[9, "computation-times"], [17, "computation-times"], [26, "computation-times"], [36, "computation-times"], [56, "computation-times"], [75, "computation-times"], [83, "computation-times"], [81, "computation-times"], [183, "computation-times"]], "Model Train and Tune": [[10, "model-train-and-tune"], [18, "model-train-and-tune"], [134, "model-train-and-tune"], [82, "model-train-and-tune"]], "Train External Models": [[11, "train-external-models"]], "HPO - XGB - Grid Search (Bike Sharing)": [[12, "hpo-xgb-grid-search-bike-sharing"]], "HPO - GLM - Random Search (SimuCredit)": [[13, "hpo-glm-random-search-simucredit"]], "Registering Arbitrary Models": [[14, "registering-arbitrary-models"]], "Registering H2O Models": [[15, "registering-h2o-models"]], "Registering sklearn Style Models": [[16, "registering-sklearn-style-models"]], "Train Models": [[19, "train-models"]], "HPO - Grid Search": [[20, "hpo-grid-search"]], "HPO - Random Search": [[21, "hpo-random-search"]], "Register sklearn Style Models": [[22, "register-sklearn-style-models"]], "Register H2O Models": [[23, "register-h2o-models"], [136, "register-h2o-models"]], "Register Arbitrary Models": [[24, "register-arbitrary-models"], [135, "register-arbitrary-models"]], "Register PySpark Models": [[25, "register-pyspark-models"]], "Post hoc Explainability": [[27, "post-hoc-explainability"], [82, "post-hoc-explainability"]], "Permutation Feature Importance": [[28, "permutation-feature-importance"]], "Partial Dependence Plot": [[29, "partial-dependence-plot"]], "H-statistics": [[30, "h-statistics"]], "Individual Conditional Expectation": [[31, "individual-conditional-expectation"]], "Accumulated Local Effects": [[32, "accumulated-local-effects"]], "Local Interpretable Model-Agnostic Explanation": [[33, "local-interpretable-model-agnostic-explanation"]], "SHapley Additive exPlanations": [[34, "shapley-additive-explanations"]], "Data Dependent Explanation": [[35, "data-dependent-explanation"]], "Interpretable Models": [[37, "interpretable-models"], [113, "interpretable-models"], [140, "interpretable-models"], [82, "interpretable-models"], [114, "interpretable-models"]], "GLM Logistic Regression (Taiwan Credit)": [[38, "glm-logistic-regression-taiwan-credit"]], "GLM Linear Regression (Bike Sharing)": [[39, "glm-linear-regression-bike-sharing"]], "GAM Classification (CoCircles)": [[40, "gam-classification-cocircles"]], "GAM Regression (California Housing)": [[41, "gam-regression-california-housing"]], "Tree Classification (TaiwanCredit)": [[42, "tree-classification-taiwancredit"]], "Tree Regression (California Housing)": [[43, "tree-regression-california-housing"]], "FIGS Classification (Taiwan Credit)": [[44, "figs-classification-taiwan-credit"]], "FIGS Regression (California Housing)": [[45, "figs-regression-california-housing"]], "XGB-1 Classification (CoCircles)": [[46, "xgb-1-classification-cocircles"]], "XGB-1 Regression (California Housing)": [[47, "xgb-1-regression-california-housing"]], "XGB-2 Classification (Taiwan Credit)": [[48, "xgb-2-classification-taiwan-credit"]], "XGB-2 Regression (Bike Sharing)": [[49, "xgb-2-regression-bike-sharing"]], "EBM Classification (Taiwan Credit)": [[50, "ebm-classification-taiwan-credit"]], "EBM Regression (Bike Sharing)": [[51, "ebm-regression-bike-sharing"]], "GAMI-Net Classification (Taiwan Credit)": [[52, "gami-net-classification-taiwan-credit"]], "GAMI-Net Regression (Bike Sharing)": [[53, "gami-net-regression-bike-sharing"]], "ReLU DNN Classification (Taiwan Credit)": [[54, "relu-dnn-classification-taiwan-credit"]], "ReLU DNN Regression (Friedman)": [[55, "relu-dnn-regression-friedman"]], "Outcome Testing": [[57, "outcome-testing"], [140, "outcome-testing"], [82, "outcome-testing"]], "Accuracy: Classification": [[58, "accuracy-classification"]], "Accuracy: Regression": [[59, "accuracy-regression"]], "WeakSpot: Classification": [[60, "weakspot-classification"]], "WeakSpot: Regression": [[61, "weakspot-regression"]], "Overfit: Classification": [[62, "overfit-classification"]], "Overfit: Regression": [[63, "overfit-regression"]], "Reliability: Classification": [[64, "reliability-classification"]], "Reliability: Regression": [[65, "reliability-regression"]], "Robustness: Classification": [[66, "robustness-classification"]], "Robustness:  Regression": [[67, "robustness-regression"]], "Resilience:  Classification": [[68, "resilience-classification"]], "Resilience - Regression": [[69, "resilience-regression"]], "Fairness Test: XGB2": [[70, "fairness-test-xgb2"]], "Segmented Diagnose (Classification)": [[71, "segmented-diagnose-classification"]], "Segmented Diagnose (Regression)": [[72, "segmented-diagnose-regression"]], "Scored Test: Classification": [[73, "scored-test-classification"]], "Scored Test: Regression": [[74, "scored-test-regression"]], "Model Comparison: Classification": [[77, "model-comparison-classification"]], "Model Comparison: Regression": [[78, "model-comparison-regression"]], "Fairness Comparison": [[79, "fairness-comparison"], [94, "fairness-comparison"]], "Table Of Contents": [[84, "table-of-contents"]], "Frequently Asked Questions": [[85, "frequently-asked-questions"]], "Case Studies": [[86, "case-studies"]], "BikeSharing Data": [[87, "BikeSharing-Data"]], "Load and Prepare Data": [[87, "Load-and-Prepare-Data"], [88, "Load-and-Prepare-Data"], [89, "Load-and-Prepare-Data"], [91, "Load-and-Prepare-Data"]], "Train Intepretable Models": [[87, "Train-Intepretable-Models"], [88, "Train-Intepretable-Models"], [91, "Train-Intepretable-Models"]], "Interpretability and Explainability": [[87, "Interpretability-and-Explainability"], [88, "Interpretability-and-Explainability"], [91, "Interpretability-and-Explainability"]], "Model Diagnostics and Outcome Testing": [[87, "Model-Diagnostics-and-Outcome-Testing"], [88, "Model-Diagnostics-and-Outcome-Testing"], [91, "Model-Diagnostics-and-Outcome-Testing"]], "Model Comparison and Benchmarking": [[87, "Model-Comparison-and-Benchmarking"], [88, "Model-Comparison-and-Benchmarking"], [91, "Model-Comparison-and-Benchmarking"]], "CaliforniaHousing Data": [[88, "CaliforniaHousing-Data"]], "Fairness Simulation Study 1": [[89, "Fairness-Simulation-Study-1"]], "Train ML Model(s)": [[89, "Train-ML-Model(s)"], [90, "Train-ML-Model(s)"]], "Fairness Testing": [[89, "Fairness-Testing"], [90, "Fairness-Testing"]], "Fairness Simulation Study 2": [[90, "Fairness-Simulation-Study-2"]], "Data Description": [[90, "Data-Description"]], "Load and Prepare data": [[90, "Load-and-Prepare-data"]], "Fairness Testing Comparison": [[90, "Fairness-Testing-Comparison"]], "TaiwanCredit Data": [[91, "TaiwanCredit-Data"]], "Model Comparison": [[92, "model-comparison"], [76, "model-comparison"], [82, "model-comparison"]], "Comparison for Classification": [[93, "comparison-for-classification"]], "Accuracy Comparison": [[93, "accuracy-comparison"], [95, "accuracy-comparison"]], "Accuracy Score": [[93, "accuracy-score"]], "AUC Score": [[93, "auc-score"]], "F1 Score": [[93, "f1-score"]], "Overfit Comparison": [[93, "overfit-comparison"], [95, "overfit-comparison"]], "Reliability Comparison": [[93, "reliability-comparison"], [95, "reliability-comparison"]], "Bandwidth Comparison": [[93, "bandwidth-comparison"], [95, "bandwidth-comparison"]], "Reliability Diagram Comparison": [[93, "reliability-diagram-comparison"]], "Robustness Comparison": [[93, "robustness-comparison"], [95, "robustness-comparison"]], "Robustness Performance": [[93, "robustness-performance"], [95, "robustness-performance"]], "Robustness Performance on Worst Samples": [[93, "robustness-performance-on-worst-samples"], [95, "robustness-performance-on-worst-samples"]], "Resilience Comparison": [[93, "resilience-comparison"], [95, "resilience-comparison"]], "Resilience Performance": [[93, "resilience-performance"], [95, "resilience-performance"], [129, "resilience-performance"]], "Resilience Distance": [[93, "resilience-distance"], [95, "resilience-distance"], [129, "resilience-distance"]], "Examples": [[93, "examples"], [94, "examples"], [95, "examples"], [97, "examples"], [98, "examples"], [99, "examples"], [100, "examples"], [101, "examples"], [102, "examples"], [103, "examples"], [104, "examples"], [106, "examples"], [107, "examples"], [108, "examples"], [109, "examples"], [110, "examples"], [112, "examples"], [115, "examples"], [116, "examples"], [118, "examples"], [119, "examples"], [120, "examples"], [121, "examples"], [122, "examples"], [123, "examples"], [125, "examples"], [126, "examples"], [127, "examples"], [128, "examples"], [129, "examples"], [130, "examples"], [131, "examples"], [132, "examples"], [133, "examples"], [135, "examples"], [136, "examples"], [137, "examples"], [138, "examples"], [82, "examples"]], "Examples 1: Taiwan Credit": [[93, null]], "Fairness Metrics": [[94, "fairness-metrics"], [126, "fairness-metrics"]], "Segmented": [[94, "segmented"], [132, "segmented"]], "Example": [[94, null], [97, null], [99, null], [100, null], [101, null], [102, null], [103, null], [104, null], [111, "example"], [117, "example"], [126, null]], "Comparison for Regression": [[95, "comparison-for-regression"]], "Mean Squared Error": [[95, "mean-squared-error"]], "Mean Absolute Error": [[95, "mean-absolute-error"]], "R-squared Score": [[95, "r-squared-score"]], "Coverage Comparison": [[95, "coverage-comparison"]], "Example 1: BikeSharing": [[95, null], [115, null], [118, null], [122, null], [123, null], [125, null], [127, null], [128, null], [130, null], [132, null], [133, null]], "Exploratory Analysis": [[97, "exploratory-analysis"]], "Univariate Plots": [[97, "univariate-plots"]], "Bivariate Plots": [[97, "bivariate-plots"]], "Multivariate Plots": [[97, "multivariate-plots"]], "Data Load": [[98, "data-load"]], "Built-in Dataset": [[98, "built-in-dataset"]], "External Dataset (csv files)": [[98, "external-dataset-csv-files"]], "External Dataset (Spark file)": [[98, "external-dataset-spark-file"]], "Example 1: Load built-in datasets": [[98, null]], "Example 2: Load data from pandas DataFrame": [[98, null]], "Example 3: Load data from spark DataFrame": [[98, null]], "Basic Settings": [[99, "basic-settings"]], "Train-test Splits": [[99, "train-test-splits"]], "Random Split": [[99, "random-split"]], "Outer-sample-based Split": [[99, "outer-sample-based-split"]], "KMeans-based Split": [[99, "kmeans-based-split"]], "Manual Split": [[99, "manual-split"]], "Data Quality (Drift Test)": [[100, "data-quality-drift-test"]], "Marginal Distribution Drift": [[100, "marginal-distribution-drift"]], "Energy Distance": [[100, "energy-distance"]], "Data Quality (Integrity Check)": [[101, "data-quality-integrity-check"]], "Single-column Checks": [[101, "single-column-checks"]], "Duplicated Samples": [[101, "duplicated-samples"]], "Highly correlated features": [[101, "highly-correlated-features"]], "Data Quality (Outlier Detection)": [[102, "data-quality-outlier-detection"]], "Methodology": [[102, "methodology"], [132, "methodology"], [137, "methodology"]], "Isolation Forest": [[102, "isolation-forest"]], "Cluster-Based Local Outlier Factor (CBLOF)": [[102, "cluster-based-local-outlier-factor-cblof"]], "Principal Component Analysis": [[102, "principal-component-analysis"]], "KmeansTree": [[102, "kmeanstree"]], "K-Nearest Neighbor": [[102, "k-nearest-neighbor"]], "Histogram-based outlier detection": [[102, "histogram-based-outlier-detection"]], "One Class SVM": [[102, "one-class-svm"]], "Empirical Cumulative Distribution-based Outlier Detection": [[102, "empirical-cumulative-distribution-based-outlier-detection"]], "Analysis and Comparison": [[102, "analysis-and-comparison"]], "Outlier Score distribution": [[102, "outlier-score-distribution"]], "Marginal Distribution of Outliers": [[102, "marginal-distribution-of-outliers"]], "Comparison of Different Methods": [[102, "comparison-of-different-methods"]], "References": [[102, null], [104, null], [107, null], [108, null], [111, null], [112, null], [113, null], [119, null], [128, null]], "Summary Statistics": [[103, "summary-statistics"]], "Numerical Features": [[103, "numerical-features"]], "Categorical Features": [[103, "categorical-features"]], "Feature Manipulation": [[103, "feature-manipulation"]], "Remove Features": [[103, "remove-features"]], "Change Feature Types": [[103, "change-feature-types"]], "Correlations": [[104, "correlations"]], "Distance Correlation": [[104, "distance-correlation"]], "Use of Feature Importance": [[104, "use-of-feature-importance"]], "Randomized Conditional Independence Test": [[104, "randomized-conditional-independence-test"]], "RCIT Test": [[104, "rcit-test"]], "Forward-Backward selection with Early Dropping (FBEDk):": [[104, "forward-backward-selection-with-early-dropping-fbedk"]], "Post-hoc Explainability": [[105, "post-hoc-explainability"], [140, "post-hoc-explainability"]], "ALE (Accumulated Local Effects)": [[106, "ale-accumulated-local-effects"]], "Algorithm Details": [[106, "algorithm-details"], [107, "algorithm-details"], [108, "algorithm-details"], [109, "algorithm-details"], [110, "algorithm-details"], [111, "algorithm-details"], [112, "algorithm-details"], [127, "algorithm-details"], [129, "algorithm-details"], [130, "algorithm-details"], [133, "algorithm-details"]], "Usage": [[106, "usage"], [107, "usage"], [108, "usage"], [109, "usage"], [110, "usage"], [111, "usage"], [112, "usage"], [127, "usage"], [129, "usage"], [130, "usage"], [131, "usage"], [132, "usage"], [133, "usage"], [137, "usage"]], "One-way ALE": [[106, "one-way-ale"]], "Two-way ALE": [[106, "two-way-ale"]], "Example 1: Bike Sharing": [[106, null], [107, null], [108, null], [109, null], [110, null], [111, null], [112, null], [119, null]], "Example 2: SimuCredit": [[106, null], [107, null], [108, null], [109, null], [110, null], [111, null], [112, null]], "Hstats (Friedman\u2019s H-statistic)": [[107, "hstats-friedman-s-h-statistic"]], "ICE (Individual Conditional Expectation)": [[108, "ice-individual-conditional-expectation"]], "LIME (Local Interpretable Model-Agnostic Explanation)": [[109, "lime-local-interpretable-model-agnostic-explanation"]], "PDP (Partial Dependence Plot)": [[110, "pdp-partial-dependence-plot"]], "One-way PDPs": [[110, "one-way-pdps"]], "Two-way PDPs": [[110, "two-way-pdps"]], "PFI (Permutation Feature Importance)": [[111, "pfi-permutation-feature-importance"]], "SHAP (SHapley Additive exPlanations)": [[112, "shap-shapley-additive-explanations"]], "Exact Solution": [[112, "exact-solution"]], "KernelSHAP": [[112, "kernelshap"]], "Algorithms for specific models": [[112, "algorithms-for-specific-models"]], "The Waterfall plot": [[112, "the-waterfall-plot"]], "SHAP Feature importance": [[112, "shap-feature-importance"]], "SHAP Summary plot": [[112, "shap-summary-plot"]], "SHAP Dependence Plot": [[112, "shap-dependence-plot"]], "Introduction": [[113, "introduction"], [113, "id1"]], "Toolbox Design": [[113, "toolbox-design"]], "Diagnostic Suite": [[113, "diagnostic-suite"], [124, "diagnostic-suite"]], "Future Plan": [[113, "future-plan"]], "Explainable Boosting Machines": [[115, "explainable-boosting-machines"]], "Model Training": [[115, "model-training"], [116, "model-training"], [117, "model-training"], [118, "model-training"], [119, "model-training"], [120, "model-training"], [121, "model-training"], [122, "model-training"], [123, "model-training"], [140, "model-training"]], "Global Interpretation": [[115, "global-interpretation"], [116, "global-interpretation"], [117, "global-interpretation"], [118, "global-interpretation"], [119, "global-interpretation"], [120, "global-interpretation"], [121, "global-interpretation"], [122, "global-interpretation"], [123, "global-interpretation"]], "Main Effect Plot": [[115, "main-effect-plot"], [117, "main-effect-plot"], [118, "main-effect-plot"], [122, "main-effect-plot"], [123, "main-effect-plot"]], "Interaction Plot": [[115, "interaction-plot"], [118, "interaction-plot"], [123, "interaction-plot"]], "Effect Importance": [[115, "effect-importance"], [118, "effect-importance"], [123, "effect-importance"]], "Feature Importance": [[115, "feature-importance"], [117, "feature-importance"], [118, "feature-importance"], [119, "feature-importance"], [122, "feature-importance"], [123, "feature-importance"]], "Local Interpretation": [[115, "local-interpretation"], [116, "local-interpretation"], [117, "local-interpretation"], [118, "local-interpretation"], [119, "local-interpretation"], [120, "local-interpretation"], [121, "local-interpretation"], [122, "local-interpretation"], [123, "local-interpretation"]], "Local Effect Contribution": [[115, "local-effect-contribution"], [118, "local-effect-contribution"], [123, "local-effect-contribution"]], "Local Feature Contribution": [[115, "local-feature-contribution"], [118, "local-feature-contribution"], [123, "local-feature-contribution"]], "Examples 2: Taiwan Credit": [[115, null], [116, null], [118, null], [120, null], [121, null], [123, null], [125, null], [127, null], [128, null], [129, null], [130, null], [131, null], [133, null]], "Fast Interpretable Greedy-tree Sums": [[116, "fast-interpretable-greedy-tree-sums"]], "Feature Importance Heatmap": [[116, "feature-importance-heatmap"]], "Tree Diagram": [[116, "tree-diagram"]], "Example 1: CaliforniaHousing": [[116, null], [121, null], [129, null]], "Generalized Additive Model": [[117, "generalized-additive-model"]], "Example 1: California Housing": [[117, null], [131, null]], "Example 2: CoCircles": [[117, null], [122, null]], "GAMI-Net": [[118, "gami-net"]], "Generalized Linear Models": [[119, "generalized-linear-models"]], "Regression Coefficients": [[119, "regression-coefficients"]], "Original Scale Option": [[119, "original-scale-option"]], "Centered Option": [[119, "centered-option"]], "Data Dependent Interpretation": [[119, "data-dependent-interpretation"]], "Example 2: Taiwan Credit": [[119, null]], "ReLU Neural Network": [[120, "relu-neural-network"]], "Model Formulation": [[120, "model-formulation"]], "Local Linear Models": [[120, "local-linear-models"]], "LLM Summary Table": [[120, "llm-summary-table"]], "Parallel Coordinate Plot": [[120, "parallel-coordinate-plot"]], "LLM Violin Plot": [[120, "llm-violin-plot"]], "Feature Importance Plot": [[120, "feature-importance-plot"]], "LLM profile plot": [[120, "llm-profile-plot"]], "LLM pairwise plot": [[120, "llm-pairwise-plot"]], "Local Feature Contribution plot": [[120, "local-feature-contribution-plot"]], "Example 1: Friedman": [[120, null]], "Decision Tree": [[121, "decision-tree"]], "XGBoost Depth 1": [[122, "xgboost-depth-1"]], "Monotonicity Constraints": [[122, "monotonicity-constraints"]], "Sparsity via Binning Optimziation": [[122, "sparsity-via-binning-optimziation"]], "Weight of Evidence Plot": [[122, "weight-of-evidence-plot"]], "Information Value Plot": [[122, "information-value-plot"]], "XGBoost Depth 2": [[123, "xgboost-depth-2"]], "Accuracy": [[125, "accuracy"]], "Regression Tasks": [[125, "regression-tasks"]], "Accuracy Table": [[125, "accuracy-table"], [125, "id1"], [132, "accuracy-table"]], "Residual Plot": [[125, "residual-plot"], [125, "id2"], [132, "residual-plot"]], "Binary Classification": [[125, "binary-classification"]], "Accuracy Plot": [[125, "accuracy-plot"]], "Fairness": [[126, "fairness"]], "Fairness Segmented": [[126, "fairness-segmented"]], "Fairness Binning": [[126, "fairness-binning"]], "Fairness Thresholding": [[126, "fairness-thresholding"]], "Overfit": [[127, "overfit"]], "One-way Overfit Plot": [[127, "one-way-overfit-plot"]], "Two-way Overfit Plot": [[127, "two-way-overfit-plot"]], "Reliability": [[128, "reliability"]], "Reliability for Regression Tasks": [[128, "reliability-for-regression-tasks"]], "Coverage and Bandwidth Table": [[128, "coverage-and-bandwidth-table"]], "Distance of Reliable and Un-reliable Data": [[128, "distance-of-reliable-and-un-reliable-data"], [128, "id2"]], "Marginal Bandwidth": [[128, "marginal-bandwidth"], [128, "id3"]], "Reliability for Binary Classification": [[128, "reliability-for-binary-classification"]], "Classifier Calibration": [[128, "classifier-calibration"]], "Reliability Diagram": [[128, "reliability-diagram"]], "Brier Score Table": [[128, "brier-score-table"]], "Resilience": [[129, "resilience"]], "Marginal Density Comparison": [[129, "marginal-density-comparison"]], "Marginal Histogram Comparison": [[129, "marginal-histogram-comparison"]], "Robustness": [[130, "robustness"]], "Perturbation For Numerical Features": [[130, "perturbation-for-numerical-features"]], "Perturbation for Categorical Variable": [[130, "perturbation-for-categorical-variable"]], "Robustness on the whole test sample": [[130, "robustness-on-the-whole-test-sample"]], "Robustness on worst test samples": [[130, "robustness-on-worst-test-samples"]], "Scored Test": [[131, "scored-test"]], "Segments summary": [[132, "segments-summary"]], "Weakspot": [[132, "weakspot"]], "Distribution shift": [[132, "distribution-shift"]], "Examples 2: SimuCredit": [[132, null]], "WeakSpot": [[133, "weakspot"]], "One-way WeakSpot Plot": [[133, "one-way-weakspot-plot"]], "Two-way WeakSpot Plot": [[133, "two-way-weakspot-plot"]], "Train and Register Models": [[135, "train-and-register-models"], [136, "train-and-register-models"], [138, "train-and-register-models"]], "Define Wrapper Predict Functions": [[135, "define-wrapper-predict-functions"]], "Register the predict Functions": [[135, "register-the-predict-functions"]], "Run Diagnostic Tests": [[135, "run-diagnostic-tests"], [136, "run-diagnostic-tests"], [138, "run-diagnostic-tests"]], "Example 2:": [[135, null], [138, null]], "Save Fitted Models": [[136, "save-fitted-models"], [138, "save-fitted-models"]], "Load and Register Fitted Models": [[136, "load-and-register-fitted-models"], [138, "load-and-register-fitted-models"]], "Example 1:": [[136, null], [138, null]], "Hyperparameter Optimization (Model Tune)": [[137, "hyperparameter-optimization-model-tune"]], "Get model tunning result": [[137, "get-model-tunning-result"]], "Example 1: Grid Search": [[137, null]], "Example 2: Randomized Search": [[137, null]], "Train and Register Sklearn Style Model": [[138, "train-and-register-sklearn-style-model"]], "Register Arbitrary Models and Data": [[138, "register-arbitrary-models-and-data"]], "Installation": [[139, "installation"]], "Quick Install": [[139, "quick-install"]], "Dependencies": [[139, "dependencies"]], "Troubleshooting": [[139, "troubleshooting"]], "Could not find a version that satisfies the requirement PiML": [[139, "could-not-find-a-version-that-satisfies-the-requirement-piml"]], "Cannot uninstall \u201cllvmlite\u201d.": [[139, "cannot-uninstall-llvmlite"]], "Library \u201clibxgboost.so\u201d not loaded": [[139, "library-libxgboost-so-not-loaded"]], "Cannot import PiML on Colab": [[139, "cannot-import-piml-on-colab"]], "API Reference": [[140, "api-reference"]], "Functions": [[140, "functions"]], "Outlier Detection Algorithms": [[140, "outlier-detection-algorithms"]], "Integrated Functions": [[140, "integrated-functions"]], "Scored Test Function": [[140, "scored-test-function"]], "piml.data.outlier_detection.CBLOF": [[142, "piml-data-outlier-detection-cblof"]], "Examples using piml.data.outlier_detection.CBLOF": [[142, "examples-using-piml-data-outlier-detection-cblof"]], "piml.data.outlier_detection.ECOD": [[143, "piml-data-outlier-detection-ecod"]], "Examples using piml.data.outlier_detection.ECOD": [[143, "examples-using-piml-data-outlier-detection-ecod"]], "piml.data.outlier_detection.HBOS": [[144, "piml-data-outlier-detection-hbos"]], "Examples using piml.data.outlier_detection.HBOS": [[144, "examples-using-piml-data-outlier-detection-hbos"]], "piml.data.outlier_detection.IsolationForest": [[145, "piml-data-outlier-detection-isolationforest"]], "Examples using piml.data.outlier_detection.IsolationForest": [[145, "examples-using-piml-data-outlier-detection-isolationforest"]], "piml.data.outlier_detection.KMeansTree": [[146, "piml-data-outlier-detection-kmeanstree"]], "Examples using piml.data.outlier_detection.KMeansTree": [[146, "examples-using-piml-data-outlier-detection-kmeanstree"]], "piml.data.outlier_detection.KNN": [[147, "piml-data-outlier-detection-knn"]], "Examples using piml.data.outlier_detection.KNN": [[147, "examples-using-piml-data-outlier-detection-knn"]], "piml.data.outlier_detection.OneClassSVM": [[148, "piml-data-outlier-detection-oneclasssvm"]], "Examples using piml.data.outlier_detection.OneClassSVM": [[148, "examples-using-piml-data-outlier-detection-oneclasssvm"]], "piml.data.outlier_detection.PCA": [[149, "piml-data-outlier-detection-pca"]], "Examples using piml.data.outlier_detection.PCA": [[149, "examples-using-piml-data-outlier-detection-pca"]], "piml.models.ExplainableBoostingClassifier": [[150, "piml-models-explainableboostingclassifier"]], "Examples using piml.models.ExplainableBoostingClassifier": [[150, "examples-using-piml-models-explainableboostingclassifier"]], "piml.models.ExplainableBoostingRegressor": [[151, "piml-models-explainableboostingregressor"]], "Examples using piml.models.ExplainableBoostingRegressor": [[151, "examples-using-piml-models-explainableboostingregressor"]], "piml.models.FIGSClassifier": [[152, "piml-models-figsclassifier"]], "Examples using piml.models.FIGSClassifier": [[152, "examples-using-piml-models-figsclassifier"]], "piml.models.FIGSRegressor": [[153, "piml-models-figsregressor"]], "Examples using piml.models.FIGSRegressor": [[153, "examples-using-piml-models-figsregressor"]], "piml.models.GAMClassifier": [[154, "piml-models-gamclassifier"]], "Examples using piml.models.GAMClassifier": [[154, "examples-using-piml-models-gamclassifier"]], "piml.models.GAMINetRegressor": [[156, "piml-models-gaminetregressor"]], "Examples using piml.models.GAMINetRegressor": [[156, "examples-using-piml-models-gaminetregressor"]], "piml.models.GAMRegressor": [[157, "piml-models-gamregressor"]], "Examples using piml.models.GAMRegressor": [[157, "examples-using-piml-models-gamregressor"]], "piml.models.GLMClassifier": [[158, "piml-models-glmclassifier"]], "Examples using piml.models.GLMClassifier": [[158, "examples-using-piml-models-glmclassifier"]], "piml.models.GLMRegressor": [[159, "piml-models-glmregressor"]], "Examples using piml.models.GLMRegressor": [[159, "examples-using-piml-models-glmregressor"]], "piml.models.ReluDNNClassifier": [[160, "piml-models-reludnnclassifier"]], "Examples using piml.models.ReluDNNClassifier": [[160, "examples-using-piml-models-reludnnclassifier"]], "piml.models.ReluDNNRegressor": [[161, "piml-models-reludnnregressor"]], "Examples using piml.models.ReluDNNRegressor": [[161, "examples-using-piml-models-reludnnregressor"]], "piml.models.TreeClassifier": [[162, "piml-models-treeclassifier"]], "Examples using piml.models.TreeClassifier": [[162, "examples-using-piml-models-treeclassifier"]], "piml.models.TreeRegressor": [[163, "piml-models-treeregressor"]], "Examples using piml.models.TreeRegressor": [[163, "examples-using-piml-models-treeregressor"]], "piml.models.XGB1Classifier": [[164, "piml-models-xgb1classifier"]], "Examples using piml.models.XGB1Classifier": [[164, "examples-using-piml-models-xgb1classifier"]], "piml.models.XGB1Regressor": [[165, "piml-models-xgb1regressor"]], "Examples using piml.models.XGB1Regressor": [[165, "examples-using-piml-models-xgb1regressor"]], "piml.models.XGB2Regressor": [[167, "piml-models-xgb2regressor"]], "Examples using piml.models.XGB2Regressor": [[167, "examples-using-piml-models-xgb2regressor"]], "piml.scored_test.test_accuracy_plot": [[168, "piml-scored-test-test-accuracy-plot"]], "piml.scored_test.test_accuracy_residual": [[169, "piml-scored-test-test-accuracy-residual"]], "piml.scored_test.test_accuracy_table": [[170, "piml-scored-test-test-accuracy-table"]], "piml.scored_test.test_overfit": [[171, "piml-scored-test-test-overfit"]], "piml.scored_test.test_reliability_calibration": [[172, "piml-scored-test-test-reliability-calibration"]], "piml.scored_test.test_reliability_distance": [[173, "piml-scored-test-test-reliability-distance"]], "piml.scored_test.test_reliability_marginal": [[174, "piml-scored-test-test-reliability-marginal"]], "piml.scored_test.test_reliability_perf": [[175, "piml-scored-test-test-reliability-perf"]], "piml.scored_test.test_reliability_table": [[176, "piml-scored-test-test-reliability-table"]], "piml.scored_test.test_resilience_distance": [[177, "piml-scored-test-test-resilience-distance"]], "piml.scored_test.test_resilience_perf": [[178, "piml-scored-test-test-resilience-perf"]], "piml.scored_test.test_resilience_shift_density": [[179, "piml-scored-test-test-resilience-shift-density"]], "piml.scored_test.test_resilience_shift_histogram": [[180, "piml-scored-test-test-resilience-shift-histogram"]], "piml.scored_test.test_weakspot": [[181, "piml-scored-test-test-weakspot"]], "Welcome to PiML": [[182, "welcome-to-piml"]], "User Guide": [[185, "user-guide"]], "Build Robust Models with Monotonicity Constraints": [[80, "build-robust-models-with-monotonicity-constraints"]], "piml.Experiment": [[141, "piml-experiment"]], "Examples using piml.Experiment": [[141, "examples-using-piml-experiment"]], "piml.models.GAMINetClassifier": [[155, "piml-models-gaminetclassifier"]], "Examples using piml.models.GAMINetClassifier": [[155, "examples-using-piml-models-gaminetclassifier"]], "piml.models.XGB2Classifier": [[166, "piml-models-xgb2classifier"]], "Examples using piml.models.XGB2Classifier": [[166, "examples-using-piml-models-xgb2classifier"]]}, "indexentries": {"experiment (class in piml)": [[141, "piml.Experiment"]], "data_loader() (piml.experiment method)": [[141, "piml.Experiment.data_loader"]], "data_prepare() (piml.experiment method)": [[141, "piml.Experiment.data_prepare"]], "data_quality() (piml.experiment method)": [[141, "piml.Experiment.data_quality"]], "data_summary() (piml.experiment method)": [[141, "piml.Experiment.data_summary"]], "eda() (piml.experiment method)": [[141, "piml.Experiment.eda"]], "feature_select() (piml.experiment method)": [[141, "piml.Experiment.feature_select"]], "get_data() (piml.experiment method)": [[141, "piml.Experiment.get_data"]], "get_feature_names() (piml.experiment method)": [[141, "piml.Experiment.get_feature_names"]], "get_feature_types() (piml.experiment method)": [[141, "piml.Experiment.get_feature_types"]], "get_interpretable_model_list() (piml.experiment method)": [[141, "piml.Experiment.get_interpretable_model_list"]], "get_leaderboard() (piml.experiment method)": [[141, "piml.Experiment.get_leaderboard"]], "get_leaderboard_registered() (piml.experiment method)": [[141, "piml.Experiment.get_leaderboard_registered"]], "get_model() (piml.experiment method)": [[141, "piml.Experiment.get_model"]], "get_model_config() (piml.experiment method)": [[141, "piml.Experiment.get_model_config"]], "get_model_list() (piml.experiment method)": [[141, "piml.Experiment.get_model_list"]], "get_raw_data() (piml.experiment method)": [[141, "piml.Experiment.get_raw_data"]], "get_target_name() (piml.experiment method)": [[141, "piml.Experiment.get_target_name"]], "make_pipeline() (piml.experiment method)": [[141, "piml.Experiment.make_pipeline"]], "model_compare() (piml.experiment method)": [[141, "piml.Experiment.model_compare"]], "model_diagnose() (piml.experiment method)": [[141, "piml.Experiment.model_diagnose"]], "model_explain() (piml.experiment method)": [[141, "piml.Experiment.model_explain"]], "model_fairness() (piml.experiment method)": [[141, "piml.Experiment.model_fairness"]], "model_fairness_compare() (piml.experiment method)": [[141, "piml.Experiment.model_fairness_compare"]], "model_fairness_solas() (piml.experiment method)": [[141, "piml.Experiment.model_fairness_solas"]], "model_interpret() (piml.experiment method)": [[141, "piml.Experiment.model_interpret"]], "model_save() (piml.experiment method)": [[141, "piml.Experiment.model_save"]], "model_train() (piml.experiment method)": [[141, "piml.Experiment.model_train"]], "model_tune() (piml.experiment method)": [[141, "piml.Experiment.model_tune"]], "register() (piml.experiment method)": [[141, "piml.Experiment.register"]], "segmented_diagnose() (piml.experiment method)": [[141, "piml.Experiment.segmented_diagnose"]], "cblof (class in piml.data.outlier_detection)": [[142, "piml.data.outlier_detection.CBLOF"]], "decision_function() (piml.data.outlier_detection.cblof method)": [[142, "piml.data.outlier_detection.CBLOF.decision_function"]], "fit() (piml.data.outlier_detection.cblof method)": [[142, "piml.data.outlier_detection.CBLOF.fit"]], "predict() (piml.data.outlier_detection.cblof method)": [[142, "piml.data.outlier_detection.CBLOF.predict"]], "ecod (class in piml.data.outlier_detection)": [[143, "piml.data.outlier_detection.ECOD"]], "decision_function() (piml.data.outlier_detection.ecod method)": [[143, "piml.data.outlier_detection.ECOD.decision_function"]], "fit() (piml.data.outlier_detection.ecod method)": [[143, "piml.data.outlier_detection.ECOD.fit"]], "predict() (piml.data.outlier_detection.ecod method)": [[143, "piml.data.outlier_detection.ECOD.predict"]], "hbos (class in piml.data.outlier_detection)": [[144, "piml.data.outlier_detection.HBOS"]], "decision_function() (piml.data.outlier_detection.hbos method)": [[144, "piml.data.outlier_detection.HBOS.decision_function"]], "fit() (piml.data.outlier_detection.hbos method)": [[144, "piml.data.outlier_detection.HBOS.fit"]], "predict() (piml.data.outlier_detection.hbos method)": [[144, "piml.data.outlier_detection.HBOS.predict"]], "isolationforest (class in piml.data.outlier_detection)": [[145, "piml.data.outlier_detection.IsolationForest"]], "decision_function() (piml.data.outlier_detection.isolationforest method)": [[145, "piml.data.outlier_detection.IsolationForest.decision_function"]], "fit() (piml.data.outlier_detection.isolationforest method)": [[145, "piml.data.outlier_detection.IsolationForest.fit"]], "predict() (piml.data.outlier_detection.isolationforest method)": [[145, "piml.data.outlier_detection.IsolationForest.predict"]], "kmeanstree (class in piml.data.outlier_detection)": [[146, "piml.data.outlier_detection.KMeansTree"]], "decision_function() (piml.data.outlier_detection.kmeanstree method)": [[146, "piml.data.outlier_detection.KMeansTree.decision_function"]], "decision_path() (piml.data.outlier_detection.kmeanstree method)": [[146, "piml.data.outlier_detection.KMeansTree.decision_path"]], "fit() (piml.data.outlier_detection.kmeanstree method)": [[146, "piml.data.outlier_detection.KMeansTree.fit"]], "get_metadata_routing() (piml.data.outlier_detection.kmeanstree method)": [[146, "piml.data.outlier_detection.KMeansTree.get_metadata_routing"]], "get_params() (piml.data.outlier_detection.kmeanstree method)": [[146, "piml.data.outlier_detection.KMeansTree.get_params"]], "get_rule() (piml.data.outlier_detection.kmeanstree method)": [[146, "piml.data.outlier_detection.KMeansTree.get_rule"]], "plot_tree() (piml.data.outlier_detection.kmeanstree method)": [[146, "piml.data.outlier_detection.KMeansTree.plot_tree"]], "predict() (piml.data.outlier_detection.kmeanstree method)": [[146, "piml.data.outlier_detection.KMeansTree.predict"]], "predict_leaf_id() (piml.data.outlier_detection.kmeanstree method)": [[146, "piml.data.outlier_detection.KMeansTree.predict_leaf_id"]], "set_params() (piml.data.outlier_detection.kmeanstree method)": [[146, "piml.data.outlier_detection.KMeansTree.set_params"]], "knn (class in piml.data.outlier_detection)": [[147, "piml.data.outlier_detection.KNN"]], "decision_function() (piml.data.outlier_detection.knn method)": [[147, "piml.data.outlier_detection.KNN.decision_function"]], "fit() (piml.data.outlier_detection.knn method)": [[147, "piml.data.outlier_detection.KNN.fit"]], "predict() (piml.data.outlier_detection.knn method)": [[147, "piml.data.outlier_detection.KNN.predict"]], "oneclasssvm (class in piml.data.outlier_detection)": [[148, "piml.data.outlier_detection.OneClassSVM"]], "decision_function() (piml.data.outlier_detection.oneclasssvm method)": [[148, "piml.data.outlier_detection.OneClassSVM.decision_function"]], "fit() (piml.data.outlier_detection.oneclasssvm method)": [[148, "piml.data.outlier_detection.OneClassSVM.fit"]], "predict() (piml.data.outlier_detection.oneclasssvm method)": [[148, "piml.data.outlier_detection.OneClassSVM.predict"]], "pca (class in piml.data.outlier_detection)": [[149, "piml.data.outlier_detection.PCA"]], "decision_function() (piml.data.outlier_detection.pca method)": [[149, "piml.data.outlier_detection.PCA.decision_function"]], "fit() (piml.data.outlier_detection.pca method)": [[149, "piml.data.outlier_detection.PCA.fit"]], "predict() (piml.data.outlier_detection.pca method)": [[149, "piml.data.outlier_detection.PCA.predict"]], "explainableboostingclassifier (class in piml.models)": [[150, "piml.models.ExplainableBoostingClassifier"]], "decision_function() (piml.models.explainableboostingclassifier method)": [[150, "piml.models.ExplainableBoostingClassifier.decision_function"]], "fit() (piml.models.explainableboostingclassifier method)": [[150, "piml.models.ExplainableBoostingClassifier.fit"]], "get_metadata_routing() (piml.models.explainableboostingclassifier method)": [[150, "piml.models.ExplainableBoostingClassifier.get_metadata_routing"]], "get_params() (piml.models.explainableboostingclassifier method)": [[150, "piml.models.ExplainableBoostingClassifier.get_params"]], "parse_model() (piml.models.explainableboostingclassifier method)": [[150, "piml.models.ExplainableBoostingClassifier.parse_model"]], "partial_dependence() (piml.models.explainableboostingclassifier method)": [[150, "piml.models.ExplainableBoostingClassifier.partial_dependence"]], "predict() (piml.models.explainableboostingclassifier method)": [[150, "piml.models.ExplainableBoostingClassifier.predict"]], "predict_proba() (piml.models.explainableboostingclassifier method)": [[150, "piml.models.ExplainableBoostingClassifier.predict_proba"]], "score() (piml.models.explainableboostingclassifier method)": [[150, "piml.models.ExplainableBoostingClassifier.score"]], "set_params() (piml.models.explainableboostingclassifier method)": [[150, "piml.models.ExplainableBoostingClassifier.set_params"]], "set_score_request() (piml.models.explainableboostingclassifier method)": [[150, "piml.models.ExplainableBoostingClassifier.set_score_request"]], "explainableboostingregressor (class in piml.models)": [[151, "piml.models.ExplainableBoostingRegressor"]], "decision_function() (piml.models.explainableboostingregressor method)": [[151, "piml.models.ExplainableBoostingRegressor.decision_function"]], "fit() (piml.models.explainableboostingregressor method)": [[151, "piml.models.ExplainableBoostingRegressor.fit"]], "get_metadata_routing() (piml.models.explainableboostingregressor method)": [[151, "piml.models.ExplainableBoostingRegressor.get_metadata_routing"]], "get_params() (piml.models.explainableboostingregressor method)": [[151, "piml.models.ExplainableBoostingRegressor.get_params"]], "parse_model() (piml.models.explainableboostingregressor method)": [[151, "piml.models.ExplainableBoostingRegressor.parse_model"]], "partial_dependence() (piml.models.explainableboostingregressor method)": [[151, "piml.models.ExplainableBoostingRegressor.partial_dependence"]], "predict() (piml.models.explainableboostingregressor method)": [[151, "piml.models.ExplainableBoostingRegressor.predict"]], "score() (piml.models.explainableboostingregressor method)": [[151, "piml.models.ExplainableBoostingRegressor.score"]], "set_params() (piml.models.explainableboostingregressor method)": [[151, "piml.models.ExplainableBoostingRegressor.set_params"]], "set_score_request() (piml.models.explainableboostingregressor method)": [[151, "piml.models.ExplainableBoostingRegressor.set_score_request"]], "figsclassifier (class in piml.models)": [[152, "piml.models.FIGSClassifier"]], "decision_function() (piml.models.figsclassifier method)": [[152, "piml.models.FIGSClassifier.decision_function"]], "fit() (piml.models.figsclassifier method)": [[152, "piml.models.FIGSClassifier.fit"]], "get_metadata_routing() (piml.models.figsclassifier method)": [[152, "piml.models.FIGSClassifier.get_metadata_routing"]], "get_params() (piml.models.figsclassifier method)": [[152, "piml.models.FIGSClassifier.get_params"]], "parse_model() (piml.models.figsclassifier method)": [[152, "piml.models.FIGSClassifier.parse_model"]], "predict() (piml.models.figsclassifier method)": [[152, "piml.models.FIGSClassifier.predict"]], "predict_proba() (piml.models.figsclassifier method)": [[152, "piml.models.FIGSClassifier.predict_proba"]], "score() (piml.models.figsclassifier method)": [[152, "piml.models.FIGSClassifier.score"]], "set_params() (piml.models.figsclassifier method)": [[152, "piml.models.FIGSClassifier.set_params"]], "set_score_request() (piml.models.figsclassifier method)": [[152, "piml.models.FIGSClassifier.set_score_request"]], "figsregressor (class in piml.models)": [[153, "piml.models.FIGSRegressor"]], "fit() (piml.models.figsregressor method)": [[153, "piml.models.FIGSRegressor.fit"]], "get_metadata_routing() (piml.models.figsregressor method)": [[153, "piml.models.FIGSRegressor.get_metadata_routing"]], "get_params() (piml.models.figsregressor method)": [[153, "piml.models.FIGSRegressor.get_params"]], "parse_model() (piml.models.figsregressor method)": [[153, "piml.models.FIGSRegressor.parse_model"]], "predict() (piml.models.figsregressor method)": [[153, "piml.models.FIGSRegressor.predict"]], "score() (piml.models.figsregressor method)": [[153, "piml.models.FIGSRegressor.score"]], "set_params() (piml.models.figsregressor method)": [[153, "piml.models.FIGSRegressor.set_params"]], "set_score_request() (piml.models.figsregressor method)": [[153, "piml.models.FIGSRegressor.set_score_request"]], "gamclassifier (class in piml.models)": [[154, "piml.models.GAMClassifier"]], "decision_function() (piml.models.gamclassifier method)": [[154, "piml.models.GAMClassifier.decision_function"]], "fit() (piml.models.gamclassifier method)": [[154, "piml.models.GAMClassifier.fit"]], "get_metadata_routing() (piml.models.gamclassifier method)": [[154, "piml.models.GAMClassifier.get_metadata_routing"]], "get_params() (piml.models.gamclassifier method)": [[154, "piml.models.GAMClassifier.get_params"]], "parse_model() (piml.models.gamclassifier method)": [[154, "piml.models.GAMClassifier.parse_model"]], "partial_dependence() (piml.models.gamclassifier method)": [[154, "piml.models.GAMClassifier.partial_dependence"]], "predict() (piml.models.gamclassifier method)": [[154, "piml.models.GAMClassifier.predict"]], "predict_proba() (piml.models.gamclassifier method)": [[154, "piml.models.GAMClassifier.predict_proba"]], "score() (piml.models.gamclassifier method)": [[154, "piml.models.GAMClassifier.score"]], "set_params() (piml.models.gamclassifier method)": [[154, "piml.models.GAMClassifier.set_params"]], "gaminetclassifier (class in piml.models)": [[155, "piml.models.GAMINetClassifier"]], "certify_mono() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.certify_mono"]], "decision_function() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.decision_function"]], "fine_tune_selected() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.fine_tune_selected"]], "fit() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.fit"]], "get_clarity_loss() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.get_clarity_loss"]], "get_interaction_raw_output() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.get_interaction_raw_output"]], "get_main_effect_raw_output() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.get_main_effect_raw_output"]], "get_metadata_routing() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.get_metadata_routing"]], "get_mono_loss() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.get_mono_loss"]], "get_params() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.get_params"]], "get_raw_output() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.get_raw_output"]], "load() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.load"]], "parse_model() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.parse_model"]], "partial_dependence() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.partial_dependence"]], "partial_derivatives() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.partial_derivatives"]], "predict() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.predict"]], "predict_proba() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.predict_proba"]], "save() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.save"]], "score() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.score"]], "set_params() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.set_params"]], "set_score_request() (piml.models.gaminetclassifier method)": [[155, "piml.models.GAMINetClassifier.set_score_request"]], "gaminetregressor (class in piml.models)": [[156, "piml.models.GAMINetRegressor"]], "certify_mono() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.certify_mono"]], "fine_tune_selected() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.fine_tune_selected"]], "fit() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.fit"]], "get_clarity_loss() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.get_clarity_loss"]], "get_interaction_raw_output() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.get_interaction_raw_output"]], "get_main_effect_raw_output() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.get_main_effect_raw_output"]], "get_metadata_routing() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.get_metadata_routing"]], "get_mono_loss() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.get_mono_loss"]], "get_params() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.get_params"]], "get_raw_output() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.get_raw_output"]], "load() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.load"]], "parse_model() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.parse_model"]], "partial_dependence() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.partial_dependence"]], "partial_derivatives() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.partial_derivatives"]], "predict() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.predict"]], "save() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.save"]], "score() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.score"]], "set_params() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.set_params"]], "set_score_request() (piml.models.gaminetregressor method)": [[156, "piml.models.GAMINetRegressor.set_score_request"]], "gamregressor (class in piml.models)": [[157, "piml.models.GAMRegressor"]], "fit() (piml.models.gamregressor method)": [[157, "piml.models.GAMRegressor.fit"]], "get_metadata_routing() (piml.models.gamregressor method)": [[157, "piml.models.GAMRegressor.get_metadata_routing"]], "get_params() (piml.models.gamregressor method)": [[157, "piml.models.GAMRegressor.get_params"]], "parse_model() (piml.models.gamregressor method)": [[157, "piml.models.GAMRegressor.parse_model"]], "partial_dependence() (piml.models.gamregressor method)": [[157, "piml.models.GAMRegressor.partial_dependence"]], "predict() (piml.models.gamregressor method)": [[157, "piml.models.GAMRegressor.predict"]], "score() (piml.models.gamregressor method)": [[157, "piml.models.GAMRegressor.score"]], "set_params() (piml.models.gamregressor method)": [[157, "piml.models.GAMRegressor.set_params"]], "glmclassifier (class in piml.models)": [[158, "piml.models.GLMClassifier"]], "glmregressor (class in piml.models)": [[159, "piml.models.GLMRegressor"]], "get_metadata_routing() (piml.models.glmregressor method)": [[159, "piml.models.GLMRegressor.get_metadata_routing"]], "get_params() (piml.models.glmregressor method)": [[159, "piml.models.GLMRegressor.get_params"]], "set_params() (piml.models.glmregressor method)": [[159, "piml.models.GLMRegressor.set_params"]], "reludnnclassifier (class in piml.models)": [[160, "piml.models.ReluDNNClassifier"]], "decision_function() (piml.models.reludnnclassifier method)": [[160, "piml.models.ReluDNNClassifier.decision_function"]], "fit() (piml.models.reludnnclassifier method)": [[160, "piml.models.ReluDNNClassifier.fit"]], "get_metadata_routing() (piml.models.reludnnclassifier method)": [[160, "piml.models.ReluDNNClassifier.get_metadata_routing"]], "get_params() (piml.models.reludnnclassifier method)": [[160, "piml.models.ReluDNNClassifier.get_params"]], "get_raw_output() (piml.models.reludnnclassifier method)": [[160, "piml.models.ReluDNNClassifier.get_raw_output"]], "parse_model() (piml.models.reludnnclassifier method)": [[160, "piml.models.ReluDNNClassifier.parse_model"]], "predict() (piml.models.reludnnclassifier method)": [[160, "piml.models.ReluDNNClassifier.predict"]], "predict_proba() (piml.models.reludnnclassifier method)": [[160, "piml.models.ReluDNNClassifier.predict_proba"]], "score() (piml.models.reludnnclassifier method)": [[160, "piml.models.ReluDNNClassifier.score"]], "set_params() (piml.models.reludnnclassifier method)": [[160, "piml.models.ReluDNNClassifier.set_params"]], "set_score_request() (piml.models.reludnnclassifier method)": [[160, "piml.models.ReluDNNClassifier.set_score_request"]], "reludnnregressor (class in piml.models)": [[161, "piml.models.ReluDNNRegressor"]], "fit() (piml.models.reludnnregressor method)": [[161, "piml.models.ReluDNNRegressor.fit"]], "get_metadata_routing() (piml.models.reludnnregressor method)": [[161, "piml.models.ReluDNNRegressor.get_metadata_routing"]], "get_params() (piml.models.reludnnregressor method)": [[161, "piml.models.ReluDNNRegressor.get_params"]], "get_raw_output() (piml.models.reludnnregressor method)": [[161, "piml.models.ReluDNNRegressor.get_raw_output"]], "parse_model() (piml.models.reludnnregressor method)": [[161, "piml.models.ReluDNNRegressor.parse_model"]], "predict() (piml.models.reludnnregressor method)": [[161, "piml.models.ReluDNNRegressor.predict"]], "score() (piml.models.reludnnregressor method)": [[161, "piml.models.ReluDNNRegressor.score"]], "set_params() (piml.models.reludnnregressor method)": [[161, "piml.models.ReluDNNRegressor.set_params"]], "set_score_request() (piml.models.reludnnregressor method)": [[161, "piml.models.ReluDNNRegressor.set_score_request"]], "treeclassifier (class in piml.models)": [[162, "piml.models.TreeClassifier"]], "apply() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.apply"]], "cost_complexity_pruning_path() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.cost_complexity_pruning_path"]], "decision_path() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.decision_path"]], "feature_importances_ (piml.models.treeclassifier property)": [[162, "piml.models.TreeClassifier.feature_importances_"]], "fit() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.fit"]], "get_depth() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.get_depth"]], "get_metadata_routing() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.get_metadata_routing"]], "get_n_leaves() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.get_n_leaves"]], "get_params() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.get_params"]], "parse_model() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.parse_model"]], "predict() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.predict"]], "predict_log_proba() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.predict_log_proba"]], "predict_proba() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.predict_proba"]], "score() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.score"]], "set_fit_request() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.set_fit_request"]], "set_params() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.set_params"]], "set_predict_proba_request() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.set_predict_proba_request"]], "set_predict_request() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.set_predict_request"]], "set_score_request() (piml.models.treeclassifier method)": [[162, "piml.models.TreeClassifier.set_score_request"]], "treeregressor (class in piml.models)": [[163, "piml.models.TreeRegressor"]], "apply() (piml.models.treeregressor method)": [[163, "piml.models.TreeRegressor.apply"]], "cost_complexity_pruning_path() (piml.models.treeregressor method)": [[163, "piml.models.TreeRegressor.cost_complexity_pruning_path"]], "decision_path() (piml.models.treeregressor method)": [[163, "piml.models.TreeRegressor.decision_path"]], "feature_importances_ (piml.models.treeregressor property)": [[163, "piml.models.TreeRegressor.feature_importances_"]], "fit() (piml.models.treeregressor method)": [[163, "piml.models.TreeRegressor.fit"]], "get_depth() (piml.models.treeregressor method)": [[163, "piml.models.TreeRegressor.get_depth"]], "get_metadata_routing() (piml.models.treeregressor method)": [[163, "piml.models.TreeRegressor.get_metadata_routing"]], "get_n_leaves() (piml.models.treeregressor method)": [[163, "piml.models.TreeRegressor.get_n_leaves"]], "get_params() (piml.models.treeregressor method)": [[163, "piml.models.TreeRegressor.get_params"]], "parse_model() (piml.models.treeregressor method)": [[163, "piml.models.TreeRegressor.parse_model"]], "predict() (piml.models.treeregressor method)": [[163, "piml.models.TreeRegressor.predict"]], "score() (piml.models.treeregressor method)": [[163, "piml.models.TreeRegressor.score"]], "set_fit_request() (piml.models.treeregressor method)": [[163, "piml.models.TreeRegressor.set_fit_request"]], "set_params() (piml.models.treeregressor method)": [[163, "piml.models.TreeRegressor.set_params"]], "set_predict_request() (piml.models.treeregressor method)": [[163, "piml.models.TreeRegressor.set_predict_request"]], "set_score_request() (piml.models.treeregressor method)": [[163, "piml.models.TreeRegressor.set_score_request"]], "xgb1classifier (class in piml.models)": [[164, "piml.models.XGB1Classifier"]], "decision_function() (piml.models.xgb1classifier method)": [[164, "piml.models.XGB1Classifier.decision_function"]], "fit() (piml.models.xgb1classifier method)": [[164, "piml.models.XGB1Classifier.fit"]], "get_metadata_routing() (piml.models.xgb1classifier method)": [[164, "piml.models.XGB1Classifier.get_metadata_routing"]], "get_params() (piml.models.xgb1classifier method)": [[164, "piml.models.XGB1Classifier.get_params"]], "get_raw_output() (piml.models.xgb1classifier method)": [[164, "piml.models.XGB1Classifier.get_raw_output"]], "parse_model() (piml.models.xgb1classifier method)": [[164, "piml.models.XGB1Classifier.parse_model"]], "partial_dependence() (piml.models.xgb1classifier method)": [[164, "piml.models.XGB1Classifier.partial_dependence"]], "predict() (piml.models.xgb1classifier method)": [[164, "piml.models.XGB1Classifier.predict"]], "predict_proba() (piml.models.xgb1classifier method)": [[164, "piml.models.XGB1Classifier.predict_proba"]], "score() (piml.models.xgb1classifier method)": [[164, "piml.models.XGB1Classifier.score"]], "set_params() (piml.models.xgb1classifier method)": [[164, "piml.models.XGB1Classifier.set_params"]], "set_score_request() (piml.models.xgb1classifier method)": [[164, "piml.models.XGB1Classifier.set_score_request"]], "xgb1regressor (class in piml.models)": [[165, "piml.models.XGB1Regressor"]], "fit() (piml.models.xgb1regressor method)": [[165, "piml.models.XGB1Regressor.fit"]], "get_metadata_routing() (piml.models.xgb1regressor method)": [[165, "piml.models.XGB1Regressor.get_metadata_routing"]], "get_params() (piml.models.xgb1regressor method)": [[165, "piml.models.XGB1Regressor.get_params"]], "get_raw_output() (piml.models.xgb1regressor method)": [[165, "piml.models.XGB1Regressor.get_raw_output"]], "parse_model() (piml.models.xgb1regressor method)": [[165, "piml.models.XGB1Regressor.parse_model"]], "partial_dependence() (piml.models.xgb1regressor method)": [[165, "piml.models.XGB1Regressor.partial_dependence"]], "predict() (piml.models.xgb1regressor method)": [[165, "piml.models.XGB1Regressor.predict"]], "score() (piml.models.xgb1regressor method)": [[165, "piml.models.XGB1Regressor.score"]], "set_params() (piml.models.xgb1regressor method)": [[165, "piml.models.XGB1Regressor.set_params"]], "set_score_request() (piml.models.xgb1regressor method)": [[165, "piml.models.XGB1Regressor.set_score_request"]], "xgb2classifier (class in piml.models)": [[166, "piml.models.XGB2Classifier"]], "decision_function() (piml.models.xgb2classifier method)": [[166, "piml.models.XGB2Classifier.decision_function"]], "fit() (piml.models.xgb2classifier method)": [[166, "piml.models.XGB2Classifier.fit"]], "get_metadata_routing() (piml.models.xgb2classifier method)": [[166, "piml.models.XGB2Classifier.get_metadata_routing"]], "get_params() (piml.models.xgb2classifier method)": [[166, "piml.models.XGB2Classifier.get_params"]], "parse_model() (piml.models.xgb2classifier method)": [[166, "piml.models.XGB2Classifier.parse_model"]], "partial_dependence() (piml.models.xgb2classifier method)": [[166, "piml.models.XGB2Classifier.partial_dependence"]], "predict() (piml.models.xgb2classifier method)": [[166, "piml.models.XGB2Classifier.predict"]], "predict_proba() (piml.models.xgb2classifier method)": [[166, "piml.models.XGB2Classifier.predict_proba"]], "score() (piml.models.xgb2classifier method)": [[166, "piml.models.XGB2Classifier.score"]], "set_params() (piml.models.xgb2classifier method)": [[166, "piml.models.XGB2Classifier.set_params"]], "set_score_request() (piml.models.xgb2classifier method)": [[166, "piml.models.XGB2Classifier.set_score_request"]], "xgb2regressor (class in piml.models)": [[167, "piml.models.XGB2Regressor"]], "fit() (piml.models.xgb2regressor method)": [[167, "piml.models.XGB2Regressor.fit"]], "get_metadata_routing() (piml.models.xgb2regressor method)": [[167, "piml.models.XGB2Regressor.get_metadata_routing"]], "get_params() (piml.models.xgb2regressor method)": [[167, "piml.models.XGB2Regressor.get_params"]], "parse_model() (piml.models.xgb2regressor method)": [[167, "piml.models.XGB2Regressor.parse_model"]], "partial_dependence() (piml.models.xgb2regressor method)": [[167, "piml.models.XGB2Regressor.partial_dependence"]], "predict() (piml.models.xgb2regressor method)": [[167, "piml.models.XGB2Regressor.predict"]], "score() (piml.models.xgb2regressor method)": [[167, "piml.models.XGB2Regressor.score"]], "set_params() (piml.models.xgb2regressor method)": [[167, "piml.models.XGB2Regressor.set_params"]], "set_score_request() (piml.models.xgb2regressor method)": [[167, "piml.models.XGB2Regressor.set_score_request"]], "test_accuracy_plot() (in module piml.scored_test)": [[168, "piml.scored_test.test_accuracy_plot"]], "test_accuracy_residual() (in module piml.scored_test)": [[169, "piml.scored_test.test_accuracy_residual"]], "test_accuracy_table() (in module piml.scored_test)": [[170, "piml.scored_test.test_accuracy_table"]], "test_overfit() (in module piml.scored_test)": [[171, "piml.scored_test.test_overfit"]], "test_reliability_calibration() (in module piml.scored_test)": [[172, "piml.scored_test.test_reliability_calibration"]], "test_reliability_distance() (in module piml.scored_test)": [[173, "piml.scored_test.test_reliability_distance"]], "test_reliability_marginal() (in module piml.scored_test)": [[174, "piml.scored_test.test_reliability_marginal"]], "test_reliability_perf() (in module piml.scored_test)": [[175, "piml.scored_test.test_reliability_perf"]], "test_reliability_table() (in module piml.scored_test)": [[176, "piml.scored_test.test_reliability_table"]], "test_resilience_distance() (in module piml.scored_test)": [[177, "piml.scored_test.test_resilience_distance"]], "test_resilience_perf() (in module piml.scored_test)": [[178, "piml.scored_test.test_resilience_perf"]], "test_resilience_shift_density() (in module piml.scored_test)": [[179, "piml.scored_test.test_resilience_shift_density"]], "test_resilience_shift_histogram() (in module piml.scored_test)": [[180, "piml.scored_test.test_resilience_shift_histogram"]], "test_weakspot() (in module piml.scored_test)": [[181, "piml.scored_test.test_weakspot"]]}})